names_to = "Year",
values_to = "Area"
) %>%
mutate(Year = as.numeric(str_remove(Year, "X")))  # Convert "X2023" -> 2023 (numeric)
anova_results <- ImageryAreas_long %>%
group_by(Class) %>%
summarise(ANOVA_test = list(aov(Area ~ Year, data = cur_data()))) %>%
mutate(p_value = sapply(ANOVA_test, function(x) summary(x)[[1]][["Pr(>F)"]][1]))
View(anova_results)
tukey_results <- ImageryAreas_long %>%
group_by(Class.Sheep) %>%
summarise(Tukey = list(TukeyHSD(aov(Area ~ Year, data = cur_data()))))
tukey_results <- ImageryAreas_long %>%
group_by(Class) %>%
summarise(Tukey = list(TukeyHSD(aov(Area ~ Year, data = cur_data()))))
tukey_results <- ImageryAreas_long %>%
group_by(Class) %>%
mutate(Year = as.factor(Year)) %>%
summarise(Tukey = list(TukeyHSD(aov(Area ~ Year, data = cur_data()))))
tukey_results
View(tukey_results)
tukey_results %>%
mutate(Tukey_summary = map(Tukey, broom::tidy)) %>%
unnest(Tukey_summary) %>%
select(Class.Sheep, term, contrast, estimate, adj.p.value)
tukey_results %>%
mutate(Tukey_summary = map(Tukey, broom::tidy)) %>%
unnest(Tukey_summary) %>%
select(Class, term, contrast, estimate, adj.p.value)
tukey_results <- ImageryAreas_long %>%
group_by(Class) %>%
mutate(Year = as.factor(Year)) %>%
summarise(Tukey = list(TukeyHSD(aov(Area ~ Year, data = cur_data()))))
tukey_results %>%
mutate(Tukey_summary = map(Tukey, broom::tidy)) %>%
unnest(Tukey_summary) %>%
select(Class, term, contrast, estimate, adj.p.value)
View(anova_results)
tukey_results <- ImageryAreas_long %>%
mutate(Year = as.factor(Year)) %>%  # Ensure Year is categorical
group_by(Class.Sheep) %>%
summarise(Tukey = list(TukeyHSD(aov(Area ~ Year, data = cur_data()))))
tukey_results <- ImageryAreas_long %>%
mutate(Year = as.factor(Year)) %>%  # Ensure Year is categorical
group_by(Class) %>%
summarise(Tukey = list(TukeyHSD(aov(Area ~ Year, data = cur_data()))))
# Extract Tukey results into a readable format
tukey_results_clean <- tukey_results %>%
mutate(Tukey_summary = map(Tukey, function(x) {
tidy(x)  # Convert Tukey test results to a tibble
})) %>%
unnest(Tukey_summary) %>%
select(Class, term, contrast, estimate, adj.p.value)  # Ensure correct column names
ImageryAreas_long %>% group_by(Class, Year) %>% summarise(n = n(), .groups = "drop")
chi_data <- ImageryAreas_long %>%
filter(Year %in% c(2010, 2023)) %>%
group_by(Class, Year) %>%
summarise(Total_Area = sum(Area)) %>%
pivot_wider(names_from = Year, values_from = Total_Area) %>%
column_to_rownames("Class")
chisq.test(as.matrix(chi_data))
pairwise.prop.test(as.matrix(chi_data), p.adjust.method = "bonferroni")
chi_data %>%
pivot_longer(cols = c("2010", "2023"), names_to = "Year", values_to = "Total_Area") %>%
ggplot(aes(x = Year, y = Total_Area, fill = rownames(chi_data))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Land Cover Change from 2010 to 2023", y = "Total Area (mÂ²)", x = "Year") +
theme_minimal()
years <- unique(ImageryAreas_long$Year)
years <- sort(as.numeric(years))  # Ensure years are sorted numerically
# Initialize a dataframe to store results
chi_results <- data.frame(Class = character(),
Year1 = integer(),
Year2 = integer(),
Chi_sq = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each class and compare each pair of years
for (class_name in unique(ImageryAreas_long$Class)) {
for (i in 1:(length(years) - 1)) {
for (j in (i + 1):length(years)) {
year1 <- years[i]
year2 <- years[j]
# Filter data for the specific class and years
chi_data <- ImageryAreas_long %>%
filter(Class == class_name & Year %in% c(year1, year2)) %>%
group_by(Class, Year) %>%
summarise(Total_Area = sum(Area), .groups = "drop") %>%
pivot_wider(names_from = Year, values_from = Total_Area) %>%
column_to_rownames("Class")
# Check if data is sufficient for a test
if (nrow(chi_data) > 0 && all(!is.na(chi_data))) {
chi_test <- chisq.test(as.matrix(chi_data))
# Store the results
chi_results <- rbind(chi_results, data.frame(
Class = class_name,
Year1 = year1,
Year2 = year2,
Chi_sq = chi_test$statistic,
p_value = chi_test$p.value
))
}
}
}
}
# View the results
print(chi_results)
# View the results
print(chi_results)
View(chi_results)
# Get unique years
years <- unique(ImageryAreas_long$Year)
years <- sort(as.numeric(years))  # Ensure years are sorted numerically
# Initialize a dataframe to store results
chi_results <- data.frame(Class = character(),
Year1 = integer(),
Year2 = integer(),
Chi_sq = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each class
for (class_name in unique(ImageryAreas_long$Class)) {
# Loop through pairs of years (e.g., 2010 vs 2013, 2010 vs 2015, etc.)
for (i in 1:(length(years) - 1)) {
for (j in (i + 1):length(years)) {
year1 <- years[i]
year2 <- years[j]
# Filter data for the specific class and years
chi_data <- ImageryAreas_long %>%
filter(Class == class_name & Year %in% c(year1, year2)) %>%
group_by(Class, Year) %>%
summarise(Total_Area = sum(Area), .groups = "drop") %>%
pivot_wider(names_from = Year, values_from = Total_Area) %>%
column_to_rownames("Class")
# Ensure data exists for the two years being compared
if (nrow(chi_data) > 0 && all(!is.na(chi_data))) {
# Perform chi-squared test
chi_test <- chisq.test(as.matrix(chi_data))
# Store the results
chi_results <- rbind(chi_results, data.frame(
Class = class_name,
Year1 = year1,
Year2 = year2,
Chi_sq = chi_test$statistic,
p_value = chi_test$p.value
))
}
}
}
}
# View the results
print(chi_results)
View(chi_results)
chi_results_sorted <- chi_results %>%
arrange(p_value)
# If you want to sort by the adjusted p-values (e.g., after applying Bonferroni correction)
chi_results_sorted_adj <- chi_results %>%
mutate(adj_p_value = p.adjust(p_value, method = "bonferroni")) %>%
arrange(adj_p_value)
# Print the sorted results
print(chi_results_sorted)
print(chi_results_sorted_adj)
View(chi_results_sorted_adj)
ImageryAreas_long_Sheep <- ImageryAreas_long %>%
filter(grepl("\\.0$", Year))
View(ImageryAreas_long_Sheep)
str(ImageryAreas_long_Sheep)
ImageryAreas_long_Sheep <- ImageryAreas_long %>%
filter(grepl("\\.0$", as.character(Year)))
str(ImageryAreas_long_Sheep)
str(ImageryAreas_long)
str(ImageryAreas_long)
View(ImageryAreas_long_Sheep)
ImageryAreas_long_Sheep <- ImageryAreas_long %>%
filter(grepl("\\.0$", as.character(Year)))
str(ImageryAreas_long_Sheep)
# Get unique years
years <- unique(ImageryAreas_long$Year)
# Inspect the unique values of the 'Year' column
unique(ImageryAreas_long$Year)
# Filter for years that end with .0
ImageryAreas_long_Sheep <- ImageryAreas_long %>%
filter(grepl("\\.0$", as.character(Year)))
# Check the filtered data
str(ImageryAreas_long_Sheep)
unique(as.character(ImageryAreas_long$Year))
# Filter for years that end with .0
ImageryAreas_long_Sheep <- ImageryAreas_long %>%
filter(grepl("\\.0$", as.character(Year)))
# Check the filtered data
str(ImageryAreas_long_Sheep)
ImageryAreas_long_Sheep <- ImageryAreas_long %>%
filter(Year %% 1 == 0)  # This keeps only the whole years (without decimals)
# Check the filtered data
str(ImageryAreas_long_Sheep)
years <- unique(ImageryAreas_long$Year)
years <- sort(as.numeric(years))  # Ensure years are sorted numerically
# Initialize a dataframe to store results
chi_results <- data.frame(Class = character(),
Year1 = integer(),
Year2 = integer(),
Chi_sq = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each class
for (class_name in unique(ImageryAreas_long_Sheep$Class)) {
# Loop through pairs of years (e.g., 2010 vs 2013, 2010 vs 2015, etc.)
for (i in 1:(length(years) - 1)) {
for (j in (i + 1):length(years)) {
year1 <- years[i]
year2 <- years[j]
# Filter data for the specific class and years
chi_data <- ImageryAreas_long %>%
filter(Class == class_name & Year %in% c(year1, year2)) %>%
group_by(Class, Year) %>%
summarise(Total_Area = sum(Area), .groups = "drop") %>%
pivot_wider(names_from = Year, values_from = Total_Area) %>%
column_to_rownames("Class")
# Ensure data exists for the two years being compared
if (nrow(chi_data) > 0 && all(!is.na(chi_data))) {
# Perform chi-squared test
chi_test <- chisq.test(as.matrix(chi_data))
# Store the results
chi_results <- rbind(chi_results, data.frame(
Class = class_name,
Year1 = year1,
Year2 = year2,
Chi_sq = chi_test$statistic,
p_value = chi_test$p.value
))
}
}
}
}
# View the results
print(chi_results)
# Sorting by p_value in ascending order to show the smallest (most significant) p-values first
chi_results_sorted <- chi_results %>%
arrange(p_value)
# If you want to sort by the adjusted p-values (e.g., after applying Bonferroni correction)
chi_results_sorted_adj <- chi_results %>%
mutate(adj_p_value = p.adjust(p_value, method = "bonferroni")) %>%
arrange(adj_p_value)
# Print the sorted results
print(chi_results_sorted)
print(chi_results_sorted_adj)
View(chi_results_sorted_adj)
years <- unique(ImageryAreas_long_Sheep$Year)
years <- sort(as.numeric(years))  # Ensure years are sorted numerically
# Initialize a dataframe to store results
chi_results <- data.frame(Class = character(),
Year1 = integer(),
Year2 = integer(),
Chi_sq = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each class
for (class_name in unique(ImageryAreas_long_Sheep$Class)) {
# Loop through pairs of years (e.g., 2010 vs 2013, 2010 vs 2015, etc.)
for (i in 1:(length(years) - 1)) {
for (j in (i + 1):length(years)) {
year1 <- years[i]
year2 <- years[j]
# Filter data for the specific class and years
chi_data <- ImageryAreas_long %>%
filter(Class == class_name & Year %in% c(year1, year2)) %>%
group_by(Class, Year) %>%
summarise(Total_Area = sum(Area), .groups = "drop") %>%
pivot_wider(names_from = Year, values_from = Total_Area) %>%
column_to_rownames("Class")
# Ensure data exists for the two years being compared
if (nrow(chi_data) > 0 && all(!is.na(chi_data))) {
# Perform chi-squared test
chi_test <- chisq.test(as.matrix(chi_data))
# Store the results
chi_results <- rbind(chi_results, data.frame(
Class = class_name,
Year1 = year1,
Year2 = year2,
Chi_sq = chi_test$statistic,
p_value = chi_test$p.value
))
}
}
}
}
# View the results
print(chi_results)
# Sorting by p_value in ascending order to show the smallest (most significant) p-values first
chi_results_sorted <- chi_results %>%
arrange(p_value)
# If you want to sort by the adjusted p-values (e.g., after applying Bonferroni correction)
chi_results_sorted_adj <- chi_results %>%
mutate(adj_p_value = p.adjust(p_value, method = "bonferroni")) %>%
arrange(adj_p_value)
# Print the sorted results
print(chi_results_sorted)
print(chi_results_sorted_adj)
View(chi_results_sorted_adj)
chi_results_sorted_adj %>%
filter(Class == "Forest")
View(chi_results_sorted_adj)
ImageryAreas_long_Childs <- ImageryAreas_long %>%
filter(grepl("\\.1$", as.character(Year)))
View(ImageryAreas_long_Childs)
ImageryAreas_long_BRAP <- ImageryAreas_long %>%
filter(grepl("\\.2$", as.character(Year)))
View(ImageryAreas_long_BRAP)
ImageryAreas <- read.csv("ImageryStatistics150mforR.csv")
ImageryAreas_long <- ImageryAreas %>%
pivot_longer(
cols = starts_with("X"),  # Select columns with year names (e.g., X2023, X2021)
names_to = "Year",
values_to = "Area"
) %>%
mutate(Year = as.numeric(str_remove(Year, "X")))  # Convert "X2023" -> 2023 (numeric)
ImageryAreas_long_Sheep <- ImageryAreas_long %>%
filter(Year %% 1 == 0)  # This keeps only the whole years (without decimals)
ImageryAreas_long_Childs <- ImageryAreas_long %>%
filter(grepl("\\.1$", as.character(Year)))  # This keeps only the whole years (without decimals)
ImageryAreas_long_BRAP <- ImageryAreas_long %>%
filter(grepl("\\.2$", as.character(Year)))
years <- unique(ImageryAreas_long_Sheep$Year)
years <- sort(as.numeric(years))  # Ensure years are sorted numerically
# Initialize a dataframe to store results
chi_results <- data.frame(Class = character(),
Year1 = integer(),
Year2 = integer(),
Chi_sq = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each class
for (class_name in unique(ImageryAreas_long_Sheep$Class)) {
# Loop through pairs of years (e.g., 2010 vs 2013, 2010 vs 2015, etc.)
for (i in 1:(length(years) - 1)) {
for (j in (i + 1):length(years)) {
year1 <- years[i]
year2 <- years[j]
# Filter data for the specific class and years
chi_data <- ImageryAreas_long %>%
filter(Class == class_name & Year %in% c(year1, year2)) %>%
group_by(Class, Year) %>%
summarise(Total_Area = sum(Area), .groups = "drop") %>%
pivot_wider(names_from = Year, values_from = Total_Area) %>%
column_to_rownames("Class")
# Ensure data exists for the two years being compared
if (nrow(chi_data) > 0 && all(!is.na(chi_data))) {
# Perform chi-squared test
chi_test <- chisq.test(as.matrix(chi_data))
# Store the results
chi_results <- rbind(chi_results, data.frame(
Class = class_name,
Year1 = year1,
Year2 = year2,
Chi_sq = chi_test$statistic,
p_value = chi_test$p.value
))
}
}
}
}
# View the results
print(chi_results)
# Sorting by p_value in ascending order to show the smallest (most significant) p-values first
chi_results_sorted <- chi_results %>%
arrange(p_value)
# If you want to sort by the adjusted p-values (e.g., after applying Bonferroni correction)
chi_results_sorted_adj <- chi_results %>%
mutate(adj_p_value = p.adjust(p_value, method = "bonferroni")) %>%
arrange(adj_p_value)
# Print the sorted results
print(chi_results_sorted_adj)
chi_results_sorted_adj %>%
filter(Class == "Forest")
View(chi_results_sorted_adj)
significant_changes_count <- chi_results_sorted_adj %>%
filter(adj_p_value < 0.05) %>%  # Only consider significant changes
group_by(Class) %>%             # Group by Class
summarise(Significant_Changes = n())  # Count the number of significant changes
# View the result
print(significant_changes_count)
specific_years_comparison <- chi_results_sorted_adj %>%
filter((Year1 == "2010" & Year2 == "2023") | (Year1 == "2023" & Year2 == "2010"))
# View the filtered results
print(specific_years_comparison)
specific_years_comparison <- chi_results_sorted_adj %>%
filter((Year1 == "2021" & Year2 == "2023") | (Year1 == "2023" & Year2 == "2010"))
# View the filtered results
print(specific_years_comparison)
specific_years_comparison <- chi_results_sorted_adj %>%
filter((Year1 == "2021" & Year2 == "2023") | (Year1 == "2023" & Year2 == "2021"))
# View the filtered results
print(specific_years_comparison)
# View the result
print(significant_changes_count)
years <- unique(ImageryAreas_long_Childs$Year)
years <- sort(as.numeric(years))  # Ensure years are sorted numerically
# Initialize a dataframe to store results
chi_results <- data.frame(Class = character(),
Year1 = integer(),
Year2 = integer(),
Chi_sq = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each class
for (class_name in unique(ImageryAreas_long_Childs$Class)) {
# Loop through pairs of years (e.g., 2010 vs 2013, 2010 vs 2015, etc.)
for (i in 1:(length(years) - 1)) {
for (j in (i + 1):length(years)) {
year1 <- years[i]
year2 <- years[j]
# Filter data for the specific class and years
chi_data <- ImageryAreas_long %>%
filter(Class == class_name & Year %in% c(year1, year2)) %>%
group_by(Class, Year) %>%
summarise(Total_Area = sum(Area), .groups = "drop") %>%
pivot_wider(names_from = Year, values_from = Total_Area) %>%
column_to_rownames("Class")
# Ensure data exists for the two years being compared
if (nrow(chi_data) > 0 && all(!is.na(chi_data))) {
# Perform chi-squared test
chi_test <- chisq.test(as.matrix(chi_data))
# Store the results
chi_results <- rbind(chi_results, data.frame(
Class = class_name,
Year1 = year1,
Year2 = year2,
Chi_sq = chi_test$statistic,
p_value = chi_test$p.value
))
}
}
}
}
# View the results
print(chi_results)
# Sorting by p_value in ascending order to show the smallest (most significant) p-values first
chi_results_sorted <- chi_results %>%
arrange(p_value)
chi_results_sorted_adj <- chi_results %>%
mutate(adj_p_value = p.adjust(p_value, method = "bonferroni")) %>%
arrange(adj_p_value)
# Print the sorted results
print(chi_results_sorted_adj)
chi_results_sorted_adj %>%
filter(Class == "Forest")
# Count the number of significant changes (where adj_p_value < 0.05) for each class
significant_changes_count <- chi_results_sorted_adj %>%
filter(adj_p_value < 0.05) %>%  # Only consider significant changes
group_by(Class) %>%             # Group by Class
summarise(Significant_Changes = n())  # Count the number of significant changes
# View the result
print(significant_changes_count)
years <- unique(ImageryAreas_long_BRAP$Year)
years <- sort(as.numeric(years))  # Ensure years are sorted numerically
# Initialize a dataframe to store results
chi_results <- data.frame(Class = character(),
Year1 = integer(),
Year2 = integer(),
Chi_sq = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each class
for (class_name in unique(ImageryAreas_long_BRAP$Class)) {
# Loop through pairs of years (e.g., 2010 vs 2013, 2010 vs 2015, etc.)
for (i in 1:(length(years) - 1)) {
for (j in (i + 1):length(years)) {
year1 <- years[i]
year2 <- years[j]
# Filter data for the specific class and years
chi_data <- ImageryAreas_long %>%
filter(Class == class_name & Year %in% c(year1, year2)) %>%
group_by(Class, Year) %>%
summarise(Total_Area = sum(Area), .groups = "drop") %>%
pivot_wider(names_from = Year, values_from = Total_Area) %>%
column_to_rownames("Class")
# Ensure data exists for the two years being compared
if (nrow(chi_data) > 0 && all(!is.na(chi_data))) {
# Perform chi-squared test
chi_test <- chisq.test(as.matrix(chi_data))
# Store the results
chi_results <- rbind(chi_results, data.frame(
Class = class_name,
Year1 = year1,
Year2 = year2,
Chi_sq = chi_test$statistic,
p_value = chi_test$p.value
))
}
}
}
}
# View the results
print(chi_results)
# Sorting by p_value in ascending order to show the smallest (most significant) p-values first
chi_results_sorted <- chi_results %>%
arrange(p_value)
# If you want to sort by the adjusted p-values (e.g., after applying Bonferroni correction)
chi_results_sorted_adj <- chi_results %>%
mutate(adj_p_value = p.adjust(p_value, method = "bonferroni")) %>%
arrange(adj_p_value)
# Print the sorted results
print(chi_results_sorted_adj)
chi_results_sorted_adj %>%
filter(Class == "Forest")
# Count the number of significant changes (where adj_p_value < 0.05) for each class
significant_changes_count <- chi_results_sorted_adj %>%
filter(adj_p_value < 0.05) %>%  # Only consider significant changes
group_by(Class) %>%             # Group by Class
summarise(Significant_Changes = n())  # Count the number of significant changes
# View the result
print(significant_changes_count)
