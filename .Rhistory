library(dplyr)
library(tidyr)
library(stringr)
# Separate numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(where(is.numeric))  # Select numeric columns (Diameter, Height, HDR)
non_numeric_columns <- brap_data %>%
select(where(is.character))  # Select non-numeric columns (Plot)
# Pivot longer for numeric columns (Diameter, Height, HDR, etc.)
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure numeric values
)
# Pivot longer for non-numeric columns (Plot)
long_non_numeric <- non_numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = 1  # Set the value to 1 for non-numeric data (Plot)
)
# Combine both datasets (numeric and non-numeric)
long_data <- bind_rows(long_numeric, long_non_numeric)
# Calculate the mean diameter for a specific plot and year
plot_id <- "Plot2"  # Specify the plot you're interested in
year_id <- 2023     # Specify the year you're interested in
mean_diameter <- long_data %>%
filter(Plot == plot_id, Variable == "Diameter", Year == year_id) %>%
summarise(mean_diameter = mean(Value, na.rm = TRUE))
View(long_data)
library(dplyr)
library(tidyr)
library(stringr)
# Reshape the data into long format with the desired 4 columns: Date, Variable, Value, Plot
long_data <- brap_data %>%
pivot_longer(
cols = starts_with("Plot") | starts_with("Diameter") | starts_with("Height") | starts_with("HDR"),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure Value is numeric
) %>%
select(Plot, Date, Variable, Value)  # Arrange in the desired order
library(dplyr)
library(tidyr)
library(stringr)
# Separate numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))
# Pivot longer the numeric columns
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure Value is numeric
)
library(dplyr)
library(tidyr)
library(stringr)
# Separate numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))
# Pivot longer the numeric columns
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure Value is numeric
)
library(dplyr)
library(tidyr)
library(stringr)
# Separate numeric and non-numeric columns explicitly
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR")) %>%
mutate(across(everything(), as.character))  # Ensure all values are characters to avoid type mismatch
non_numeric_columns <- brap_data %>%
select(starts_with("Plot")) %>%
mutate(across(everything(), as.character))  # Ensure all values are characters
# Pivot longer the numeric columns
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure Value is numeric
)
# Pivot longer the non-numeric columns (Plot)
long_non_numeric <- non_numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info
Year = as.numeric(str_extract(Date, "\\d{4}"))  # Extract Year from Date
)
# Combine the numeric and non-numeric results
long_data <- bind_rows(long_numeric, long_non_numeric) %>%
select(Plot, Date, Variable, Value)  # Arrange in the desired order
View(long_non_numeric)
library(dplyr)
library(tidyr)
library(stringr)
# Ensure all columns in numeric_columns are characters
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR")) %>%
mutate(across(everything(), as.character))  # Convert to character to prevent type conflicts
# Ensure all columns in non_numeric_columns are characters
non_numeric_columns <- brap_data %>%
select(starts_with("Plot")) %>%
mutate(across(everything(), as.character))  # Convert to character to prevent type conflicts
# Pivot longer the numeric columns
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure Value is numeric
)
# Pivot longer the non-numeric columns (Plot)
long_non_numeric <- non_numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info
Year = as.numeric(str_extract(Date, "\\d{4}"))  # Extract Year from Date
) %>%
# Convert Value to numeric, set NAs for non-numeric entries
mutate(Value = as.numeric(Value))
# Combine the numeric and non-numeric results
long_data <- bind_rows(long_numeric, long_non_numeric) %>%
select(Plot, Date, Variable, Value)  # Arrange in the desired order
# View the reshaped data
head(long_data)
View(long_data)
library(dplyr)
library(tidyr)
library(stringr)
# Ensure all columns in numeric_columns are characters
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR")) %>%
mutate(across(everything(), as.character))  # Convert to character to prevent type conflicts
# Ensure all columns in non_numeric_columns are characters
non_numeric_columns <- brap_data %>%
select(starts_with("Plot")) %>%
mutate(across(everything(), as.character))  # Convert to character to prevent type conflicts
# Pivot longer the numeric columns
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info (e.g., Plot1, Plot102023)
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure Value is numeric
)
# Pivot longer the non-numeric columns (Plot)
long_non_numeric <- non_numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot info (e.g., Plot1, Plot102023)
Year = as.numeric(str_extract(Date, "\\d{4}"))  # Extract Year from Date
) %>%
# Convert Value to numeric, set NAs for non-numeric entries
mutate(Value = as.numeric(Value))
# Combine the numeric and non-numeric results
long_data <- bind_rows(long_numeric, long_non_numeric) %>%
select(Plot, Date, Variable, Value)  # Arrange in the desired order
# View the reshaped data
head(long_data)
View(long_data)
library(dplyr)
library(tidyr)
library(stringr)
# Ensure all columns in numeric_columns are characters
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR")) %>%
mutate(across(everything(), as.character))  # Convert to character to prevent type conflicts
# Ensure all columns in non_numeric_columns are characters
non_numeric_columns <- brap_data %>%
select(starts_with("Plot")) %>%
mutate(across(everything(), as.character))  # Convert to character to prevent type conflicts
# Reshape the numeric columns to long format
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
# Extract Plot and Year correctly
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Ensure it matches 'Plot' followed by digits
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure Value is numeric
)
# Reshape the non-numeric columns (Plot) to long format
long_non_numeric <- non_numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
# Extract Plot and Year correctly
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Ensure it matches 'Plot' followed by digits
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year from Date
Value = as.numeric(Value)  # Ensure Value is numeric, set NAs for non-numeric values
)
# Combine the numeric and non-numeric results
long_data <- bind_rows(long_numeric, long_non_numeric) %>%
select(Plot, Date, Variable, Value)  # Arrange in the desired order
# View the reshaped data
head(long_data)
View(long_data)
View(long_data)
View(long_non_numeric)
library(dplyr)
library(tidyr)
library(stringr)
# Check the column names and see how they look
colnames(brap_data)
# Separate numeric columns and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))
# Pivot longer the numeric columns
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
# Manually extract the plot and year (handle non-standard cases)
mutate(
Plot = str_extract(Variable, "Plot\\d{2,}"),  # Extract Plot info
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year
Value = as.numeric(Value)  # Convert value to numeric
)
brap_data <- read_csv("BRAPALL.csv")
View(brap_data)
# Reshape to long format
long_data <- brap_data %>%
pivot_longer(cols = starts_with("Diameter") | starts_with("Height") | starts_with("HDR") | starts_with("Plot"),
names_to = c("Variable", "Date", "plot"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value")
library(dplyr)
library(tidyr)
library(stringr)
# Step 1: Separate numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))
# Step 2: Pivot longer the numeric columns (Diameter, Height, HDR)
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"
) %>%
mutate(
Plot = NA,  # Placeholder for Plot information
Year = as.numeric(str_extract(Date, "\\d{4}")),  # Extract Year
Value = as.numeric(Value)  # Ensure Value is numeric
)
# Reshape to long format
long_data <- brap_data %>%
pivot_longer(cols = starts_with("Diameter") | starts_with("Height") | starts_with("HDR") | starts_with("Plot"),
names_to = c("Variable", "Date", "plot"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value")
View(brap_data)
brap_data <- read_csv("BRAPALL.csv")
View(brap_data)
# Reshape to long format
long_data <- brap_data %>%
pivot_longer(cols = starts_with("Diameter") | starts_with("Height") | starts_with("HDR") | starts_with("Plot"),
names_to = c("Variable", "Date", "plot"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value")
# Reshape the data into long format
long_data <- brap_data %>%
pivot_longer(
cols = starts_with("Diameter") | starts_with("Height") | starts_with("HDR"),  # Columns to reshape
names_to = c("Variable", "Date"),  # Separate column names into Variable (Diameter, Height, HDR) and Date
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Regex to separate letters (variable names) and numbers (dates)
values_to = "Value"  # Name for the value column
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot from the Variable column
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
) %>%
select(Plot, Date, Variable, Value)  # Select the necessary columns in the desired order
# Separate numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))  # Select numeric measurement columns
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))  # Select non-numeric (Plot) columns
# Pivot longer the numeric columns
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letters (variable names) and numbers (dates)
values_to = "Value"
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot from the Variable column
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
)
# Separate numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))  # Select numeric measurement columns
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))  # Select non-numeric (Plot) columns
# Pivot longer the numeric columns (Diameter, Height, HDR)
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letters (variable names) and numbers (dates)
values_to = "Value"
) %>%
mutate(
Plot = NA,  # Add an empty Plot column (since Plot info will be in the non-numeric columns)
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
)
# Separate the 'Variable' column into 'Plot' and 'Year', then reshape manually
long_data <- brap_data %>%
pivot_longer(cols = starts_with("Diameter") | starts_with("Height"),
names_to = "Variable", values_to = "Value") %>%
separate(Variable, into = c("Variable", "Year"), sep = "(?<=\\D)(?=\\d)") %>%
mutate(Year = as.numeric(Year))
View(long_data)
# Load necessary libraries
library(tidyr)
library(dplyr)
library(stringr)
# Reshape the data into long format
long_data <- brap_data %>%
pivot_longer(
cols = starts_with("Diameter") | starts_with("Height") | starts_with("HDR") | starts_with("Plot"),
names_to = c("Variable", "Date"),  # Separate the names into 'Variable' and 'Date'
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
values_to = "Value"  # Name for the value column
) %>%
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract 'Plot' from the variable name
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Convert Value to numeric
) %>%
select(Plot, Date, Variable, Value)  # Arrange in the desired order
# Separate numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))  # Select numeric measurement columns
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))  # Select non-numeric (Plot) columns
# Pivot longer the numeric columns
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letters (variable names) and numbers (dates)
values_to = "Value"
) %>%
mutate(
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
)
library(dplyr)
library(tidyr)
library(stringr)
# Pivot longer and handle numeric and non-numeric separately
long_data <- brap_data %>%
pivot_longer(
cols = starts_with("Plot") | starts_with("Diameter") | starts_with("Height") | starts_with("HDR"),
names_to = c("Variable", "Date"),
names_sep = "(?<=\\D)(?=\\d)",  # Separate the alphabetic part (Variable) from the numeric part (Date)
values_to = "Value"
) %>%
mutate(
# Extract plot and date information
Plot = str_extract(Variable, "Plot\\d+"),  # Extract plot number
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.character(Value)  # Temporarily set Value as character to handle both numeric and non-numeric
) %>%
# Convert Value to numeric where possible
mutate(Value = ifelse(Variable %in% c("Diameter", "Height", "HDR"), as.numeric(Value), Value)) %>%
select(Plot, Date, Variable, Value)  # Final column order
library(dplyr)
library(tidyr)
library(stringr)
# Reshape the data into long format
long_data <- brap_data %>%
pivot_longer(
cols = starts_with("Plot") | starts_with("Diameter") | starts_with("Height") | starts_with("HDR"),
names_to = c("Variable", "Date"),
names_sep = "(?<=\\D)(?=\\d)",  # Separate letters (Variable) from digits (Date)
values_to = "Value"
) %>%
# Extract Plot and Date information
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot number (e.g., Plot1, Plot2, ...)
Plot = str_replace(Plot, "Plot", ""),  # Remove the "Plot" part to just keep the number
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
) %>%
# Select the desired columns in the desired order
select(Plot, Date, Variable, Value)
library(dplyr)
library(tidyr)
library(stringr)
# Separate the numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))
# Pivot longer the numeric columns (Diameter, Height, HDR)
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=\\D)(?=\\d)",  # Separate the variable name from the date (digits)
values_to = "Value"
) %>%
mutate(
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
)
library(dplyr)
library(tidyr)
library(stringr)
# Separate the numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))
# Pivot longer the numeric columns (Diameter, Height, HDR)
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=\\D)(?=\\d)",  # Separate the variable name from the date (digits)
values_to = "Value"
) %>%
mutate(
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
)
