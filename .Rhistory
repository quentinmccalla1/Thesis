group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),     # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),
mean_hdr = mean(HDR, na.rm = TRUE), # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarisation
) %>%
arrange(Visit)  # Sort by Visit (now a Date)
kable(mean_value,
caption = "BRAP Means")%>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
mean_value <- brap_data %>%
mutate(Visit = as.Date(as.character(Visit), format = "%Y%m%d")) %>%  # Convert Visit to Date
filter(!is.na(Visit)) %>%  # Remove rows where Visit is NA
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),
mean_Diameter = mean(Diameter, na.rm = TRUE),
mean_hdr = mean(HDR, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(Visit)
kable(mean_value,
caption = "BRAP Means") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
mean_value_by_visit <- brap_data %>%
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Sort by Visit (ascending)
# Display the table
kable(mean_value_by_visit, caption = "BRAP Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
custom_order <- c("102023", "62024", "102024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- brap_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "BRAP Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
custom_order <- c("102023", "62024", "102024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
# View the first few rows and column names
head(ImageryAreas)
colnames(ImageryAreas)
# Check the structure of the dataset
str(ImageryAreas)
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
# View the first few rows and column names
head(ImageryAreas)
colnames(ImageryAreas)
# Check the structure of the dataset
str(ImageryAreas)
View(ImageryAreas)
# Subset data for one site and class
subset_data <- subset(ImageryAreas, Site == "Sheep" & Class == "Water")
View(subset_data)
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = subset_data)
# Load data
data <- read.csv("ImageryStatistics150m.csv")
# Create a contingency table
contingency_table <- table(data$Year, data$Class)
# Perform Chi-Squared Test
result <- chisq.test(contingency_table)
# View the result
print(result)
# Perform Chi-Squared Test
result <- chisq.test(data)
# View the result
print(result)
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = ImageryAreas)
# Subset data for one site and class
subset_data <- subset(ImageryAreas, Site == "Sheep" & Class == "forest")
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = subset_data)
View(ImageryAreas)
# Subset data for one site and class
subset_data <- subset(ImageryAreas, Site == "Sheep" & Class == "Forest")
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = subset_data)
subset_data <- subset(ImageryAreas, Site == "Sheep" & Class == "Barren")
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = subset_data)
# Perform Chi-Squared Test
result <- chisq.test(data)
# Perform Chi-Squared Test
result <- chisq.test(ImageryAreas)
# Perform Chi-Squared Test
result <- aov(data)
# Load data
data <- read.csv("ImageryStatistics150m.csv")
# Create a contingency table
contingency_table <- table(data$Year, data$Class)
# Perform Chi-Squared Test
result <- chisq.test(contingency_table)
# View the result
print(result)
# View the result
print(contingency_table)
View(data)
# Create a contingency table
contingency_table <- table(data$Year, data$Class)
head(data)
summary(data)
forest_data <- subset(data, Class == "Forest")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
summary(anova_result)
TukeyHSD(anova_result)
TukeyHSD(anova_result)
forest_data <- subset(data, Class == "Forest")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest")
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
levels(forest_data$Year)
View(forest_data)
forest_data <- subset(data, Class == "Forest", Site = "Sheep")
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
TukeyHSD(anova_result)
summary(anova_result)
forest_data$Year <- as.factor(forest_data$Year)
TukeyHSD(anova_result)
levels(forest_data$Year)
levels(forest_data$Year)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
levels(forest_data$Year)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
forest_data$Year <- as.factor(forest_data$Year)
levels(forest_data$Year)
forest_data$Year <- as.factor(forest_data$Year)
levels(forest_data$Year)
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
boxplot(Area ~ Year, data = forest_data)
plot(anova_result)  # To check residuals and diagnostic plots
# Bonferroni
pairwise.t.test(forest_data$Area, forest_data$Year, p.adjust.method = "bonferroni")
forest_data$Year <- as.factor(forest_data$Year)
levels(forest_data$Year)
forest_data <- subset(data, Class == "Barren"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
summary(anova_result)
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
tukey <- TukeyHSD(anova_result)
forest_data$Year <- as.factor(forest_data$Year)
levels(forest_data$Year)
forest_data <- subset(data, Class == "Barren"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dataRetrieval")
library(dataRetrieval)
library(ggplot2)
library(dplyr)
library(lubridate)
CampVerdeGuage <- readNWISdv(    #Daily
"09506000",                  #Below camp verde guage
"00060",                      #Discharge
startDate = "1989-01-01",      #From first complete year
endDate = "",                 #Till now
statCd = "00003"
)
CampVerdeGuage <- CampVerdeGuage %>%     #Rename column to discharge
rename(Discharge = X_00060_00003)
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge), log("y")) +
geom_line()
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge), log("y")) +
geom_line()
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge), log("y")) +
geom_line()
write.csv(CampVerdeGuage, "VerdeGuage.csv", row.names = FALSE)
write(Well9JFebtoAug, "Well9.csv", row.names= FALSE)
write(Well9JFebtoAug, "Well9.csv"
write(Well9JFebtoAug, "Well9.csv")
write.csv(Well9JFebtoAug, "Well9.csv")
Well9JFebtoAug <- read_csv("BRAPWell9_022924to1211.csv")
library(tidyverse)
library(ggplot2)
Well9JFebtoAug <- read_csv("BRAPWell9_022924to1211.csv")
Well4FebtoAug <- read_csv("BRAPWell4_02292024to08072024.csv")
# Convert Date if necessary
Well9JFebtoAug$Date <- as.POSIXct(Well9JFebtoAug$Date, format = "%m/%d/%Y %H:%M")  # Adjust format
# Ensure M column is numeric
Well9JFebtoAug$M <- as.numeric(Well9JFebtoAug$M)
# Re-run the plot code
ggplot(Well9JFebtoAug, aes(x = Date, y = M)) +
geom_line(color = "black", size = 0.5) +  # Reduce line size
labs(title = "Beasley Flat Well 9",
x = "Date",
y = "Meters above ground surface") +
theme_minimal() +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
scale_x_datetime(date_labels = "%Y-%m-%d", date_breaks = "2 month") +
scale_y_continuous(limits = c(min(Well9JFebtoAug$M, na.rm = TRUE), max(Well9JFebtoAug$M, na.rm = TRUE))) +
theme(axis.text.y = element_text(size = 8))  # Adjust y-axis text size
write.csv(Well9JFebtoAug, "Well9.csv")
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplR")
install.packages("treeclim")
library(dplR)
library(tidyverse)
library(kableExtra)
install.packages("treeclim")
install.packages("lmodel2")
install.packages("np")
install.packages("RcppArmadillo")
install.packages("np")
View(UB_bai_crn)
View(UB_bai_crn)
# Install the package from a local file
install.packages("C:/Users/qm43/Documents/GitHub/Thesis1/treeclim_2.0.6.0.tar.gz", repos = NULL, type = "source")
# Load the library
library(treeclim)
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets for clarity
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
# Convert BAI data to a format suitable for `chron` function
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
# Access individual chronologies for both BAI and ring-width data
Childs_bai_crn <- bai_chron_list[["Childs"]]
Sheep_bai_crn <- bai_chron_list[["Sheep"]]
UB_bai_crn <- bai_chron_list[["UB"]]
LB_bai_crn <- bai_chron_list[["LB"]]
All_bai_crn <- bai_chron_list[["ALL"]]
AllCor_bai_crn <- bai_chron_list[["ALLCor"]]
Cross_bai_crn <- bai_chron_list[["Crossdated"]]
Childscrn <- rwl_chron_list[["Childs"]]
Sheepcrn <- rwl_chron_list[["Sheep"]]
UBcrn <- rwl_chron_list[["UB"]]
LBcrn <- rwl_chron_list[["LB"]]
Allcrn <- rwl_chron_list[["ALL"]]
AllCorcrn <- rwl_chron_list[["ALLCor"]]
Crosscrn <- rwl_chron_list[["Crossdated"]]
View(Sheep_bai_crn)
Sheep_bai_crn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childs_bai_crn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UB_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LB_bai_crn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
All_bai_crn$Year <- seq(1988, by = 1 , length.out = nrow(Allcrn))
Cross_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(Crosscrn))
ggplot(Cross_bai_crn, aes(x = Year, y = std)) +
geom_line(size = 0.5)   # Default line size for dataset lines
# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)
View(Childs_bai_crn)
Cross_bai_crn <- bai_chron_list[["Crossdated"]]
View(Cross_bai_crn)
bai.in(AllCorcrn)
AllcorBAI <-vbai.in(AllCorcrn)
AllcorBAI <-bai.in(AllCorcrn)
View(AllcorBAI)
plot(AllcorBAI)
bai_chron_list <- lapply(bai_list, function(bai) {
# Convert BAI data to a format suitable for `chron` function
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
View(AllCorcrn)
View(Allcrn)
View(AllCor_bai_crn)
# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)
View(bai_list)
View(bai_chron_list)
bai_chron_list[["Sheep"]][["std"]]
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)
ggplot(Cross_bai_crn, aes(x = Year, y = std)) +
geom_line(size = 0.5)   # Default line size for dataset lines
Sheep_bai_crn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childs_bai_crn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UB_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LB_bai_crn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
All_bai_crn$Year <- seq(1988, by = 1 , length.out = nrow(Allcrn))
Cross_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(Crosscrn))
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
geom_line(data = Cross_bai_crn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange")) +  # Custom colors
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
View(Childs_bai_crn)
View(AllcorBAI)
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
AllcorBAI <-bai.in(AllCorcrn)
View(AllcorBAI)
write.csv(Allcor, "CrossdatedBAI.csv")
write.csv(AllcorBAI, "CrossdatedBAI.csv")
# List of raw ring-width files
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 2: Calculate BAI from the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
# Step 6: Export the BAI for AllCor as an example
AllCor_bai <- bai_list[["ALLCor"]]
write.csv(AllCor_bai, "CrossdatedBAI.csv")
# Step 7: Access specific chronologies as needed
chron_names <- names(rwl_list)
for (name in chron_names) {
assign(paste0(name, "_bai_crn"), bai_chron_list[[name]])
assign(paste0(name, "_rwl_crn"), rwl_chron_list[[name]])
}
# Example: Access Childs BAI and ring-width chronologies
Childs_bai_crn <- get("Childs_bai_crn")
Childs_rwl_crn <- get("Childs_rwl_crn")
# Example: Access Childs BAI and ring-width chronologies
Childs_bai_crn <- get("Childs_bai_crn")
View(All_bai_crn)
View(AllCor_bai)
View(AllCor_bai_crn)
View(ALLCor_bai_crn)
Childs_bai_crn <- bai.in(Childscrn)
View(Childs_bai_crn)
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 2: Calculate BAI from the raw data
bai_list <- lapply(rwl_list, bai.in)
View(bai_list)
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 2: Calculate BAI from the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
ch
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 2: Calculate BAI from the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 2: Calculate BAI from the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
View(bai_chron_list)
View(bai_chron_list)
view(bai_chron_list)
View(Allcrn)
View(bai_chron_list)
View(AllCor_bai)
View(bai_list)
Childs_bai_crn <- bai.in(Childscrn)
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
View(detrended_list)
View(detrended_list)
