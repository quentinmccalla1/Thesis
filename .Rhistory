tukey_data$Comparison <- rownames(tukey_data)
rownames(tukey_data) <- NULL
tukey_data$Variable <- var
# Reorder columns and rename for clarity
tukey_data <- tukey_data %>%
select(Variable, Comparison, diff, lwr, upr, `p adj`) %>%
rename(Mean_Diff = diff, Lower_CI = lwr, Upper_CI = upr, P_Value = `p adj`)
# Append to formatted results
Childsformatted_results[[var]] <- tukey_data
}
}
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse",repos = "https://cloud.r-project.org")
install.packages("gridExtra")
install.packages("grid")
install.packages("knitr")
install.packages("kableExtra")
library(grid)
library(kableExtra)
library(tidyverse)
library(knitr)
brap_data <- read_csv("BRAPALL.csv")
childs_data <- read_csv("ChildsAll.csv")
brap_data <- brap_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
childs_data <- childs_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- var
mean_value$Visit <- visit
# Bind to the results
results <- bind_rows(results, mean_value)
}
}
# View the final results
print(results)
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
Childsresults <- data.frame()  # Empty data frame to store the results
for (var in variables) {
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- var
mean_value$Visit <- visit
# Bind to the results
Childsresults <- bind_rows(Childsresults, mean_value)
}
}
# View the final results
print(Childsresults)
# Initialize an empty data frame to store the results
Childsresults <- data.frame()
# Choosevariable
variable_of_interest <- "HDR"
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit for the "Diameter" variable
mean_value <- childs_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- variable_of_interest
mean_value$Visit <- visit
# Bind to the results
Childsresults <- bind_rows(Childsresults, mean_value)
}
# Pivot the data so that each visit is a separate column
Childsresults_wide <- Childsresults %>%
pivot_wider(names_from = Visit, values_from = mean_value)
# View the final results in a table format using kable
Childsresults_wide %>%
kable("html", caption = "Mean HDR Values by Visit for Childs") %>%
kable_styling(full_width = FALSE)
# Initialize an empty data frame to store the results
Childsresults <- data.frame()
# Choose the variable of interest
variable_of_interest <- "Height"
# Define the visits explicitly, ensuring that '122024' is included
visits <- c("62024", "102023", "102024", "122024")  # List all the visits you want to include
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit for the chosen variable
mean_value <- childs_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- variable_of_interest
mean_value$Visit <- visit
# Bind to the results
Childsresults <- bind_rows(Childsresults, mean_value)
}
# Pivot the data so that each visit is a separate column
Childsresults_wide <- Childsresults %>%
pivot_wider(names_from = Visit, values_from = mean_value)
# View the final results in a table format using kable
Childsresults_wide %>%
kable("html", caption = "Mean Height Values by Visit for Childs") %>%
kable_styling(full_width = FALSE)
# Choose the variable of interest (Height in this case)
variable_of_interest <- "Height"
# Calculate the mean height for each plot and visit
mean_height <- childs_data %>%
group_by(Plot, Visit) %>%  # Group by Plot and Visit
summarise(mean_height = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean height, remove NA
# Create a bar plot with more space between bars
ggplot(mean_height, aes(x = factor(Plot), y = mean_height, fill = Visit)) +
geom_bar(stat = "identity", position = position_dodge(width = .8)) +  # Increase spacing between bars
labs(title = "Mean Height by Plot and Visit",
x = "Plot",
y = "Mean Height") +
theme_minimal() +
scale_fill_manual(values = c("skyblue", "lightgreen", "orange", "pink")) +  # Customize colors
scale_x_discrete(expand = expansion(add = c(2,2))) +  # Add more space around bars on x-axis
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Initialize an empty list to store formatted Tukey results for Childs site
Childsformatted_results <- list()
# Loop through each variable's Tukey results
for (var in Childsvariables) {  # Use Childsvariables to ensure proper referencing
if (!is.null(Childstukey_results[[var]])) {  # Access Childstukey_results for Tukey data
# Extract Tukey results for Visit comparisons
tukey_data <- as.data.frame(Childstukey_results[[var]]$Visit)
tukey_data$Comparison <- rownames(tukey_data)
rownames(tukey_data) <- NULL
tukey_data$Variable <- var
# Reorder columns and rename for clarity
tukey_data <- tukey_data %>%
select(Variable, Comparison, diff, lwr, upr, `p adj`) %>%
rename(Mean_Diff = diff, Lower_CI = lwr, Upper_CI = upr, P_Value = `p adj`)
# Append to formatted results
Childsformatted_results[[var]] <- tukey_data
}
}
# List of variables to analyze
Childsvariables <- c("Diameter", "Height", "HDR")
# Initialize empty lists to store results
Childsanova_results <- list()
Childstukey_results <- list()
# Loop through each variable
for (var in Childsvariables) {
# Run ANOVA
Childsanova_model <- aov(as.formula(paste(var, "~ Visit")), data = childs_data)
Childsanova_results[[var]] <- summary(Childsanova_model)
# Check for significance in the ANOVA model
p_value <- summary(Childsanova_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_value) && p_value < 0.05) {
# If significant, run Tukey's HSD
tukey_test <- TukeyHSD(Childsanova_model)
Childstukey_results[[var]] <- tukey_test
} else {
Childstukey_results[[var]] <- NULL
}
}
brap_data$Visit <- as.factor(brap_data$Visit)
childs_data$Visit <- as.factor(childs_data$Visit)
# List of variables to analyze
variables <- c("Diameter", "Height", "HDR")
# Initialize an empty list to store results
anova_results <- list()
tukey_results <- list()
# Loop through each variable
for (var in variables) {
# Run ANOVA
anova_model <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
anova_results[[var]] <- summary(anova_model)
# Check for significance in the ANOVA model
p_value <- summary(anova_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_value) && p_value < 0.05) {
# If significant, run Tukey's HSD
tukey_test <- TukeyHSD(anova_model)
tukey_results[[var]] <- tukey_test
} else {
tukey_results[[var]] <- NULL
}
}
# View Tukey's HSD results
for (var in variables) {
if (!is.null(tukey_results[[var]])) {
cat("\nTukey's HSD for", var, ":\n")
print(tukey_results[[var]])
} else {
cat("\nNo significant results for", var, "in ANOVA.\n")
}
}
# Initialize an empty list to store formatted Tukey results
formatted_results <- list()
# Loop through each variable's Tukey results
for (var in variables) {
if (!is.null(tukey_results[[var]])) {
# Extract Tukey results for Visit comparisons
tukey_data <- as.data.frame(tukey_results[[var]]$Visit)
tukey_data$Comparison <- rownames(tukey_data)
rownames(tukey_data) <- NULL
tukey_data$Variable <- var
# Reorder columns
tukey_data <- tukey_data %>%
select(Variable, Comparison, diff, lwr, upr, `p adj`) %>%
rename(Mean_Diff = diff, Lower_CI = lwr, Upper_CI = upr, P_Value = `p adj`)
# Append to formatted results
formatted_results[[var]] <- tukey_data
}
}
# Combine all results into one data frame
final_results <- bind_rows(formatted_results)
# Display as a styled table
final_results %>%
kable("html", caption = "Tukey's HSD Results for BRAP") %>%
kable_styling(full_width = FALSE) %>%
row_spec(which(final_results$P_Value < 0.05), background = "lightgreen")
final_results %>%
kable("html", caption = "Tukey's HSD Results for BRAP") %>%
kable_styling(full_width = FALSE)
# List of variables to analyze
Childsvariables <- c("Diameter", "Height", "HDR")
# Initialize empty lists to store results
Childsanova_results <- list()
Childstukey_results <- list()
# Loop through each variable
for (var in Childsvariables) {
# Run ANOVA
Childsanova_model <- aov(as.formula(paste(var, "~ Visit")), data = childs_data)
Childsanova_results[[var]] <- summary(Childsanova_model)
# Check for significance in the ANOVA model
p_value <- summary(Childsanova_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_value) && p_value < 0.05) {
# If significant, run Tukey's HSD
tukey_test <- TukeyHSD(Childsanova_model)
Childstukey_results[[var]] <- tukey_test
} else {
Childstukey_results[[var]] <- NULL
}
}
# View Tukey's HSD results
for (var in Childsvariables) {
if (!is.null(Childstukey_results[[var]])) {
cat("\nTukey's HSD for", var, ":\n")
print(Childstukey_results[[var]])
} else {
cat("\nNo significant results for", var, "in ANOVA.\n")
}
}
# Initialize an empty list to store formatted Tukey results for Childs site
Childsformatted_results <- list()
# Loop through each variable's Tukey results
for (var in Childsvariables) {  # Use Childsvariables to ensure proper referencing
if (!is.null(Childstukey_results[[var]])) {  # Access Childstukey_results for Tukey data
# Extract Tukey results for Visit comparisons
tukey_data <- as.data.frame(Childstukey_results[[var]]$Visit)
tukey_data$Comparison <- rownames(tukey_data)
rownames(tukey_data) <- NULL
tukey_data$Variable <- var
# Reorder columns and rename for clarity
tukey_data <- tukey_data %>%
select(Variable, Comparison, diff, lwr, upr, `p adj`) %>%
rename(Mean_Diff = diff, Lower_CI = lwr, Upper_CI = upr, P_Value = `p adj`)
# Append to formatted results
Childsformatted_results[[var]] <- tukey_data
}
}
# Combine all formatted results into one data frame
Childsfinal_results <- bind_rows(Childsformatted_results)
# Display the results as a styled table
Childsfinal_results %>%
kable("html", caption = "Tukey's HSD Results for Childs Site Variables") %>%
kable_styling(full_width = FALSE) %>%
#row_spec(which(Childsfinal_results$P_Value < 0.05), background = "lightgreen")
Childsfinal_results %>%
kable("html", caption = "Tukey's HSD Results for Childs Site Variables") %>%
kable_styling(full_width = FALSE)
knitr::opts_chunk$set(echo = TRUE)
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl", "Old.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
install.packages("dplR")
install.packages("treeclim")
library(dplR)
library(tidyverse)
library(kableExtra)
library(knitr)
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl", "Old.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets for clarity
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated", "Old")
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
Childscrn <- rwl_chron_list[["Childs"]]
Sheepcrn <- rwl_chron_list[["Sheep"]]
UBcrn <- rwl_chron_list[["UB"]]
LBcrn <- rwl_chron_list[["LB"]]
Allcrn <- rwl_chron_list[["ALL"]]
AllCorcrn <- rwl_chron_list[["ALLCor"]]
Crosscrn <- rwl_chron_list[["Crossdated"]]
Oldcrn <- rwl_chron_list[["Old"]]
# List of raw ring-width files
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl", "Old.rwl")
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated", "Old")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Step 2: Calculate BAI for each dataset
bai_list <- lapply(rwl_list, bai.in)
ChildsBAI <- chron(bai_list$Childs)
View(Oldcrn)
View(bai_list)
OldBAI <- bai.in("old.rwl")
OldBAI <- bai.in("Old.rwl")
OldBAI <- bai.in(rwl = "Old.rwl", d2pith = NULL)
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl", "Old.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets for clarity
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated", "Old")
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
Childscrn <- rwl_chron_list[["Childs"]]
Sheepcrn <- rwl_chron_list[["Sheep"]]
UBcrn <- rwl_chron_list[["UB"]]
LBcrn <- rwl_chron_list[["LB"]]
Allcrn <- rwl_chron_list[["ALL"]]
AllCorcrn <- rwl_chron_list[["ALLCor"]]
Crosscrn <- rwl_chron_list[["Crossdated"]]
Oldcrn <- rwl_chron_list[["Old"]]
# List of raw ring-width files
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl", "Old.rwl")
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated", "Old")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Step 2: Calculate BAI for each dataset
bai_list <- lapply(rwl_list, bai.in)
View(bai_list)
bai_list[[8]][["C61"]]
View(bai_list[[8]])
Old_bai_crn$Year <- seq(1915, by = 1, length.out= nrow(Oldcrn))
plot(Oldcrn, add.spline = TRUE, nyears = 5)
plot(bai_list[[8]], add.spline = TRUE, nyears = 5)
plot(bai_list[[8]], nyears = 5)
Sheep_bai_crn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Old_bai_crn$Year <- seq(1915, by = 1, length.out= nrow(Oldcrn))
# List of raw ring-width files
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl", "Old.rwl")
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated", "Old")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Step 2: Calculate BAI for each dataset
bai_list <- lapply(rwl_list, bai.in)
Old_bai_crn$Year <- seq(1915, by = 1, length.out= nrow(Oldcrn))
library(dplR)
library(dplyr)
library(kableExtra)
DendroMerge <- read_csv("DendroMergeforR.csv")
library(dplyr)
DendroMerge <- read_csv("DendroMergeforR.csv")
library(dplR)
library(dplyr)
library(kableExtra)
DendroMerge <- read_csv("DendroMergeforR.csv")
library(dplyr)
# Create an empty list to store model summaries
lm_results <- list()
# Get all unique site IDs
site_ids <- unique(DendroMerge$`Site ID`)
# Loop through each site
for (site in site_ids) {
# Filter data for the current site and remove NA values in key columns
site_data <- DendroMerge %>%
filter(`Site ID` == site) %>%
filter(!is.na(PithHand) & !is.na(`Diameter (CM)`))  # Remove rows with NA in PithHand or Diameter
# Check if there's enough data after filtering
if (nrow(site_data) > 1) {
# Fit the linear model
lm_model <- lm(`Diameter (CM)` ~ PithHand, data = site_data)
# Extract summary details
model_summary <- summary(lm_model)
# Store results in the list
lm_results[[site]] <- list(
Coefficients = coef(model_summary),      # Coefficients (Intercept and Slope)
R_squared = model_summary$r.squared,    # R-squared value
Adj_R_squared = model_summary$adj.r.squared, # Adjusted R-squared value
P_value = coef(model_summary)[2, 4]     # P-value for the slope
)
} else {
# If there is not enough data, store a message
lm_results[[site]] <- "Not enough data for linear model"
}
}
# Print results for a specific site (e.g., "Childs")
lm_results[["Lower Beasley"]]
library(ggplot2)
library(dplyr)
# Get unique site IDs
site_ids <- unique(DendroMerge$`Site ID`)
# Loop through each site ID and generate a plot
for (site in site_ids) {
# Filter data for the current site
site_data <- DendroMerge %>% filter(`Site ID` == site)
# Create the plot
p <- ggplot(site_data, aes(x = PithHand, y = `Diameter (CM)`, color = `Site ID`)) +
labs(x = "Pith Year", y = "Diameter (cm)", title = paste("Diameter vs Pith Date - Site:", site)) +
geom_point(shape = 18, size = 3) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
scale_y_continuous(limits = c(0, 100)) +
scale_x_continuous(limits = c(1985, 2020)) +
theme_minimal()
# Save or print the plot
print(p) # To view in the R console
}
ggplot(DendroMerge, aes(x = PithHand, y = `Diameter (CM)`, color= `Site ID`)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = "Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
# Print results for a specific site (e.g., "Childs")
lm_results[["All"]]
ggplot(DendroMerge, aes(x = PithHand, y = `Diameter (CM)`, color= `Site ID`)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = "Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
p <- ggplot(DendroMerge, aes(x = PithHand, y = `Diameter (CM)`, color= `Site ID`)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = "Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
summarise(p)
lm(data = DendroMerge, PithHand ~ Diameter (CM))
lm(data = DendroMerge, PithHand ~ `Diameter (CM)`)
p <-lm(data = DendroMerge, PithHand ~ `Diameter (CM)`)
summarise(p)
View(p)
coef(p)
View(p)
p <- ggplot(DendroMerge, aes(x = PithHand, y = `Diameter (CM)`)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = "Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
p <-lm(data = DendroMerge, PithHand ~ `Diameter (CM)`)
ggplot(DendroMerge, aes(x = PithHand, y = `Diameter (CM)`)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = "Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
p <-lm(data = DendroMerge, PithHand ~ `Diameter (CM)`)
p <-lm(data = DendroMerge, PithHand ~ `Diameter (CM)`)
View(p)
