colnames(Crosscrn)
colnames(mean_winter_flow)
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
merged_data <- merge(annual_means, Crosscrn, mean_winter_flow ,by = "Year" )
merged_data1 <- merge(merged_data, mean_winter_flow ,by = "Year" )
View(merged_data1)
cor(merged_data1$mean_winter_flow, merged_data1$std)
cor(merged_data$mean_value, merged_data$std)
View(merged_data1)
View(CampVerdeGuage)
meanmin <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(min = min(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
View(meanmin)
View(meanmin)
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
meanmin$Year <- as.numeric(as.character(meanmin$Year))
merged_data2 <- merge(merged_data1, meanmin ,by = "Year" )
cor(merged_data2$min, merged_data2$std)
View(combinedBAI_data)
cor(merged_data$mean_value, merged_data$std)
cor(merged_data1$mean_winter_flow, merged_data1$std)
cor(merged_data2$min, merged_data2$std)
auto_model <- auto.arima(Crosscrn$std)
auto_model <- arima(Crosscrn$std)
View(auto_model)
residuals <- residuals(auto_model)
plot(merged_data$mean_value, merged_data$std, type = "o")
acf(merged_data$std)
Box.test(merged_data$std, lag = 10, type = "Ljung-Box")
Box.test(merged_data$std, lag = 5, type = "Ljung-Box")
Box.test(merged_data$std, lag = 1, type = "Ljung-Box")
lag.plot(merged_data$std, lag = 1)
#Childs
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge), log("y")) +
geom_line()+
labs(title = "Chlids")+
geom_vline(xintercept = as.Date("2023-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2021-10-14"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2019-06-08"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2017-06-04"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2015-06-01"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2013-06-05"), color = "red", linetype = "dashed", size = 1)+
geom_hline( yintercept = 52700, color= "blue", linetype = "dashed", size =1)+
annotate("text", x = as.Date("1990-04-01"), y = 52700,
label = "Restructuring Flow", color = "black", vjust = -1, size = 3)+
geom_hline(yintercept = 10500, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 10500, label ="Rejuvenating  flow"
, color ="black", vjust =-1, size = 3)
#Childs
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge), log("y")) +
geom_line()+
labs(title = "Chlids")+
geom_vline(xintercept = as.Date("2023-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2021-10-14"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2019-06-08"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2017-06-04"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2015-06-01"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2013-06-05"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2010-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_hline( yintercept = 52700, color= "blue", linetype = "dashed", size =1)+
annotate("text", x = as.Date("1990-04-01"), y = 52700,
label = "Restructuring Flow", color = "black", vjust = -1, size = 3)+
geom_hline(yintercept = 10500, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 10500, label ="Rejuvenating  flow"
, color ="black", vjust =-1, size = 3)
ggplot(data = annual_means, aes(x = Year, y = Mean)) +
geom_line() +
labs(title = "Mean Annual Values",
x = "Year",
y = "Mean Value") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(lubridate)
# Calculate mean annual values
annual_means <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(mean_value = mean(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
annual_means <- setNames(annual_means, c("Year", "Mean"))
# View the results
print(annual_means)
# Extract year and month
CampVerdeGuage$Year <- format(CampVerdeGuage$Date, "%Y")
CampVerdeGuage$Month <- format(CampVerdeGuage$Date, "%m")
# Filter for months between November and March
winter_data <- CampVerdeGuage %>%
filter(Month %in% c("11", "12", "01", "02", "03"))
# Check column names in the dataset
colnames(winter_data)
# Calculate the mean flow for each year
mean_winter_flow <- winter_data %>%
group_by(Year) %>%
summarise(mean_winter_flow = mean(Discharge, na.rm = TRUE))  # Replace 'Flow' with your actual column name
meanmin <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(min = min(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
PDSI <- read_csv("PDSI-AS-1994to2023.csv")
PDSI <- read_csv("PDSI-AZ-1994to2023.csv")
View(PDSI)
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Corrected here
summarise(mean_value = mean(Value, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
PDSI$Year <- as.Date(PDSI$Year)
# Calculate mean PDSI value per year
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
View(PDSImean)
PDSI$Year <- as.Date(PDSI$Year)
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
PDSI <- read_csv("PDSI-AZ-1994to2023.csv")
PDSI$Year <- as.Date(PDSI$Year)
# Calculate mean PDSI value per year
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
PDSI$Year <- as.Date(PDSI$Year)
PDSI <- read_csv("PDSI-AZ-1994to2023.csv")
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
PDSImean <- PDSI %>%
group_by(year = Year) %>%  # If 'Year' is already numeric
summarise(mean_value = mean(Value, na.rm = TRUE))
View(PDSImean)
YearlyTemp <- read_csv("AverageMonthlyTemp-YavapaiCounty_1993-2024")
YearlyTemp <- read_csv("AverageMonthlyTemp-YavapaiCounty_1993-2024.csv")
View(YearlyTemp)
MeanTemp <- YearlyTemp %>%
group_by(year = Year) %>%  # If 'Year' is already numeric
summarise(mean_value = mean(Value, na.rm = TRUE))
MeanTemp <- YearlyTemp %>%
group_by(year = Year) %>%  # If 'Year' is already numeric
summarise(mean_value = mean(`Degrees F`, na.rm = TRUE))
View(MeanTemp)
colnames(PDSImean)
colnames(PDSImean)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)
colnames(MeanTemp)
colnames(MeanTemp)[colnames(meanmin) == "year"] <- "Year"
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
AllMerged <- Reduce(function(x,y) merge(x,y, by = "Year", list(annual_means, PDSImean, MeanTemp)))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp))
View(AllMerged)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means,))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means))
View(AllMerged)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
View(AllMerged)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn$std))
View(Crosscrn)
colnames(Crosscrn)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
View(AllMerged)
AllMerged[,-5]
View(AllMerged)
AllMerged[,-5]
AllMerged[,-c(5)]
AllMerged[,-c(5)]
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
colnames(Crosscrn)[colnames(Crosscrn)] ==
annual_means$year <- as.numeric(as.character(annual_means$Date))
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Date))
annual_means$year <- as.numeric(as.character(annual_means$Date))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
AllMerged[,-c(5)]
colnames(AllMerged) <- c("Discharge","PDSI","Ferenheit")
cor(merged_data$mean_value, merged_data$std)
cor(merged_data1$mean_winter_flow, merged_data1$std)
cor(merged_data2$min, merged_data2$std)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
AllMerged[,-6]
colnames(AllMerged) <- c("Discharge","PDSI","Ferenheit")
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit")
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
colnames(Crosscrn)
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list( PDSImean, MeanTemp, annual_means, Crosscrn) )
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, PDSImean, MeanTemp, Crosscrn))
colnames(Crosscrn)[colnames(Crosscrn) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list( annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
Crosscrn$Year <- as.numeric(Crosscrn$Year)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list( annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, PDSImean, MeanTemp, Crosscrn))
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
View(AllMerged)
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit")
AllMerged[,-3]
AllMerged <- AllMerged[,-3]
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit")
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
AllMerged <- AllMerged[,-5]
AllMerged <- AllMerged[,-5]
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit","RWI","Sample Depth")
AllMerged <- AllMerged[,-7]
cor(AllMerged$RWI,AllMerged$PDSI)
cor(AllMerged$RWI,AllMerged$Ferenheit)
cor(AllMerged$RWI,AllMerged$Discharge)
remove(AllMerged)
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
colnames(Crosscrn)[colnames(Crosscrn) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
Crosscrn$Year <- as.numeric(Crosscrn$Year)
# Corrected syntax
# Standardize 'Year' column and remove duplicate 'annual_means'
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
View(annual_means)
# Load necessary libraries
library(dplyr)
library(lubridate)
# Calculate mean annual values
annual_means <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(mean_value = mean(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
annual_means <- setNames(annual_means, c("Year", "Mean"))
# View the results
print(annual_means)
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
colnames(Crosscrn)[colnames(Crosscrn) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
Crosscrn$Year <- as.numeric(Crosscrn$Year)
# Corrected syntax
# Standardize 'Year' column and remove duplicate 'annual_means'
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
AllMerged <- AllMerged[,-3]
AllMerged <- AllMerged[,-5]
AllMerged <- AllMerged[,-5]
AllMerged <- AllMerged[,-7]
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit","RWI","Sample Depth")
cor(AllMerged$RWI,AllMerged$Discharge)
cor(AllMerged$RWI,AllMerged$Discharge)
knitr::opts_chunk$set(echo = TRUE)
auto_model <- arima(Crosscrn$std)
residuals <- residuals(auto_model)
#Check for autocorrelatio
plot(merged_data$mean_value, merged_data$std, type = "o")
acf(merged_data$std)
lag.plot(merged_data$std, lag = 1)
#Yes! Data is autocorrelated
cor(AllMerged$RWI,AllMerged$Discharge)
View(AllMerged)
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
colnames(Crosscrn)[colnames(Crosscrn) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
Crosscrn$Year <- as.numeric(Crosscrn$Year)
# Corrected syntax
# Standardize 'Year' column and remove duplicate 'annual_means'
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
cor(AllMerged$RWI,AllMerged$Discharge)
AllMerged <- subset(AllMerged, Year >= 1994 & Year <= 2023)
View(AllMerged)
cor(AllMerged$RWI,AllMerged$Discharge)
cor(AllMerged$RWI,AllMerged$Ferenheit)
cor(AllMerged$RWI,AllMerged$Ferenheit)
cor(AllMerged$RWI,AllMerged$PDSI)
cor(AllMerged$RWI,AllMerged$Ferenheit)
install.packages("bootRes")
library(bootRes)
library(bootRes)
install.packages("bootRes")
library(bootRes)
# Install bootRes package
install.packages("bootRes")
# Load bootRes library
library(bootRes)
install.packages("treeclim")
library(treeclim)
install.packages("remotes")
remotes::install_github("szalatnai/treeclim")
AllMerged <- AllMerged %>%
mutate(
Temp_Lag1 = lag(Ferenheit, 1),
Precip_Lag1 = lag(Discharge, 1)
)
library(tidyverse)
AllMerged <- AllMerged %>%
mutate(
Temp_Lag1 = lag(Ferenheit, 1),
Precip_Lag1 = lag(Discharge, 1)
)
# Fit a linear model with climate variables and their lagged versions
model_lagged <- lm(RWI ~ Ferenheit + Discharge + Temp_Lag1 + Precip_Lag1, data = AllMerged)
summary(model_lagged)
bootstrap_analysis <- function(data, indices) {
sample_data <- data[indices, ]
model <- lm(RWI ~ Ferenheit + Discharge + Temp_Lag1 + Precip_Lag1, data = AllMerged)
return(coef(model))
}
set.seed(123)
results <- boot(data, statistic = bootstrap_analysis, R = 1000)
install.packages("boot")
library(boot)
install.packages("boot")
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
results <- boot(data, statistic = bootstrap_analysis, R = 1000)
install.packages("boot")
library(boot)
library(tidyverse)
AllMerged <- AllMerged %>%
mutate(
Temp_Lag1 = lag(Ferenheit, 1),
Precip_Lag1 = lag(Discharge, 1)
)
# Fit a linear model with climate variables and their lagged versions
model_lagged <- lm(RWI ~ Ferenheit + Discharge + Temp_Lag1 + Precip_Lag1, data = AllMerged)
summary(model_lagged)
# Define a bootstrap function to resample data and fit the model
bootstrap_analysis <- function(data, indices) {
sample_data <- data[indices, ]
model <- lm(RWI ~ Ferenheit + Discharge + Temp_Lag1 + Precip_Lag1, data = AllMerged)
return(coef(model))
}
# Run the bootstrap procedure with 1000 resamples
set.seed(123)
results <- boot(data, statistic = bootstrap_analysis, R = 1000)
acf(merged_data$std)
auto_model <- arima(Crosscrn$std)
residuals <- residuals(auto_model)
#Check for autocorrelatio
plot(merged_data$mean_value, merged_data$std, type = "o")
acf(merged_data$std)
lag.plot(merged_data$std, lag = 1)
#Yes! Data is autocorrelated
fdas
library(treeclim)
install.packages("treeclim")
version
version
knitr::opts_chunk$set(echo = TRUE)
version
knitr::opts_chunk$set(echo = TRUE)
install.packages("treeclim")
