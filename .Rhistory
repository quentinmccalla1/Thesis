Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
# Print the results for each site
kable(results, format= "latex")
# Print the results for each site
kable(results, format= "latex")
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
kable(results)
kable(results, format = "latex", booktabs= TRUE)
kable(results, format = "latex", booktabs= TRUE) %>%
kable_styling(latex_options = c("striped", "hold_positions"))
library(knitr)
kable(results, format = "latex", booktabs= TRUE) )
kable(results, format = "latex", booktabs= TRUE)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results, format = "latex", booktabs = TRUE)
for (site in names(results)) {
print(kable(results[[site]], format = "latex", booktabs = TRUE, caption = paste("Results for", site)))
}
View(results)
print(results)
kable(
results$AllCorcrn,
format = "latex",
booktabs = TRUE,
caption = "Results for AllCorcrn"
)
kable(results$AllCorcrn, format = "html", caption = "Results for AllCorcrn")
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse",repos = "https://cloud.r-project.org")
install.packages("gridExtra")
install.packages("tidyverse", repos = "https://cloud.r-project.org")
install.packages("grid")
install.packages("knitr")
install.packages("kableExtra")
library(grid)
library(kableExtra)
library(tidyverse)
library(knitr)
install.packages("knitr")
install.packages("kableExtra")
brap_data <- read_csv("BRAPALL.csv")
childs_data <- read_csv("ChildsAll.csv")
brap_data <- brap_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
childs_data <- childs_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- brap_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- var
mean_value$Visit <- visit
# Bind to the results
results <- bind_rows(results, mean_value)
}
}
# View the final results
print(results)
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- _data %>%
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
# Initialize an empty data frame to store the results
Childsresults <- data.frame()
# Choosevariable
variable_of_interest <- "HDR"
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit for the "Diameter" variable
mean_value <- childs_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- variable_of_interest
mean_value$Visit <- visit
# Bind to the results
Childsresults <- bind_rows(Childsresults, mean_value)
}
# Pivot the data so that each visit is a separate column
Childsresults_wide <- Childsresults %>%
pivot_wider(names_from = Visit, values_from = mean_value)
# View the final results in a table format using kable
Childsresults_wide %>%
kable("html", caption = "Mean HDR Values by Visit for Childs") %>%
kable_styling(full_width = FALSE)
brap_data$Visit <- as.factor(brap_data$Visit)
childs_data$Visit <- as.factor(childs_data$Visit)
# Initialize an empty list to store formatted Tukey results
formatted_results <- list()
# Loop through each variable's Tukey results
for (var in variables) {
if (!is.null(tukey_results[[var]])) {
# Extract Tukey results for Visit comparisons
tukey_data <- as.data.frame(tukey_results[[var]]$Visit)
tukey_data$Comparison <- rownames(tukey_data)
rownames(tukey_data) <- NULL
tukey_data$Variable <- var
# Reorder columns
tukey_data <- tukey_data %>%
select(Variable, Comparison, diff, lwr, upr, `p adj`) %>%
rename(Mean_Diff = diff, Lower_CI = lwr, Upper_CI = upr, P_Value = `p adj`)
# Append to formatted results
formatted_results[[var]] <- tukey_data
}
}
# List of variables to analyze
variables <- c("Diameter", "Height", "HDR")
# Initialize an empty list to store results
anova_results <- list()
tukey_results <- list()
# Loop through each variable
for (var in variables) {
# Run ANOVA
anova_model <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
anova_results[[var]] <- summary(anova_model)
# Check for significance in the ANOVA model
p_value <- summary(anova_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_value) && p_value < 0.05) {
# If significant, run Tukey's HSD
tukey_test <- TukeyHSD(anova_model)
tukey_results[[var]] <- tukey_test
} else {
tukey_results[[var]] <- NULL
}
}
# View Tukey's HSD results
for (var in variables) {
if (!is.null(tukey_results[[var]])) {
cat("\nTukey's HSD for", var, ":\n")
print(tukey_results[[var]])
} else {
cat("\nNo significant results for", var, "in ANOVA.\n")
}
}
# List of variables to analyze
variables <- c("Diameter", "Height", "HDR")
# Initialize an empty list to store results
anova_results <- list()
tukey_results <- list()
# Loop through each variable
for (var in variables) {
# Run ANOVA
anova_model <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
anova_results[[var]] <- summary(anova_model)
# Check for significance in the ANOVA model
p_value <- summary(anova_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_value) && p_value < 0.05) {
# If significant, run Tukey's HSD
tukey_test <- TukeyHSD(anova_model)
tukey_results[[var]] <- tukey_test
} else {
tukey_results[[var]] <- NULL
}
}
# View Tukey's HSD results
for (var in variables) {
if (!is.null(tukey_results[[var]])) {
cat("\nTukey's HSD for", var, ":\n")
print(tukey_results[[var]])
} else {
cat("\nNo significant results for", var, "in ANOVA.\n")
}
}
# Initialize an empty list to store formatted Tukey results
formatted_results <- list()
# Loop through each variable's Tukey results
for (var in variables) {
if (!is.null(tukey_results[[var]])) {
# Extract Tukey results for Visit comparisons
tukey_data <- as.data.frame(tukey_results[[var]]$Visit)
tukey_data$Comparison <- rownames(tukey_data)
rownames(tukey_data) <- NULL
tukey_data$Variable <- var
# Reorder columns
tukey_data <- tukey_data %>%
select(Variable, Comparison, diff, lwr, upr, `p adj`) %>%
rename(Mean_Diff = diff, Lower_CI = lwr, Upper_CI = upr, P_Value = `p adj`)
# Append to formatted results
formatted_results[[var]] <- tukey_data
}
}
# Combine all results into one data frame
final_results <- bind_rows(formatted_results)
# Display as a styled table
final_results %>%
kable("html", caption = "Tukey's HSD Results for BRAP") %>%
kable_styling(full_width = FALSE) %>%
row_spec(which(final_results$P_Value < 0.05), background = "lightgreen")
ChildsVars <- read_csv("ChildsWellSurvey.csv")
BRAPVars <- read_csv("BRAPWellSurvey.csv")
# Target variable (change this to your actual target variable name)
target_var <- BRAPVars$`% Change from original survey`
column_names <- setdiff(names(BRAPVars), "target_var")
# Initialize an empty data frame to store results
cor_results <- data.frame(Variable = character(), Correlation = numeric(), P_Value = numeric(), stringsAsFactors = FALSE)
# Loop through the list of variables to test correlation with the target
for (var_name in column_names) {
current_var <- BRAPVars[[var_name]]
if (is.numeric(current_var) && sum(complete.cases(current_var, target_var)) > 2) {
# Perform Spearman correlation test
cor_test <- tryCatch(
cor.test(target_var, current_var, method = "spearman", use = "complete.obs"),
error = function(e) NULL
)
if (!is.null(cor_test)) {
cor_results <- rbind(cor_results,
data.frame(Variable = var_name,
Correlation = cor_test$estimate,
P_Value = cor_test$p.value))
}
}
}
correlation_results <- data.frame(cor_results)
rownames(correlation_results) <- NULL
correlation_results <- correlation_results[-4,]
print(correlation_results)
correlation_results %>%
kable("html", caption = "Variables vs % Change in density from original survey") %>%
kable_styling(full_width = FALSE) %>%
row_spec(which(correlation_results$P_Value < 0.05), background = "lightgreen")%>%
save_kable("my_table.html")
# Target variable (change this to your actual target variable name)
target_var <- ChildsVars$`%Change Density`
column_names <- setdiff(names(ChildsVars), "target_var")
# Initialize an empty data frame to store results
cor_results <- data.frame(Variable = character(), Correlation = numeric(), P_Value = numeric(), stringsAsFactors = FALSE)
# Loop through the list of variables to test correlation with the target
for (var_name in column_names) {
current_var <- ChildsVars[[var_name]]
if (is.numeric(current_var) && sum(complete.cases(current_var, target_var)) > 2) {
# Perform Spearman correlation test
cor_test <- tryCatch(
cor.test(target_var, current_var, method = "spearman", use = "complete.obs"),
error = function(e) NULL
)
if (!is.null(cor_test)) {
cor_results <- rbind(cor_results,
data.frame(Variable = var_name,
Correlation = cor_test$estimate,
P_Value = cor_test$p.value))
}
}
}
correlation_results <- data.frame(cor_results)
rownames(correlation_results) <- NULL
#correlation_results <- correlation_results[-4,]
correlation_results %>%
kable("html", caption = "Variables vs %Change in original density") %>%
kable_styling(full_width = FALSE) %>%
row_spec(which(correlation_results$P_Value < 0.05), background = "lightgreen")
correlation_results %>%
kable("html", caption = "Variables vs %Change in original density") %>%
kable_styling(full_width = FALSE) %>%
#row_spec(which(correlation_results$P_Value < 0.05), background = "lightgreen")
correlation_results %>%
kable("html", caption = "Variables vs %Change in original density") %>%
kable_styling(full_width = FALSE)
correlation_results <- data.frame(cor_results)
rownames(correlation_results) <- NULL
#correlation_results <- correlation_results[-4,]
correlation_results %>%
kable("html", caption = "Variables vs %Change in original density") %>%
kable_styling(full_width = FALSE)
DendroMerge <- read_csv("DendroMergeforR.csv")
DendroMerge <- DendroMerge[,-8]
DendroMerge <- DendroMerge %>%
mutate(ID2 = recode(ID2,
"C" = "Childs",
"L" = "Lower Beasley",
"S" = "Sheep",
"U" = "Upper Beasley",
"W" = "West Clear Creek",
))
DendroMerge <- DendroMerge %>%
rename(`Site ID` = `ID2`)
# Step 1: Count the number of observations per site (ID2)
site_counts <- DendroMerge %>%
count(`Site ID`),
# Step 1: Count the number of observations per site (ID2)
site_counts <- DendroMerge %>%
count(`Site ID`)
# Step 2: Calculate mean diameter per site
mean_diameters_all_sites <- DendroMerge %>%
group_by(`Site ID`) %>%
summarise(mean_diameter = mean(`Diameter (CM)`, na.rm = TRUE)),  # Calculate mean diameter
# Step 1: Count the number of observations per site (ID2)
site_counts <- DendroMerge %>%
count(`Site ID`)
# Step 2: Calculate mean diameter per site
mean_diameters_all_sites <- DendroMerge %>%
group_by(`Site ID`) %>%
summarise(mean_diameter = mean(`Diameter (CM)`, na.rm = TRUE))  # Calculate mean diameter
# Step 3: Combine count and mean diameter into one table
combined_table <- site_counts %>%
left_join(mean_diameters_all_sites, by = "Site ID")
# Print the result
combined_table %>%
kable("html", caption = "Summary Table")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dataRetrieval")
library(dataRetrieval)
library(ggplot2)
library(dplyr)
library(lubridate)
CampVerdeGuage <- readNWISdv(    #Daily
"09506000",                  #Below camp verde guage
"00060",                      #Discharge
startDate = "1989-01-01",      #From first complete year
endDate = "",                 #Till now
statCd = "00003"
)
CampVerdeGuage <- CampVerdeGuage %>%     #Rename column to discharge
rename(Discharge = X_00060_00003)
# Get the top 5 highest flows
top_flows <- CampVerdeGuage %>%
arrange(desc(Flow)) %>%  # Sort by flow (descending)
slice(1:5)  # Select top 5 rows
# Get the top 5 highest flows
top_flows <- CampVerdeGuage %>%
arrange(desc(Discharge)) %>%  # Sort by flow (descending)
slice(1:5)  # Select top 5 rows
# Print results
print(top_flows)
# Get the top 5 highest flows
top_flows <- CampVerdeGuage %>%
arrange(desc(Discharge)) %>%  # Sort by flow (descending)
slice(1:10)  # Select top 5 rows
# Print results
print(top_flows)
