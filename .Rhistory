if (is.list(Precip)) {
Precip <- as.data.frame(Precip)
}
if (is.list(Precip)) {
Precip <- as.data.frame(Precip)
}
Precip <- Precip %>% mutate(across(everything(), as.numeric))
Precip <- Precip %>% filter(Year %in% common_years)
#Changed bootstrap to "exact", March is always significant and april is occasionally significant
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "exact",
var_names = "MeanFlow")
plot(Response)
#STD bootstrap, April is usually significant
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "std",
# selection = -11:6,
var_names = "MeanFlow")
plot(Response)
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  Precip,
boot = "std",
var_names = "MeanTemp")
# Ensure chronological data has sequential years
AllCorcrn <- AllCorcrn %>%
arrange(Year) %>%
distinct(Year, .keep_all = TRUE)  # Remove duplicates
# Ensure climate data is numeric and properly formatted
Precip <- Precip %>%
arrange(Year) %>%
mutate(across(-Year, as.numeric)) %>%  # Convert all columns except 'Year' to numeric
distinct(Year, .keep_all = TRUE)       # Remove duplicates
# Align years between chrono and climate datasets
common_years <- intersect(AllCorcrn$Year, Precip$Year)
AllCorcrn <- AllCorcrn %>% filter(Year %in% common_years)
Precip <- Precip %>% filter(Year %in% common_years)
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  Precip,
boot = "std",
var_names = "MeanTemp")
# Align datasets by common years
common_years <- Reduce(intersect, list(AllCorcrn$Year, annual_means$Year, MeanTemp$Year))
# Clean and prepare the `AllCorcrn` dataset
AllCorcrn <- AllCorcrn %>%
mutate(Year = 1988 + seq_len(n())) %>%  # Ensure sequential years
filter(Year %in% common_years) %>%
distinct(Year, .keep_all = TRUE)        # Remove duplicates
# Clean and prepare the `MeanTemp` dataset
MeanTemp <- MeanTemp %>%
rename(year = Year) %>%                 # Ensure consistent column name
mutate(across(everything(), as.numeric)) %>%
filter(year %in% common_years) %>%
distinct(year, .keep_all = TRUE)        # Remove duplicates
YearlyTemp <- read.csv("AverageMonthlyTemp-YavapaiCounty_1993-2024.csv")
MeanTemp <- YearlyTemp %>%
group_by(Year, Month) %>%
summarise(mean_value = mean(`Value`, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = Month, values_from = mean_value, names_prefix = "Month_") %>%
arrange(Year)
# Rename columns to month names
month_names <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Assign the month names to the columns (excluding the "Year" column)
colnames(MeanTemp)[2:13] <- month_names
# View the resulting data
print(MeanTemp)
annual_means <- annual_means %>% filter(Year %in% common_years)
# Align datasets by common years
common_years <- Reduce(intersect, list(AllCorcrn$Year, annual_means$Year, MeanTemp$Year))
# Clean and prepare the `AllCorcrn` dataset
AllCorcrn <- AllCorcrn %>%
mutate(Year = 1988 + seq_len(n())) %>%  # Ensure sequential years
filter(Year %in% common_years) %>%
distinct(Year, .keep_all = TRUE)        # Remove duplicates
# Clean and prepare the `MeanTemp` dataset
MeanTemp <- MeanTemp %>%
rename(year = Year) %>%                 # Ensure consistent column name
mutate(across(everything(), as.numeric)) %>%
filter(year %in% common_years) %>%
distinct(year, .keep_all = TRUE)        # Remove duplicates
# Clean and prepare the `Precip` dataset
Precip <- Precip %>%
mutate(across(everything(), as.numeric)) %>%  # Ensure numeric columns
filter(Year %in% common_years) %>%
distinct(Year, .keep_all = TRUE)              # Remove duplicates
# Clean and prepare the `annual_means` dataset
annual_means <- annual_means %>%
filter(Year %in% common_years) %>%
distinct(Year, .keep_all = TRUE)
# Example `dcc` analysis with "std" bootstrap
Response <- dcc(
chrono = AllCorcrn,
climate = Precip,
boot = "std",
var_names = "MeanTemp"
)
AllCorcrn$Year <- as.numeric(AllCorcrn$Year)
annual_means$Year <- as.numeric(annual_means$Year)
MeanTemp$year <- as.numeric(MeanTemp$year)
Precip$Year <- as.numeric(Precip$Year)
# Align datasets by common years
common_years <- Reduce(intersect, list(AllCorcrn$Year, annual_means$Year, MeanTemp$Year))
# Clean and prepare the `AllCorcrn` dataset
AllCorcrn <- AllCorcrn %>%
mutate(Year = 1988 + seq_len(n())) %>%  # Ensure sequential years
filter(Year %in% common_years) %>%
distinct(Year, .keep_all = TRUE)        # Remove duplicates
# Clean and prepare the `MeanTemp` dataset
MeanTemp <- MeanTemp %>%
rename(year = Year) %>%                 # Ensure consistent column name
mutate(across(everything(), as.numeric)) %>%
filter(year %in% common_years) %>%
distinct(year, .keep_all = TRUE)        # Remove duplicates
common_years <- intersect(AllCorcrn$Year, intersect(annual_means$Year, MeanTemp$Year))
AllCorcrn <- AllCorcrn %>%
mutate(Year = 1988 + seq_along(1:nrow(AllCorcrn)) - 1)
View(AllCorcrn)
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets for clarity
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
# Convert BAI data to a format suitable for `chron` function
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
# Access individual chronologies for both BAI and ring-width data
Childs_bai_crn <- bai_chron_list[["Childs"]]
Sheep_bai_crn <- bai_chron_list[["Sheep"]]
UB_bai_crn <- bai_chron_list[["UB"]]
LB_bai_crn <- bai_chron_list[["LB"]]
All_bai_crn <- bai_chron_list[["ALL"]]
AllCor_bai_crn <- bai_chron_list[["ALLCor"]]
Cross_bai_crn <- bai_chron_list[["Crossdated"]]
Childscrn <- rwl_chron_list[["Childs"]]
Sheepcrn <- rwl_chron_list[["Sheep"]]
UBcrn <- rwl_chron_list[["UB"]]
LBcrn <- rwl_chron_list[["LB"]]
Allcrn <- rwl_chron_list[["ALL"]]
AllCorcrn <- rwl_chron_list[["ALLCor"]]
Crosscrn <- rwl_chron_list[["Crossdated"]]
plot.crn(Sheepcrn, add.spline = TRUE, nyears = 5)
plot.crn(UBcrn, add.spline = TRUE, nyears = 5)
plot.crn(LBcrn, add.spline = TRUE, nyears = 5)
plot.crn(Childscrn, add.spline = TRUE, nyears = 5)
plot.crn(AllCorcrn, add.spline = TRUE, nyears = 5)
plot.crn(Allcrn, add.spline = TRUE, nyears = 5)
plot.crn(Crosscrn, add.spline = TRUE, nyears = 5)
Sheepcrn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childscrn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UBcrn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LBcrn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
Allcrn$Year <- seq(1988, by = 1, length.out = nrow(Allcrn))
Crosscrn$Year <- seq(1994, by = 1, length.out = nrow(Crosscrn))
# Combine all datasets into one
Sheepcrn$Dataset <- "Sheep Bridge"
Childscrn$Dataset <- "Childs"
UBcrn$Dataset <- "Upper Beasley"
LBcrn$Dataset <- "Lower Beasley"
Allcrn$Dataset <- "All"
Crosscrn$Dataset <- "Correlated"
# Combine datasets
combined_data <- rbind(Sheepcrn, Childscrn, UBcrn, LBcrn, Allcrn, Crosscrn)
# Create the ggplot with legend
ggplot(combined_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(data = Crosscrn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
geom_line(size = .5) +  # Line thickness
labs(x = "Year", y = "RWI", title = "Multiple Line Graphs") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange"))+
geom_hline(yintercept = 1, linetype= "dashed", color = "black")+
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
Sheep_bai_crn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childs_bai_crn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UB_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LB_bai_crn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
All_bai_crn$Year <- seq(1988, by = 1 , length.out = nrow(Allcrn))
Cross_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(Crosscrn))
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
geom_line(data = Cross_bai_crn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange")) +  # Custom colors
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dataRetrieval")
library(dataRetrieval)
library(ggplot2)
library(dplyr)
library(lubridate)
CampVerdeGuage <- readNWISdv(    #Daily
"09506000",                  #Below camp verde guage
"00060",                      #Discharge
startDate = "1989-01-01",      #From first complete year
endDate = "",                 #Till now
statCd = "00003"
)
CampVerdeGuage <- CampVerdeGuage %>%     #Rename column to discharge
rename(Discharge = X_00060_00003)
#All NAIP
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge), log("y")) +
geom_line()+
labs(title = "Chlids")+
geom_vline(xintercept = as.Date("2023-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2021-10-14"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2019-06-08"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2017-06-04"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2015-06-01"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2013-06-05"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2010-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_hline( yintercept = 52700, color= "blue", linetype = "dashed", size =1)+
annotate("text", x = as.Date("1990-04-01"), y = 52700,
label = "Restructuring Flow", color = "black", vjust = -1, size = 3)+
geom_hline(yintercept = 10500, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 10500, label ="Rejuvenating  flow"
, color ="black", vjust =-1, size = 3)
# Calculate mean annual values
annual_means <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(mean_value = mean(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
annual_means <- setNames(annual_means, c("Year", "Mean"))
# Extract year and month
CampVerdeGuage$Year <- format(CampVerdeGuage$Date, "%Y")
CampVerdeGuage$Month <- format(CampVerdeGuage$Date, "%m")
# Filter for months between November and March
winter_data <- CampVerdeGuage %>%
filter(Month %in% c("11", "12", "01", "02", "03"))
mean_winter_flow <- winter_data %>%
group_by(Year) %>%
summarise(mean_winter_flow = mean(Discharge, na.rm = TRUE))
SummerFlows<- CampVerdeGuage %>%
filter(Month %in% c("06", "07", "08", "09"))
SummerFlows <- SummerFlows %>%
group_by(Year) %>%
summarise(SummerFlows = mean(Discharge, na.rm = TRUE))
meanmin <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(min = min(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
maxflow <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(max = max(Discharge, na.rm = TRUE))
monthly_means <- CampVerdeGuage %>%
mutate(Year = year(Date), Month = month(Date)) %>%
group_by(Year, Month) %>%
summarise(Monthly_Mean = mean(Discharge, na.rm = TRUE), .groups = "drop")
monthly_means <- monthly_means %>%
pivot_wider(names_from = Month, values_from = Monthly_Mean, names_prefix = "Month_") %>%
arrange(Year)
# Rename the columns to use month names
month_names <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Assign the month names to the columns (excluding "Year" column)
colnames(monthly_means)[2:13] <- month_names
PDSI <- read_csv("PDSI-AZ-1994to2023.csv")
# Calculate mean PDSI value per year
PDSImean <- PDSI %>%
group_by(year = Year) %>%  # If 'Year' is already numeric
summarise(mean_value = mean(Value, na.rm = TRUE))
YearlyTemp <- read.csv("AverageMonthlyTemp-YavapaiCounty_1993-2024.csv")
MeanTemp <- YearlyTemp %>%
group_by(Year, Month) %>%
summarise(mean_value = mean(`Value`, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = Month, values_from = mean_value, names_prefix = "Month_") %>%
arrange(Year)
# Rename columns to month names
month_names <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Assign the month names to the columns (excluding the "Year" column)
colnames(MeanTemp)[2:13] <- month_names
# View the resulting data
print(MeanTemp)
Precip <- read.csv("YavapaiPrecip.csv")
Precip <- Precip %>%
group_by(Year, Month) %>%
summarise(mean_value = mean(`Value`, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = Month, values_from = mean_value, names_prefix = "Month_") %>%
arrange(Year)
# Rename columns to month names
month_names <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Assign the month names to the columns (excluding the "Year" column)
colnames(Precip)[2:13] <- month_names
# View the resulting data
print(Precip)
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "exact",
var_names = "MeanFlow")
# Combine all steps into a single code chunk
# Align datasets and prepare for analysis
common_years <- Reduce(intersect, list(Allcrn$Year, monthly_means$Year))
# Clean and prepare the `Allcrn` dataset
Allcrn <- Allcrn %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)          # Remove duplicates
# Clean and prepare the `monthly_means` dataset
monthly_means <- monthly_means %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)          # Remove duplicates
# Perform DCC analysis
Response <- dcc(
chrono = Allcrn,
climate = monthly_means,
boot = "exact",
var_names = "MeanFlow"
)
# Plot the results
plot(Response)
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "exact",
var_names = "MeanFlow")
plot(Response)
#STD bootstrap, April is usually significant
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "std",
# selection = -11:6,
var_names = "MeanFlow")
plot(Response)
MeanTemp <- MeanTemp %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  MeanTemp,
boot = "stationary",
selection = 4:10,
var_names = "MeanTemp")
plot(ResponseTemp)
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "exact",
var_names = "MeanFlow")
plot(Response)
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "exact",
var_names = "MeanFlow")
plot(Response)
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "exact",
var_names = "MeanFlow")
plot(Response)
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  MeanTemp,
boot = "stationary",
selection = 4:10,
var_names = "MeanTemp")
plot(ResponseTemp)
```
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  MeanTemp,
boot = "stationary",
selection = 4:10,
var_names = "MeanTemp")
plot(ResponseTemp)
```
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  MeanTemp,
boot = "stationary",
selection = 4:10,
var_names = "MeanTemp")
plot(ResponseTemp)
```
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  MeanTemp,
boot = "stationary",
selection = -4:10,
var_names = "MeanTemp")
plot(ResponseTemp)
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  MeanTemp,
boot = "stationary",
selection = 1:12,
var_names = "MeanTemp")
plot(ResponseTemp)
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  MeanTemp,
boot = "stationary",
selection = 1:12,
var_names = "MeanTemp")
plot(ResponseTemp)
ResponseTemp <- dcc(
chrono = AllCorcrn,
climate =  MeanTemp,
boot = "stationary",
selection = 1:12,
var_names = "MeanTemp")
plot(ResponseTemp)
Precip <- Precip %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)
PrecipResponse <- dcc(
chrono = Allcrn,
climate =  Precip,
boot = "std",
# selection = -11:6,
var_names = "MeanFlow")
plot(PrecipResponse)
PrecipResponse <- dcc(
chrono = Allcrn,
climate =  Precip,
boot = "exact",
# selection = -11:6,
var_names = "MeanFlow")
plot(PrecipResponse)
ResponseSeas <- seascorr(
chrono = Childs_rwl_crn,
climate =  list(monthly_means, MeanTemp),
#ci = .1,
var_names = c("MeanFlow", "Temp"))
Response <- dcc(
chrono = AllCorcrn,
climate =  monthly_means,
boot = "std",
# selection = -11:6,
var_names = "MeanFlow")
plot(Response)
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "std",
var_names = "MeanFlow")
plot(Response)
#Mean Flows STD bootstrap, April is usually significant
Response <- dcc(
chrono = AllCorcrn,
climate =  monthly_means,
boot = "std",
# selection = -11:6,
var_names = "MeanFlow")
plot(Response)
Response <- dcc(
chrono = Allcrn,
climate =  monthly_means,
boot = "std",
var_names = "MeanFlow")
plot(Response)
#Mean Flows STD bootstrap, April is usually significant
Response <- dcc(
chrono = AllCorcrn,
climate =  monthly_means,
boot = "std",
# selection = -11:6,
var_names = "MeanFlow")
plot(Response)
ResponseSeas <- seascorr(
chrono = Childs_rwl_crn,
climate =  list(monthly_means, MeanTemp),
#ci = .1,
var_names = c("MeanFlow", "Temp"))
ResponseSeas <- seascorr(
chrono = Allcrn,
climate =  list(monthly_means, MeanTemp),
#ci = .1,
var_names = c("MeanFlow", "Temp"))
plot(ResponseSeas)
summary(ResponseSeas)
