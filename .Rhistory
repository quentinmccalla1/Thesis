Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
)
library(dplyr)
library(tidyr)
library(stringr)
# Pivot longer and handle numeric and non-numeric separately
long_data <- brap_data %>%
pivot_longer(
cols = starts_with("Plot") | starts_with("Diameter") | starts_with("Height") | starts_with("HDR"),
names_to = c("Variable", "Date"),
names_sep = "(?<=\\D)(?=\\d)",  # Separate the alphabetic part (Variable) from the numeric part (Date)
values_to = "Value"
) %>%
mutate(
# Extract plot and date information
Plot = str_extract(Variable, "Plot\\d+"),  # Extract plot number
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.character(Value)  # Temporarily set Value as character to handle both numeric and non-numeric
) %>%
# Convert Value to numeric where possible
mutate(Value = ifelse(Variable %in% c("Diameter", "Height", "HDR"), as.numeric(Value), Value)) %>%
select(Plot, Date, Variable, Value)  # Final column order
library(dplyr)
library(tidyr)
library(stringr)
# Reshape the data into long format
long_data <- brap_data %>%
pivot_longer(
cols = starts_with("Plot") | starts_with("Diameter") | starts_with("Height") | starts_with("HDR"),
names_to = c("Variable", "Date"),
names_sep = "(?<=\\D)(?=\\d)",  # Separate letters (Variable) from digits (Date)
values_to = "Value"
) %>%
# Extract Plot and Date information
mutate(
Plot = str_extract(Variable, "Plot\\d+"),  # Extract Plot number (e.g., Plot1, Plot2, ...)
Plot = str_replace(Plot, "Plot", ""),  # Remove the "Plot" part to just keep the number
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
) %>%
# Select the desired columns in the desired order
select(Plot, Date, Variable, Value)
library(dplyr)
library(tidyr)
library(stringr)
# Separate the numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))
non_numeric_columns <- brap_data %>%
select(starts_with("Plot"))
# Pivot longer the numeric columns (Diameter, Height, HDR)
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=\\D)(?=\\d)",  # Separate the variable name from the date (digits)
values_to = "Value"
) %>%
mutate(
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
)
library(dplyr)
library(tidyr)
library(stringr)
# Separate the numeric and non-numeric columns
numeric_columns <- brap_data %>%
select(starts_with("Diameter") | starts_with("Height") | starts_with("HDR"))
# Pivot longer the numeric columns (Diameter, Height, HDR)
long_numeric <- numeric_columns %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Date"),
names_sep = "(?<=\\D)(?=\\d)",  # Separate the variable name from the date (digits)
values_to = "Value"
) %>%
mutate(
Date = as.numeric(Date),  # Convert Date to numeric
Value = as.numeric(Value)  # Ensure Value is numeric
)
knitr::opts_chunk$set(echo = TRUE)
brap_data <- read_csv("BRAPALL.csv")
install.packages("tidyverse",repos = "https://cloud.r-project.org")
install.packages("gridExtra")
install.packages("tidyverse", repos = "https://cloud.r-project.org")
install.packages("grid")
library(grid)
library(kableExtra)
library(tidyverse)
library(knitr)
brap_data <- read_csv("BRAPALL.csv")
brap_data <- read_csv("BRAPALL.csv")
View(brap_data)
# Assuming 'data' is your dataframe with the columns Plot, Date, Variable, and Value
data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for the specific Plot and Visit
group_by(Variable) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calculate mean for each variable
# Assuming 'data' is your dataframe with the columns Plot, Date, Variable, and Value
brap_data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for the specific Plot and Visit
group_by(Variable) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calculate mean for each variable
View(brap_data)
# Assuming 'data' is your dataframe with the columns Plot, Date, Variable, and Value
class(brap_data)
brap_data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Variable) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calculate mean for each Variable
brap_data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Diameter) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calculate mean for each Variable
brap_data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Diameter)
brap_data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Diameter) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calculate mean for each Variable
brap_data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Diameter) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Diameter, na.rm = TRUE))  # Calculate mean for each Variable
brap_data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Variable) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Diameter, na.rm = TRUE))  # Calculate mean for each Variable
brap_data %>%
filter(Plot == 1, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Plot) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Diameter, na.rm = TRUE))  # Calculate mean for each Variable
brap_data %>%
filter(Plot == 2, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Plot) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Diameter, na.rm = TRUE))  # Calculate mean for each Variable
brap_data %>%
filter(Plot == 8, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Plot) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Diameter, na.rm = TRUE))  # Calculate mean for each Variable
# List of variable names to calculate the means
variables <- c("Diameter", "Height", "HDR")
# Create an empty list to store results
results <- list()
# Loop through each variable
for (var in variables) {
# Calculate the mean for each plot and visit for the current variable
mean_values <- brap_data %>%
filter(Visit == 102023) %>%  # Filter for the specified visit
group_by(Plot) %>%  # Group by plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE))  # Use .data[[var]] to refer to the current variable
# Store the result in the list
results[[var]] <- mean_values
}
# Combine the results into one data frame
final_results <- bind_rows(results, .id = "Variable")
# View the final result
print(final_results)
View(final_results)
# List of variable names to calculate the means
variables <- c("Diameter", "Height", "HDR")
# Create an empty list to store results
results <- list()
# Loop through each variable
for (var in variables) {
# Calculate the mean for each plot and visit for the current variable
mean_values <- brap_data %>%
filter(Visit == 102023) %>%  # Filter for the specified visit
group_by(Plot) %>%  # Group by plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE))  # Calculate mean and remove NAs
# Store the result in the list
results[[var]] <- mean_values
}
# Combine the results into one data frame
final_results <- bind_rows(results, .id = "Variable")
# View the final result
print(final_results)
View(final_results)
library(dplyr)
# Loop through each variable (Diameter, Height, HDR)
variables <- c("Diameter", "Height", "HDR")
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == 102023) %>%  # Filter for the specific Visit (102023)
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name to the result
mean_value$Variable <- var
# Bind to the results
results <- bind_rows(results, mean_value)
}
# View the final results
print(results)
View(results)
library(dplyr)
# Loop through each variable (Diameter, Height, HDR)
variables <- c("Diameter", "Height", "HDR")
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == 62024) %>%  # Filter for the specific Visit (102023)
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name to the result
mean_value$Variable <- var
# Bind to the results
results <- bind_rows(results, mean_value)
}
# View the final results
print(results)
View(results)
library(dplyr)
# Loop through each variable (Diameter, Height, HDR)
variables <- c("Diameter", "Height", "HDR")
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == 102024) %>%  # Filter for the specific Visit (102023)
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name to the result
mean_value$Variable <- var
# Bind to the results
results <- bind_rows(results, mean_value)
}
# View the final results
print(results)
# Run ANOVA model
anova_model <- aov(Value ~ Variable * Date, data = brap_data)
str(brap_data)
brap_data <- brap_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
brap_data %>%
filter(Plot == 8, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
group_by(Plot) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
summarise(mean_value = mean(Diameter, na.rm = TRUE))  # Calculate mean for each Variable
library(dplyr)
str(brap_data)
# Loop through each variable (Diameter, Height, HDR)
variables <- c("Diameter", "Height", "HDR")
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == 102024) %>%  # Filter for the specific Visit (102023)
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name to the result
mean_value$Variable <- var
# Bind to the results
results <- bind_rows(results, mean_value)
}
# View the final results
print(results)
View(results)
# Loop through each variable (Diameter, Height, HDR)
variables <- c("Diameter", "Height", "HDR")
results102023 <- data.frame()  # Empty data frame to store the results
for (var in variables) {
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == 102024) %>%  # Filter for the specific Visit (102023)
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name to the result
mean_value$Variable <- var
# Bind to the results
results <- bind_rows(results, mean_value)
}
# View the final results
print(results)
# Loop through each variable (Diameter, Height, HDR)
variables <- c("Diameter", "Height", "HDR")
results102023 <- data.frame()  # Empty data frame to store the results
for (var in variables) {
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == 102024) %>%  # Filter for the specific Visit (102023)
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name to the result
mean_value$Variable <- var
# Bind to the results
results <- bind_rows(results, mean_value)
}
# View the final results
print(results102023)
# Loop through each variable (Diameter, Height, HDR)
variables <- c("Diameter", "Height", "HDR")
results102023 <- data.frame()  # Empty data frame to store the results
for (var in variables) {
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == 102024) %>%  # Filter for the specific Visit (102023)
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name to the result
mean_value$Variable <- var
# Bind to the results
results <- bind_rows(results, mean_value)
}
# View the final results
print(results102023)
# View the final results
print(results)
# Run ANOVA model
anova_model <- aov(Value ~ Variable * Visit, data = brap_data)
# Run ANOVA model
anova_model <- aov(Diameter ~ Height * Visit, data = brap_data)
tukey_results <- TukeyHSD(anova_model)
View(anova_model)
# Run ANOVA model
anova_model <- aov(Diameter ~ Height ~ HDR * Visit, data = brap_data)
anova_model <- aov(HDR * Visit, data = brap_data)
# Run ANOVA model
anova_model <- aov(Diameter * Visit, data = brap_data)
View(brap_data)
# Run ANOVA model
anova_model <- aov(Height * Visit, data = brap_data)
View(brap_data)
# Run ANOVA model
colnames(brap_data)
colnames(brap_data)
anova_model <- aov(Height * Visit, data = brap_data)
anova_model <- aov(Height ~ Visit, data = brap_data)
tukey_results <- TukeyHSD(anova_model)
colnames(brap_data)
anova_model <- aov(Height ~ Visit, data = brap_data)
tukey_results <- TukeyHSD(anova_model)
brap_data$Visit <- as.factor(brap_data$Visit)
anova_model <- aov(Height ~ Visit, data = brap_data)
tukey_results <- TukeyHSD(anova_model)
# Run ANOVA model
brap_data$Visit <- as.factor(brap_data$Visit)
anova_model <- aov(Height ~ Visit, data = brap_data)
tukey_results <- TukeyHSD(anova_model)
# Function to extract Tukey's results into a data frame
extract_tukey_results <- function(tukey_result, comparison_name) {
if (comparison_name %in% names(tukey_result)) {
tukey_df <- as.data.frame(tukey_result[[comparison_name]])
if (nrow(tukey_df) > 0) {
tukey_df$Comparison <- rownames(tukey_df)
rownames(tukey_df) <- NULL
colnames(tukey_df) <- c("Estimate", "Lower_CI", "Upper_CI", "P_Value", "Comparison")
return(tukey_df[, c("Comparison", "Estimate", "Lower_CI", "Upper_CI", "P_Value")])
}
}
return(data.frame(Comparison = NA, Estimate = NA, Lower_CI = NA, Upper_CI = NA, P_Value = NA))
}
# Extract Tukey results for the interaction term
tukey_results_interaction_df <- extract_tukey_results(tukey_results, "Variable:Date")
selected_rows <- c(3, 6, 11, 14, 18, 21, 24, 29, 33)
selected_data <- data.frame()
# Loop through the selected rows and add them to the data frame
for (row in selected_rows) {
if (row <= nrow(tukey_results_interaction_df)) {
selected_data <- rbind(selected_data, tukey_results_interaction_df[row, ])
}
}
# Generate the kable table
selected_data %>%
kable("html", caption = "Selected Rows from Tukey Test") %>%
kable_styling(full_width = FALSE) %>%
row_spec(which(selected_data$P_Value < 0.05), background = "lightgreen")
View(extract_tukey_results)
View(tukey_results_interaction_df)
View(anova_model)
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- var
mean_value$Visit <- visit
# Bind to the results
results <- bind_rows(results, mean_value)
}
}
# View the final results
print(results)
View(results)
# Run separate ANOVA models for each variable
variables <- c("Height", "Diameter", "HDR")
results <- list()  # Create an empty list to store results
for (var in variables) {
anova_result <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
results[[var]] <- summary(anova_result)  # Store the summary for each variable
}
# Check the results for each variable
results
TukeyHSD(results)
# Run separate ANOVA models for each variable
variables <- c("Height", "Diameter", "HDR")
results <- list()  # Create an empty list to store results
for (var in variables) {
anova_result <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
results[[var]] <- summary(anova_result)  # Store the summary for each variable
}
# Check the results for each variable
results
TukeyHSD(results)
tukey_results <- TukeyHSD(anova_model)
summary(tukey_results)
summary(tukey_results)
View(tukey_results_interaction_df)
# Ensure Visit is a factor
brap_data$Visit <- as.factor(brap_data$Visit)
# Run the ANOVA model for Height with Visit as a factor
anova_model <- aov(Height ~ Visit, data = brap_data)
# Check the summary of the ANOVA model
summary(anova_model)
# Post-hoc test if the ANOVA shows significant results
tukey_results <- TukeyHSD(anova_model)
# View the Tukey post-hoc results
summary(tukey_results)
# View the Tukey post-hoc results
summary(tukey_results)
# Ensure Visit is a factor
brap_data$Visit <- as.factor(brap_data$Visit)
# Run the ANOVA model for Height with Visit as a factor
anova_model <- aov(Height ~ Visit, data = brap_data)
# Check the summary of the ANOVA model
summary(anova_model)
# Post-hoc test if the ANOVA shows significant results
tukey_results <- TukeyHSD(anova_model)
# View the Tukey post-hoc results
summary(tukey_results)
tukey_results$Visit
tukey_results$Diameter
# Run separate ANOVA models for each variable
variables <- c("Height", "Diameter", "HDR")
results <- list()  # Create an empty list to store results
for (var in variables) {
anova_result <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
results[[var]] <- summary(anova_result)  # Store the summary for each variable
}
# Check the results for each variable
results
tukey_results <- TukeyHSD(anova_model)
tukey_results$Visit
# Run separate ANOVA models for each variable
variables <- c("Height", "Diameter", "HDR")
results <- list()  # Create an empty list to store results
for (var in variables) {
anova_result <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
results[[var]] <- summary(anova_result)  # Store the summary for each variable
}
# Check the results for each variable
results
tukey_results <- TukeyHSD(anova_model)
tukey_results$Visit
# Run the ANOVA model for HDR with Visit as a factor
anova_hdr <- aov(HDR ~ Visit, data = brap_data)
# Check the summary of the ANOVA model
summary(anova_hdr)
# If the ANOVA is significant, run Tukey's post-hoc test
tukey_hdr <- TukeyHSD(anova_hdr)
# View the Tukey results for Visit
summary(tukey_hdr$Visit)
# View the Tukey results for Visit
summary(tukey_hdr$Visit)
# If the ANOVA is significant, run Tukey's post-hoc test
tukey_hdr <- TukeyHSD(anova_hdr)
View(tukey_hdr)
# Check the summary of the ANOVA model
summary(anova_hdr)
# View the Tukey results for Visit
summary(tukey_hdr$Visit)
View(tukey_hdr)
# View the Tukey results for Visit
summary(tukey_hdr$Visit)
tukey_hdr$Visit
# Run the ANOVA model for HDR with Visit as a factor
anova_hdr <- aov(HDR ~ Plot, data = brap_data)
# Run the ANOVA model for HDR with Visit as a factor
anova_hdr <- aov(HDR ~ Plot, data = brap_data)
# Check the summary of the ANOVA model
summary(anova_hdr)
# If the ANOVA is significant, run Tukey's post-hoc test
tukey_hdr <- TukeyHSD(anova_hdr)
brap_data$Plot <- as.factor(brap_data$Plot)
# Run the ANOVA model for HDR with Visit as a factor
anova_hdr <- aov(HDR ~ Plot, data = brap_data)
# Check the summary of the ANOVA model
summary(anova_hdr)
# If the ANOVA is significant, run Tukey's post-hoc test
tukey_hdr <- TukeyHSD(anova_hdr)
# View the Tukey results for Visit
tukey_hdr$Visit
# View the Tukey results for Visit
tukey_hdr$Plot
# Run the ANOVA model for HDR with Visit as a factor
anova_hdr <- aov(HDR ~ Visit, data = brap_data)
# Check the summary of the ANOVA model
summary(anova_hdr)
# If the ANOVA is significant, run Tukey's post-hoc test
tukey_hdr <- TukeyHSD(anova_hdr)
# View the Tukey results for Visit
tukey_hdr$Visit
View(anova_hdr)
