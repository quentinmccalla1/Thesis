library(dataRetrieval)   #https://waterdata.usgs.gov/blog/dataretrieval/
pcode <- readNWISpCode("all")
siteNo <- "09506000" #USGS streamflow gaging station number
pCode <- "00061" #calls for instantaneous peak
start.date <- "1984-05-31" #or period of interest (life span of trees)
end.date <- "2024-06-06"
VerdePeakQ <- readNWISpeak(siteNumbers = siteNo,
startDate = start.date,
endDate = end.date)
VerdePeakQ <- data.frame(VerdePeakQ)
VerdePeakQ$DayMonth <- format(as.Date(VerdePeakQ$peak_dt), "%m-%d") #pareses out months and years for further subsetting oand summarization f data
VerdePeakQ$Year <- format(as.Date(VerdePeakQ$peak_dt), "%y")
library(dataRetrieval)   #https://waterdata.usgs.gov/blog/dataretrieval/
pcode <- readNWISpCode("all")
siteNo <- "09506000" #USGS streamflow gaging station number
pCode <- "00061" #calls for instantaneous peak
start.date <- "1984-05-31" #or period of interest (life span of trees)
end.date <- "2024-06-06"
VerdePeakQ <- readNWISpeak(siteNumbers = siteNo,
startDate = start.date,
endDate = end.date)
VerdePeakQ <- data.frame(VerdePeakQ)
VerdePeakQ$DayMonth <- format(as.Date(VerdePeakQ$peak_dt), "%m-%d") #pareses out months and years for further subsetting oand summarization f data
VerdePeakQ$Year <- format(as.Date(VerdePeakQ$peak_dt), "%y")
VerdePeakQ
SnakeVerdePeakQ <- subset (VerdePeakQ, select = c(peak_dt, DayMonth, Year, peak_va))   #tidyverse command for subsetting and cleaning up data
names(SnakeVerdePeakQ)
min (VerdePeakQ$DayMonth) #4-30
max (VerdePeakQ$DayMonth) #6-24
min(VerdePeakQ$peak_va) #2910
max(VerdePeakQ$peak_va)  #15000
percentilesPKQ <- quantile(VerdePeakQ$peak_va, c(0.50, 0.95, 0.99, 1.00)) #this returns the median, 95th, 99th percentiles and the max
percentilesPKQ
install.packages("readxl")
library("readxl")
install.packages("readxl")
install.packages("readxl")
library("readxl")
View(ImageryAreas)
knitr::opts_chunk$set(echo = TRUE)
ImageryAreas <- read_excel("ImageryStatistics150m.xlsx")
install.packages("readxl")
library("readxl")
ImageryAreas <- read_excel("ImageryStatistics150m.xlsx")
View(ImageryAreas)
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
View(ImageryAreas)
library(ggplot2)
ggplot(data, aes(x = Time, y = Area, color = Class)) +
geom_line(size = 1) + # Line plot
geom_point(size = 2) + # Add points
labs(
title = "Changes in Class Area Over Time",
x = "Time",
y = "Area",
color = "Class"
) +
theme_minimal() + # Use a clean theme
theme(
text = element_text(size = 12),
legend.position = "bottom"
)
colnames(ImageryAreas)
library(tidyverse)
# Reshape and Plot in One Go
ImageryAreas %>%
pivot_longer(
cols = starts_with("X"),  # Select year columns
names_to = "Year",        # Create a "Year" column
values_to = "Area"        # Create an "Area" column
) %>%
mutate(
Year = as.numeric(gsub("X", "", Year)),  # Remove the "X" and convert to numeric
Class = case_when(
str_detect(name, "Sheep") ~ "Sheep",
str_detect(name, "Childs") ~ "Childs",
str_detect(name, "Beasley") ~ "Beasley",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(Area)) %>%  # Remove rows with missing Area
ggplot(aes(x = Year, y = Area, color = Class, group = Class)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
labs(
title = "Changes in Class Area Over Time",
x = "Year",
y = "Area",
color = "Class"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
legend.position = "bottom"
)
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
colnames(ImageryAreas)
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
View(ImageryAreas)
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
View(ImageryAreas)
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
colnames(ImageryAreas)
library(tidyverse)
# Reshape and Plot in One Go
ImageryAreas %>%
pivot_longer(
cols = starts_with("X"),  # Select year columns
names_to = "Year",        # Create a "Year" column
values_to = "Area"        # Create an "Area" column
) %>%
mutate(
Year = as.numeric(gsub("X", "", Year)),  # Remove the "X" and convert to numeric
Class = case_when(
str_detect(name, "Sheep") ~ "Sheep",
str_detect(name, "Childs") ~ "Childs",
str_detect(name, "Beasley") ~ "Beasley",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(Area)) %>%  # Remove rows with missing Area
ggplot(aes(x = Year, y = Area, color = Class, group = Class)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
labs(
title = "Changes in Class Area Over Time",
x = "Year",
y = "Area",
color = "Class"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
legend.position = "bottom"
)
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
colnames(ImageryAreas)
head(ImageryAreas)
colnames(ImageryAreas)
# Check the structure of the dataset
str(ImageryAreas)
library(tidyverse)
# Reshape and process the data
tidy_data <- ImageryAreas %>%
# Reshape all year columns into long format
pivot_longer(
cols = starts_with("X"),  # Select year columns
names_to = "Year",        # New column for year
values_to = "Area"        # New column for area
) %>%
# Identify the class from column names
mutate(
Year = as.numeric(gsub("\\D", "", Year)),  # Extract numeric year
Class = case_when(
str_detect(name, "\\.1") ~ "Childs",
str_detect(name, "\\.2") ~ "Beasley",
TRUE ~ "Sheep"  # Default to Sheep
)
) %>%
# Remove rows with missing or NA values
filter(!is.na(Area)) %>%
select(Class, Year, Area)  # Keep only relevant columns
library(tidyverse)
# Reshape and process the data
tidy_data <- ImageryAreas %>%
# Reshape all year columns into long format
pivot_longer(
cols = starts_with("X"),  # Select year columns
names_to = "Year",        # New column for year
values_to = "Area"        # New column for area
) %>%
# Identify the class from column names
mutate(
Year = as.numeric(gsub("\\D", "", Year)),  # Extract numeric year
Class = case_when(
str_detect(name, "\\.1") ~ "Childs",
str_detect(name, "\\.2") ~ "Beasley",
TRUE ~ "Sheep"  # Default to Sheep
)
) %>%
# Remove rows with missing or NA values
filter(!is.na(Area)) %>%
select(Class, Year, Area)  # Keep only relevant columns
library(tidyverse)
# Reshape and process the data
tidy_data <- ImageryAreas %>%
# Reshape all year columns into long format
pivot_longer(
cols = starts_with("X"),  # Select year columns
names_to = "Year",        # New column for year
values_to = "Area"        # New column for area
) %>%
# Identify the class from original column names
mutate(
Year = as.numeric(gsub("\\D", "", Year)),  # Extract numeric year
Class = case_when(
str_detect(Year, "\\.1$") ~ "Childs",    # Check for '.1' suffix
str_detect(Year, "\\.2$") ~ "Beasley",  # Check for '.2' suffix
TRUE ~ "Sheep"                         # Default to Sheep
)
) %>%
# Remove rows with missing or NA values
filter(!is.na(Area)) %>%
select(Class, Year, Area)  # Keep only relevant columns
# Create the plot
ggplot(tidy_data, aes(x = Year, y = Area, color = Class, group = Class)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
labs(
title = "Changes in Class Area Over Time",
x = "Year",
y = "Area",
color = "Class"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
legend.position = "bottom"
)
knitr::opts_chunk$set(echo = TRUE)
mean_value <- brap_data %>%
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),     # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),
mean_hdr = mean(HDR, na.rm = TRUE ), # Calculate mean Diameter
.groups = "drop" , # Ungroup the data after summarisation
arrange(Visit)  # Sort by Visit (date)
)
mean_value <- brap_data %>%
mutate(Visit = as.Date(as.character(Visit), format = "%Y%m%d")) %>%  # Convert Visit to Date
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),     # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),
mean_hdr = mean(HDR, na.rm = TRUE), # Calculate mean Diameter
.groups = "drop"  # Ungroup the data after summarisation
) %>%
arrange(Visit)  # Sort by Visit (now a Date)
kable(mean_value,
caption = "BRAP Means")%>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
mean_value
kable(mean_value,
caption = "BRAP Means")%>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
library(kableExtra)
mean_value <- brap_data %>%
mutate(Visit = as.Date(as.character(Visit), format = "%Y%m%d")) %>%  # Convert Visit to Date
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),     # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),
mean_hdr = mean(HDR, na.rm = TRUE), # Calculate mean Diameter
.groups = "drop"  # Ungroup the data after summarisation
) %>%
arrange(Visit)  # Sort by Visit (now a Date)
kable(mean_value,
caption = "BRAP Means")%>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
mean_value <- brap_data %>%
mutate(Visit = as.Date(as.character(Visit), format = "%Y%m%d")) %>%  # Convert Visit to Date
filter(!is.na(Visit)) %>%  # Remove rows where Visit is NA
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),     # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),
mean_hdr = mean(HDR, na.rm = TRUE), # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarisation
) %>%
arrange(Visit)  # Sort by Visit (now a Date)
kable(mean_value,
caption = "BRAP Means")%>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
mean_value <- brap_data %>%
mutate(Visit = as.Date(as.character(Visit), format = "%Y%m%d")) %>%  # Convert Visit to Date
filter(!is.na(Visit)) %>%  # Remove rows where Visit is NA
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),
mean_Diameter = mean(Diameter, na.rm = TRUE),
mean_hdr = mean(HDR, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(Visit)
kable(mean_value,
caption = "BRAP Means") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
mean_value_by_visit <- brap_data %>%
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Sort by Visit (ascending)
# Display the table
kable(mean_value_by_visit, caption = "BRAP Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
custom_order <- c("102023", "62024", "102024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- brap_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "BRAP Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
custom_order <- c("102023", "62024", "102024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
# View the first few rows and column names
head(ImageryAreas)
colnames(ImageryAreas)
# Check the structure of the dataset
str(ImageryAreas)
ImageryAreas <- read.csv("ImageryStatistics150m.csv")
# View the first few rows and column names
head(ImageryAreas)
colnames(ImageryAreas)
# Check the structure of the dataset
str(ImageryAreas)
View(ImageryAreas)
# Subset data for one site and class
subset_data <- subset(ImageryAreas, Site == "Sheep" & Class == "Water")
View(subset_data)
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = subset_data)
# Load data
data <- read.csv("ImageryStatistics150m.csv")
# Create a contingency table
contingency_table <- table(data$Year, data$Class)
# Perform Chi-Squared Test
result <- chisq.test(contingency_table)
# View the result
print(result)
# Perform Chi-Squared Test
result <- chisq.test(data)
# View the result
print(result)
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = ImageryAreas)
# Subset data for one site and class
subset_data <- subset(ImageryAreas, Site == "Sheep" & Class == "forest")
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = subset_data)
View(ImageryAreas)
# Subset data for one site and class
subset_data <- subset(ImageryAreas, Site == "Sheep" & Class == "Forest")
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = subset_data)
subset_data <- subset(ImageryAreas, Site == "Sheep" & Class == "Barren")
# Perform Kruskal-Wallis Test
kruskal.test(Area ~ Year, data = subset_data)
# Perform Chi-Squared Test
result <- chisq.test(data)
# Perform Chi-Squared Test
result <- chisq.test(ImageryAreas)
# Perform Chi-Squared Test
result <- aov(data)
# Load data
data <- read.csv("ImageryStatistics150m.csv")
# Create a contingency table
contingency_table <- table(data$Year, data$Class)
# Perform Chi-Squared Test
result <- chisq.test(contingency_table)
# View the result
print(result)
# View the result
print(contingency_table)
View(data)
# Create a contingency table
contingency_table <- table(data$Year, data$Class)
head(data)
summary(data)
forest_data <- subset(data, Class == "Forest")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
summary(anova_result)
TukeyHSD(anova_result)
TukeyHSD(anova_result)
forest_data <- subset(data, Class == "Forest")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest")
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
levels(forest_data$Year)
View(forest_data)
forest_data <- subset(data, Class == "Forest", Site = "Sheep")
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
TukeyHSD(anova_result)
summary(anova_result)
forest_data$Year <- as.factor(forest_data$Year)
TukeyHSD(anova_result)
levels(forest_data$Year)
levels(forest_data$Year)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ Year, data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
TukeyHSD(anova_result)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
levels(forest_data$Year)
forest_data$Year <- as.factor(forest_data$Year)
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
forest_data$Year <- as.factor(forest_data$Year)
levels(forest_data$Year)
forest_data$Year <- as.factor(forest_data$Year)
levels(forest_data$Year)
forest_data <- subset(data, Class == "Forest"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
boxplot(Area ~ Year, data = forest_data)
plot(anova_result)  # To check residuals and diagnostic plots
# Bonferroni
pairwise.t.test(forest_data$Area, forest_data$Year, p.adjust.method = "bonferroni")
forest_data$Year <- as.factor(forest_data$Year)
levels(forest_data$Year)
forest_data <- subset(data, Class == "Barren"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
summary(anova_result)
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
tukey <- TukeyHSD(anova_result)
forest_data$Year <- as.factor(forest_data$Year)
levels(forest_data$Year)
forest_data <- subset(data, Class == "Barren"& Site == "Sheep")
# Perform ANOVA
anova_result <- aov(Area ~ factor(Year), data = forest_data)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
