UBcrn <- chron(UB)
LBcrn <- chron(LB)
Allcrn <- chron(ALL)
AllCorcrn <- chron(ALLCor)
Crosscrn <- chron(Crossdated)
plot.crn(Sheepcrn, add.spline = TRUE, nyears = 5)
plot.crn(UBcrn, add.spline = TRUE, nyears = 5)
plot.crn(LBcrn, add.spline = TRUE, nyears = 5)
plot.crn(Childscrn, add.spline = TRUE, nyears = 5)
plot.crn(AllCorcrn, add.spline = TRUE, nyears = 5)
plot.crn(Allcrn, add.spline = TRUE, nyears = 5)
plot.crn(Crosscrn, add.spline = TRUE, nyears = 5)
Sheepcrn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childscrn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UBcrn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LBcrn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
Allcrn$Year <- seq(1988, by = 1, length.out = nrow(Allcrn))
Crosscrn$Year <- seq(1994, by = 1, length.out = nrow(Crosscrn))
# Combine all datasets into one
Sheepcrn$Dataset <- "Sheep Bridge"
Childscrn$Dataset <- "Childs"
UBcrn$Dataset <- "Upper Beasley"
LBcrn$Dataset <- "Lower Beasley"
Allcrn$Dataset <- "All"
Crosscrn$Dataset <- "Correlated"
# Combine datasets
combined_data <- rbind(Sheepcrn, Childscrn, UBcrn, LBcrn, Allcrn, Crosscrn)
# Create the ggplot with legend
ggplot(combined_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(data = Crosscrn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
geom_line(size = .5) +  # Line thickness
labs(x = "Year", y = "RWI", title = "Multiple Line Graphs") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange"))+
geom_hline(yintercept = 1, linetype= "dashed", color = "black")+
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
AllBAI <- bai.in(ALL, d2pith = NULL)
AllBAIchrn <- chron(AllBAI)
plot.crn(AllBAIchrn)
AllCorBAI <- bai.in(ALLCor, d2pith = NULL)
AllCorBAIchrn <- chron(AllCorBAI)
plot.crn(AllCorBAIchrn)
ChildsBAI <- bai.in(Childs, d2pith = NULL)
ChildsBAIchrn <- chron(ChildsBAI)
plot.crn(ChildsBAIchrn)
SheepBAI <- bai.in(Sheep, d2pith = NULL)
SheepBAIchrn <- chron(SheepBAI)
plot.crn(SheepBAIchrn)
UBBAI <- bai.in(UB, d2pith = NULL)
UBBAIchrn <- chron(UBBAI)
plot.crn(UBBAIchrn)
LBBAI <- bai.in(LB, d2pith = NULL)
LBBAIchrn <- chron(LBBAI)
plot.crn(LBBAIchrn)
CrossBAI <- bai.in(Crossdated, d2pith = NULL)
CrossBAIchrn <- chron(CrossBAI)
plot.crn(CrossBAIchrn)
SheepBAIchrn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
ChildsBAIchrn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UBBAIchrn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LBBAIchrn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
AllBAIchrn$Year <- seq(1988, by = 1 , length.out = nrow(AllBAIchrn))
CrossBAIchrn$Year <- seq(1994, by= 1, length.out= nrow(CrossBAIchrn))
# Plot with ggplot2
# Combine all datasets into one
SheepBAIchrn$Dataset <- "Sheep Bridge"
ChildsBAIchrn$Dataset <- "Childs"
UBBAIchrn$Dataset <- "Upper Beasley"
LBBAIchrn$Dataset <- "Lower Beasley"
AllBAIchrn$Dataset <- "All"
CrossBAIchrn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(SheepBAIchrn, ChildsBAIchrn, UBBAIchrn, LBBAIchrn, AllBAIchrn, CrossBAIchrn)
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
geom_line(data = CrossBAIchrn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange")) +  # Custom colors
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
colnames(annual_means)
colnames(Crosscrn)
View(annual_means)
View(Crosscrn)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
merged_data <- merge(annualmeansCOR, Crosscrn, by = "Year" )
merged_data <- merge(annual_means, Crosscrn, by = "Year" )
View(merged_data)
cor(merged_data$mean_value, merged_data$std)
View(CampVerdeGuage)
CampVerdeGuage$Year <- format(your_data$Date, "%Y")
# Extract year and month
CampVerdeGuage$Year <- format(CampVerdeGuage$Date, "%Y")
CampVerdeGuage$Month <- format(CampVerdeGuage$Date, "%m")
winter_data <- CampVerdeGuage %>%
filter(Month %in% c("11", "12", "01", "02", "03"))
View(winter_data)
mean_winter_flow <- winter_data %>%
group_by(Year) %>%
summarise(mean_winter_flow = mean(Flow, na.rm = TRUE))  # Replace 'Flow' with your actual column name
# Check column names in the dataset
colnames(winter_data)
mean_winter_flow <- winter_data %>%
group_by(Year) %>%
summarise(mean_winter_flow = mean(Discharge, na.rm = TRUE))  # Repla
View(mean_winter_flow)
colnames(mean_winter_flow)
merged_data <- merge(annual_means, Crosscrn, mean_winter_flow by = "Year" )
merged_data <- merge(annual_means, Crosscrn, mean_winter_flow ,by = "Year" )
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
merged_data <- merge(annual_means, Crosscrn, mean_winter_flow ,by = "Year" )
merged_data1 <- merge(merged_data, mean_winter_flow ,by = "Year" )
View(merged_data1)
cor(merged_data1$mean_winter_flow, merged_data1$std)
cor(merged_data$mean_value, merged_data$std)
View(merged_data1)
View(CampVerdeGuage)
meanmin <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(min = min(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
View(meanmin)
View(meanmin)
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
meanmin$Year <- as.numeric(as.character(meanmin$Year))
merged_data2 <- merge(merged_data1, meanmin ,by = "Year" )
cor(merged_data2$min, merged_data2$std)
View(combinedBAI_data)
cor(merged_data$mean_value, merged_data$std)
cor(merged_data1$mean_winter_flow, merged_data1$std)
cor(merged_data2$min, merged_data2$std)
auto_model <- auto.arima(Crosscrn$std)
auto_model <- arima(Crosscrn$std)
View(auto_model)
residuals <- residuals(auto_model)
plot(merged_data$mean_value, merged_data$std, type = "o")
acf(merged_data$std)
Box.test(merged_data$std, lag = 10, type = "Ljung-Box")
Box.test(merged_data$std, lag = 5, type = "Ljung-Box")
Box.test(merged_data$std, lag = 1, type = "Ljung-Box")
lag.plot(merged_data$std, lag = 1)
#Childs
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge), log("y")) +
geom_line()+
labs(title = "Chlids")+
geom_vline(xintercept = as.Date("2023-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2021-10-14"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2019-06-08"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2017-06-04"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2015-06-01"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2013-06-05"), color = "red", linetype = "dashed", size = 1)+
geom_hline( yintercept = 52700, color= "blue", linetype = "dashed", size =1)+
annotate("text", x = as.Date("1990-04-01"), y = 52700,
label = "Restructuring Flow", color = "black", vjust = -1, size = 3)+
geom_hline(yintercept = 10500, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 10500, label ="Rejuvenating  flow"
, color ="black", vjust =-1, size = 3)
#Childs
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge), log("y")) +
geom_line()+
labs(title = "Chlids")+
geom_vline(xintercept = as.Date("2023-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2021-10-14"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2019-06-08"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2017-06-04"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2015-06-01"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2013-06-05"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2010-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_hline( yintercept = 52700, color= "blue", linetype = "dashed", size =1)+
annotate("text", x = as.Date("1990-04-01"), y = 52700,
label = "Restructuring Flow", color = "black", vjust = -1, size = 3)+
geom_hline(yintercept = 10500, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 10500, label ="Rejuvenating  flow"
, color ="black", vjust =-1, size = 3)
ggplot(data = annual_means, aes(x = Year, y = Mean)) +
geom_line() +
labs(title = "Mean Annual Values",
x = "Year",
y = "Mean Value") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(lubridate)
# Calculate mean annual values
annual_means <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(mean_value = mean(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
annual_means <- setNames(annual_means, c("Year", "Mean"))
# View the results
print(annual_means)
# Extract year and month
CampVerdeGuage$Year <- format(CampVerdeGuage$Date, "%Y")
CampVerdeGuage$Month <- format(CampVerdeGuage$Date, "%m")
# Filter for months between November and March
winter_data <- CampVerdeGuage %>%
filter(Month %in% c("11", "12", "01", "02", "03"))
# Check column names in the dataset
colnames(winter_data)
# Calculate the mean flow for each year
mean_winter_flow <- winter_data %>%
group_by(Year) %>%
summarise(mean_winter_flow = mean(Discharge, na.rm = TRUE))  # Replace 'Flow' with your actual column name
meanmin <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(min = min(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
PDSI <- read_csv("PDSI-AS-1994to2023.csv")
PDSI <- read_csv("PDSI-AZ-1994to2023.csv")
View(PDSI)
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Corrected here
summarise(mean_value = mean(Value, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
PDSI$Year <- as.Date(PDSI$Year)
# Calculate mean PDSI value per year
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
View(PDSImean)
PDSI$Year <- as.Date(PDSI$Year)
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
PDSI <- read_csv("PDSI-AZ-1994to2023.csv")
PDSI$Year <- as.Date(PDSI$Year)
# Calculate mean PDSI value per year
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
PDSI$Year <- as.Date(PDSI$Year)
PDSI <- read_csv("PDSI-AZ-1994to2023.csv")
PDSImean <- PDSI %>%
group_by(year = year(Year)) %>%  # Extract year using lubridate
summarise(mean_value = mean(Value, na.rm = TRUE))
PDSImean <- PDSI %>%
group_by(year = Year) %>%  # If 'Year' is already numeric
summarise(mean_value = mean(Value, na.rm = TRUE))
View(PDSImean)
YearlyTemp <- read_csv("AverageMonthlyTemp-YavapaiCounty_1993-2024")
YearlyTemp <- read_csv("AverageMonthlyTemp-YavapaiCounty_1993-2024.csv")
View(YearlyTemp)
MeanTemp <- YearlyTemp %>%
group_by(year = Year) %>%  # If 'Year' is already numeric
summarise(mean_value = mean(Value, na.rm = TRUE))
MeanTemp <- YearlyTemp %>%
group_by(year = Year) %>%  # If 'Year' is already numeric
summarise(mean_value = mean(`Degrees F`, na.rm = TRUE))
View(MeanTemp)
colnames(PDSImean)
colnames(PDSImean)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)
colnames(MeanTemp)
colnames(MeanTemp)[colnames(meanmin) == "year"] <- "Year"
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
AllMerged <- Reduce(function(x,y) merge(x,y, by = "Year", list(annual_means, PDSImean, MeanTemp)))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp))
View(AllMerged)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means,))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means))
View(AllMerged)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
View(AllMerged)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn$std))
View(Crosscrn)
colnames(Crosscrn)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
View(AllMerged)
AllMerged[,-5]
View(AllMerged)
AllMerged[,-5]
AllMerged[,-c(5)]
AllMerged[,-c(5)]
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
colnames(Crosscrn)[colnames(Crosscrn)] ==
annual_means$year <- as.numeric(as.character(annual_means$Date))
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Date))
annual_means$year <- as.numeric(as.character(annual_means$Date))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
AllMerged[,-c(5)]
colnames(AllMerged) <- c("Discharge","PDSI","Ferenheit")
cor(merged_data$mean_value, merged_data$std)
cor(merged_data1$mean_winter_flow, merged_data1$std)
cor(merged_data2$min, merged_data2$std)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
AllMerged[,-6]
colnames(AllMerged) <- c("Discharge","PDSI","Ferenheit")
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit")
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
colnames(Crosscrn)
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list(annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list( PDSImean, MeanTemp, annual_means, Crosscrn) )
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, PDSImean, MeanTemp, Crosscrn))
colnames(Crosscrn)[colnames(Crosscrn) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list( annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
Crosscrn$Year <- as.numeric(Crosscrn$Year)
# Corrected syntax
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year"), list( annual_means, PDSImean, MeanTemp, annual_means, Crosscrn) )
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, PDSImean, MeanTemp, Crosscrn))
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
View(AllMerged)
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit")
AllMerged[,-3]
AllMerged <- AllMerged[,-3]
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit")
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
AllMerged <- AllMerged[,-5]
AllMerged <- AllMerged[,-5]
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit","RWI","Sample Depth")
AllMerged <- AllMerged[,-7]
cor(AllMerged$RWI,AllMerged$PDSI)
cor(AllMerged$RWI,AllMerged$Ferenheit)
cor(AllMerged$RWI,AllMerged$Discharge)
remove(AllMerged)
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
colnames(Crosscrn)[colnames(Crosscrn) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
Crosscrn$Year <- as.numeric(Crosscrn$Year)
# Corrected syntax
# Standardize 'Year' column and remove duplicate 'annual_means'
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
View(annual_means)
# Load necessary libraries
library(dplyr)
library(lubridate)
# Calculate mean annual values
annual_means <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(mean_value = mean(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
annual_means <- setNames(annual_means, c("Year", "Mean"))
# View the results
print(annual_means)
# Check column names in both data frames
colnames(annual_means)
colnames(Crosscrn)
colnames(mean_winter_flow)
colnames(PDSImean)
colnames(MeanTemp)
# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
colnames(Crosscrn)[colnames(Crosscrn) == "year"] <- "Year"
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
Crosscrn$Year <- as.numeric(Crosscrn$Year)
# Corrected syntax
# Standardize 'Year' column and remove duplicate 'annual_means'
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE),
list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn))
AllMerged <- AllMerged[,-3]
AllMerged <- AllMerged[,-5]
AllMerged <- AllMerged[,-5]
AllMerged <- AllMerged[,-7]
colnames(AllMerged) <- c("Year", "Discharge","PDSI","Ferenheit","RWI","Sample Depth")
cor(AllMerged$RWI,AllMerged$Discharge)
cor(AllMerged$RWI,AllMerged$Discharge)
