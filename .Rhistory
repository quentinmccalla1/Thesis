ferenheit <- CeltoFer(celsius)
if(celsius == ferenheit){
print(paste("EQUAL", celsius, "C"))
break
}
celsius <- celsius +1
}
Cels <- c(-10,17,25,0,45,-37,24,6,100,11,-18)
Q1f <- function(Cels){
ferenheit1 <- (Cels* 9/5)+ 32
return(ferenheit1)
}
print(Q1f)
print(Q1f(Cels))
library(purrr)
?map()
map(Cels,ferenheit1)
map(Cels,Q1f)
tempConverter <- function(temp, from = "C", to ="F"){
# Conversion logic
if (from == "C" && to == "F") {
result <- (9/5 * temp) + 32
} else if (from == "F" && to == "C") {
result <- (5/9) * (temp - 32)
} else if (from == "C" && to == "K") {
result <- temp + 273.15
} else if (from == "K" && to == "C") {
result <- temp - 273.15
} else if (from == "F" && to == "K") {
result <- (5/9) * (temp - 32) + 273.15
} else if (from == "K" && to == "F") {
result <- (9/5) * (temp - 273.15) + 32
} else if (from == to) {
result <- temp  # If from and to units are the same, just return the temp
}
return(result)
}
}
print(paste("300 K to C:", temp_a))
temperatureConverter(300, from = "K", to = "C")
tempConverter(300, from = "K", to = "C")
tempConverter(100, from = "C", to = "F")
tempConverter(200, from = "F", to = "K")
volcano <- volcano
View(volcano)
nameOfClass(volcano)
name(volcano)
?volcano
?volcano
filled.contour(volcano)
Slope <- function(volcano){
slope <- diff(volcano)
absSlope <- abs(Slope)
return(absSlope)
}
filled.contour(Slope(Volcano))
filled.contour(Slope(volcano))
print(Slope(volcano))
Slope <- function(volcano){
slope <- diff(volcano)
absSlope <- abs(Sape)
return(absSlope)
}
print(Slope(volcano))
Slope <- function(volcano){
slope <- diff(volcano)
absSlope <- abs(slope)
return(absSlope)
}
print(Slope(volcano))
filled.contour(Slope(volcano))
Slope(volcano[,43])
plot(x= volcano[,43], y = Q4b)
Q4b <- Slope(volcano[,43])
plot(x= volcano[,43], y = Q4b)
length(volcano[,43])
length(Q4b)
plot(x= volcano[,43], y = Q4b)
# Extract the 43rd column from the volcano matrix (north-south stripe)
elevation_43rd_col <- volcano[, 43]
# Calculate the slopes using the slope function
Q4b <- slope(elevation_43rd_col)
# Extract the 43rd column from the volcano matrix (north-south stripe)
elevation_43rd_col <- volcano[, 43]
# Calculate the slopes using the slope function
Q4b <- Slope(elevation_43rd_col)
# Create a vector for the north-south position
# The length of Q4b is one less than the original elevation_43rd_col
north_south <- 1:length(Q4b)
# Plot the slope values against the north-south positions
plot(x = north_south, y = Q4b, type = "l", col = "blue",
xlab = "North-South Position", ylab = "Slope",
main = "Slopes Along the 43rd Column (North-South)")
# Extract the 43rd column from the volcano matrix (north-south stripe)
Vol43 <- volcano[, 43]
# Calculate the slopes using the slope function
Q4b <- Slope(Vol43)
# Create a vector for the north-south position
# The length of Q4b is one less than the original elevation_43rd_col
N-S <- 1:length(Q4b)
# Create a vector for the north-south position
# The length of Q4b is one less than the original elevation_43rd_col
NS <- 1:length(Q4b)
plot(x = north_south, y = Q4b, type = "l", col = "blue",
xlab = "North-South Position", ylab = "Slope",
main = "Slopes Along the 43rd Column (North-South)")
# Extract the 43rd column from the volcano matrix (north-south stripe)
Vol43 <- volcano[, 43]
# Calculate the slopes using the slope function
Q4b <- Slope(Vol43)
# Create a vector for the north-south position
# The length of Q4b is one less than the original elevation_43rd_col
NS <- 1:length(Q4b)
# Plot the slope values against the north-south positions
plot(x = north_south, y = Q4b, type = "l", col = "blue",
xlab = "North-South Position", ylab = "Slope",
main = "Slopes Along the 43rd Column (North-South)")
plot(x = north_south, y = Q4b, type = "l", col = "blue",
xlab = "North-South Position", ylab = "Slope",
main = "Slopes Along the 43rd Column (North-South)")
plot(x = NS, y = Q4b, type = "l", col = "blue",
xlab = "North-South Position", ylab = "Slope",
main = "Slopes Along the 43rd Column (North-South)")
?matrix()
nrow(volcano)
NS_matrix <- matrix(NA, nrow= 87, ncol = 1)
View(NS_matrix)
knitr::opts_chunk$set(echo = TRUE)
for(i in 1:10){
print(i)
}
print(i)
for (col in 1:1) {
elevation <- volcano[, col]
slopes <- Slope(elevation)
NS_matrix[1:(lenght(slopes)), 1] <- slopes
}
for (col in 1:1) {
elevation <- volcano[, col]
slopes <- Slope(elevation)
NS_matrix[1:(length(slopes)), 1] <- slopes
}
print(NS_matrix)
filled.contour(NS_matrix)
filled.contour(x= 87, y= 1, z= NS_matrix)
filled.contour(x= 87, y= 1, z = NS_matrix)
ncol(volcano)
filled.contour(x= 87, y= 61, z = NS_matrix)
x <- 1:nrow(volcano)  # x represents north-south positions (rows)
y <- 1:ncol(volcano)  # y represents east-west positions (columns)
# Now ns_slope_matrix should be filled and have the correct dimensions
# Ensure that the dimensions of ns_slope_matrix match the requirements for filled.contour()
z <- ns_slope_matrix
x <- 1:nrow(volcano)  # x represents north-south positions (rows)
y <- 1:ncol(volcano)  # y represents east-west positions (columns)
# Now ns_slope_matrix should be filled and have the correct dimensions
# Ensure that the dimensions of ns_slope_matrix match the requirements for filled.contour()
z <- NS_matrix
# Check the dimensions of the z matrix
print(dim(z))
# Use filled.contour to create the plot
filled.contour(x = x, y = y, z = z,
color.palette = terrain.colors,
xlab = "North-South Position",
ylab = "East-West Position",
main = "Slope Map of the Volcano")
n_rows <- nrow(volcano)  # Number of rows in the volcano matrix
n_cols <- ncol(volcano)  # Number of columns in the volcano matrix
# Create the x and y vectors
x <- 1:(n_rows - 1)  # Since slopes will be 1 shorter in the row direction
y <- 1:n_cols        # Columns remain the same
# Ensure the z matrix (slopes matrix) is of appropriate dimensions
z <- ns_slope_matrix[1:(n_rows - 1), ]  # This should match the dimensions of (n_rows-1) x n_cols
n_rows <- nrow(volcano)  # Number of rows in the volcano matrix
n_cols <- ncol(volcano)  # Number of columns in the volcano matrix
# Create the x and y vectors
x <- 1:(n_rows - 1)  # Since slopes will be 1 shorter in the row direction
y <- 1:n_cols        # Columns remain the same
# Ensure the z matrix (slopes matrix) is of appropriate dimensions
z <- NS_matrix[1:(n_rows - 1), ]  # This should match the dimensions of (n_rows-1) x n_cols
# Now use filled.contour to plot the slopes
filled.contour(x = x, y = y, z = z,
color.palette = terrain.colors,
xlab = "North-South Position",
ylab = "East-West Position",
main = "Slope Map of the Volcano")
filled.contour(x= 87, y= 61, z = NS_matrix)
max(Slope(NS_matrix))
max(Slope(NS_matrix), na.rm = TRUE)
max((NS_matrix), na.rm = TRUE)
max <- max((NS_matrix), na.rm = TRUE)
which(NS_matrix == max)
View(volcano)
?diff
ncol(volcano) #87
EW_matrix <- matrix(NA, nrow= 1, ncol = 60)
for (col in 1:1) {
elevation <- volcano[row ,]
slopes <- Slope(elevation)
ES_matrix[1:(length(slopes)), 1] <- slopes
}
for (col in 1:1) {
elevation <- volcano[row,]
slopes <- Slope(elevation)
ES_matrix[1:(length(slopes)), 1] <- slopes
}
for (row in 1:60) {
elevation <- volcano[row,]
slopes <- Slope(elevation)
ES_matrix[1:(length(slopes)), 1] <- slopes
}
EW_matrix[row, 1:length(slopes)] <- slopes
print(EW_matrix)
filled.contour(x= 87, y= 61, z = EW_matrix)
# Assuming volcano is the original matrix and EW_matrix is your matrix of E-W slopes
# Define the x and y vectors
x <- 1:nrow(volcano)  # Rows of the volcano matrix (North-South direction)
y <- 1:(ncol(volcano) - 1)  # Columns (East-West slopes are 1 shorter)
# z is the matrix of E-W slopes
z <- EW_matrix  # Make sure this matrix has dimensions nrow(volcano) x (ncol(volcano) - 1)
# Check the dimensions of the matrix
print(dim(z))
# Use filled.contour to plot the E-W slopes
filled.contour(x = x, y = y, z = z,
color.palette = terrain.colors,
xlab = "North-South Position",
ylab = "East-West Position",
main = "E-W Slope Map of the Volcano")
ncol(volcano) #61
EW_matrix <- matrix(NA, nrow = nrow(volcano), ncol = ncol(volcano)-1)
for (row in 1:60) {
elevation <- volcano[row,]
slopes <- Slope(elevation)
ES_matrix[1:(length(slopes)), 1] <- slopes
}
EW_matrix <- matrix(NA, nrow = nrow(volcano), ncol = ncol(volcano)-1)
ncol(volcano) #61
EW_matrix <- matrix(NA, nrow = nrow(volcano), ncol = ncol(volcano)-1)
for (row in 1:60) {
elevation <- volcano[row,]
slopes <- Slope(elevation)
ES_matrix[1:(length(slopes)), 1] <- slopes
}
ncol(volcano) #61
EW_matrix <- matrix(NA, nrow = nrow(volcano), ncol = ncol(volcano)-1)
for (row in 1:60) {
elevation <- volcano[row,]
slopes <- Slope(elevation)
EW_matrix[1:(length(slopes)), 1] <- slopes
}
EW_matrix[row, 1:length(slopes)] <- slopes
print(EW_matrix)
filled.contour(x= 87, y= 61, z = EW_matrix)
View(EW_matrix)
# Assuming volcano is the original matrix and EW_matrix is your matrix of E-W slopes
# Define the x and y vectors
x <- 1:nrow(volcano)  # Rows of the volcano matrix (North-South direction)
y <- 1:(ncol(volcano) - 1)  # Columns (East-West slopes are 1 shorter)
# z is the matrix of E-W slopes
z <- EW_matrix  # Make sure this matrix has dimensions nrow(volcano) x (ncol(volcano) - 1)
# Check the dimensions of the matrix
print(dim(z))
# Use filled.contour to plot the E-W slopes
filled.contour(x = x, y = y, z = z,
color.palette = terrain.colors,
xlab = "North-South Position",
ylab = "East-West Position",
main = "E-W Slope Map of the Volcano")
ncol(volcano) #61
EW_matrix <- matrix(NA, nrow = nrow(volcano), ncol = ncol(volcano)-1)
for (row in 1:60) {
elevation <- volcano[row,]
slopes <- Slope(elevation)
EW_matrix[1:(length(slopes)), 1] <- slopes
}
EW_matrix[row, 1:length(slopes)] <- slopes
print(EW_matrix)
filled.contour(x= 87, y= 61, z = EW_matrix)
for (row in 1:nrow(volcano)) {
elevation <- volcano[row,]
slopes <- Slope(elevation)
EW_matrix[1:(length(slopes)), 1] <- slopes
}
for (row in 1:nrow(volcano)) {
elevation <- volcano[row,]
slopes <- Slope(elevation)
EW_matrix[1:(length(slopes)), 1] <- slopes
EW_matrix[row, 1:length(slopes)] <- slopes
}
View(EW_matrix)
# Assuming volcano is the original matrix and EW_matrix is your matrix of E-W slopes
# Define the x and y vectors
x <- 1:nrow(volcano)  # Rows of the volcano matrix (North-South direction)
y <- 1:(ncol(volcano) - 1)  # Columns (East-West slopes are 1 shorter)
# z is the matrix of E-W slopes
z <- EW_matrix  # Make sure this matrix has dimensions nrow(volcano) x (ncol(volcano) - 1)
# Check the dimensions of the matrix
print(dim(z))
# Use filled.contour to plot the E-W slopes
filled.contour(x = x, y = y, z = z,
color.palette = terrain.colors,
xlab = "North-South Position",
ylab = "East-West Position",
main = "E-W Slope Map of the Volcano")
for (col in 1:ncol(volcano)) {
elevation <- volcano[, col]
slopes <- Slope(elevation)
NS_matrix[1:(length(slopes)), 1] <- slopes
}
print(NS_matrix)
filled.contour(x= 87, y= 61, z = NS_matrix)
NS_matrix <- matrix(NA, nrow= nrow(volcano)-1, ncol = ncol(volcano))
for (col in 1:ncol(volcano)) {
elevation <- volcano[, col]
slopes <- Slope(elevation)
NS_matrix[1:(length(slopes)), 1] <- slopes
}
print(NS_matrix)
for (col in 1:ncol(volcano)) {
elevation <- volcano[, col]
slopes <- Slope(elevation)
NS_matrix[1:(length(slopes)), col] <- slopes
}
filled.contour(
x1 <- 1:nrow(volcano),  # Rows of the volcano matrix (North-South direction)
y1 <- 1:(ncol(volcano) - 1),  # Columns (East-West slopes are 1 shorter)
# z is the matrix of E-W slopes
z1 <- NS_matrix,  # Make sure this matrix has dimensions nrow(volcano) x (ncol(volcano) - 1)
# Check the dimensions of the matrix
# Use filled.contour to plot the E-W slopes
filled.contour(x = x1, y = y1, z = z1,
color.palette = terrain.colors,
xlab = "N-S Position",
ylab = "E-W Position",
main = "E-W Slope Map of the Volcano")
)
filled.contour(
x1 <- 1:nrow(volcano)-1,  # Rows of the volcano matrix (North-South direction)
y1 <- 1:(ncol(volcano)),  # Columns (East-West slopes are 1 shorter)
# z is the matrix of E-W slopes
z1 <- NS_matrix,  # Make sure this matrix has dimensions nrow(volcano) x (ncol(volcano) - 1)
# Check the dimensions of the matrix
# Use filled.contour to plot the E-W slopes
filled.contour(x = x1, y = y1, z = z1,
color.palette = terrain.colors,
xlab = "N-S Position",
ylab = "E-W Position",
main = "E-W Slope Map of the Volcano")
)
filled.contour(
x1 <- 1:(nrow(volcano)-1),  # Rows of the volcano matrix (North-South direction)
y1 <- 1:(ncol(volcano)),  # Columns (East-West slopes are 1 shorter)
# z is the matrix of E-W slopes
z1 <- NS_matrix,  # Make sure this matrix has dimensions nrow(volcano) x (ncol(volcano) - 1)
# Check the dimensions of the matrix
# Use filled.contour to plot the E-W slopes
filled.contour(x = x1, y = y1, z = z1,
color.palette = terrain.colors,
xlab = "N-S Position",
ylab = "E-W Position",
main = "E-W Slope Map of the Volcano")
)
filled.contour(
x1 <- 1:(nrow(volcano)-1),  # Rows of the volcano matrix (North-South direction)
y1 <- 1:(ncol(volcano)),  # Columns (East-West slopes are 1 shorter)
# z is the matrix of E-W slopes
z1 <- NS_matrix,  # Make sure this matrix has dimensions nrow(volcano) x (ncol(volcano) - 1)
# Check the dimensions of the matrix
# Use filled.contour to plot the E-W slopes
filled.contour(x = x1, y = y1, z = z1,
color.palette = terrain.colors,
xlab = "N-S Position",
ylab = "E-W Position",
main = "N-S Slope Map of the Volcano")
)
# Assuming volcano is your matrix
# Initialize matrices for slopes
NS_matrix <- matrix(NA, nrow = nrow(volcano) - 1, ncol = ncol(volcano))
EW_matrix <- matrix(NA, nrow = nrow(volcano), ncol = ncol(volcano) - 1)
# Calculate N-S slopes (assuming Slope function is correct)
for (col in 1:ncol(volcano)) {
elevation <- volcano[, col]
slopes <- Slope(elevation)
NS_matrix[1:length(slopes), col] <- slopes
}
# Calculate E-W slopes (assuming Slope function is correct)
for (row in 1:nrow(volcano)) {
elevation <- volcano[row, ]
slopes <- Slope(elevation)
EW_matrix[row, 1:length(slopes)] <- slopes
}
# Pad NS_matrix and EW_matrix
padded_NS_matrix <- cbind(NS_matrix, rep(NA, nrow(NS_matrix))) # Add a column of NAs
padded_EW_matrix <- rbind(EW_matrix, rep(NA, ncol(EW_matrix))) # Add a row of NAs
# Check dimensions
print(dim(padded_NS_matrix))  # Should be (nrow(volcano) - 1, ncol(volcano))
print(dim(padded_EW_matrix))  # Should be (nrow(volcano), ncol(volcano) - 1)
# Combine slopes by averaging
total_slope <- matrix(NA, nrow = nrow(padded_EW_matrix), ncol = ncol(padded_EW_matrix))
# Populate the combined matrix
for (row in 1:nrow(total_slope)) {
for (col in 1:ncol(total_slope)) {
if (!is.na(padded_NS_matrix[row, col]) && !is.na(padded_EW_matrix[row, col])) {
total_slope[row, col] <- sqrt(padded_NS_matrix[row, col]^2 + padded_EW_matrix[row, col]^2)
}
}
}
print(dim(padded_NS_matrix))  # Should be (nrow(volcano) - 1, ncol(volcano))
print(dim(padded_EW_matrix))
# Combine slopes by averaging
total_slope <- matrix(NA, nrow = nrow(padded_EW_matrix), ncol = ncol(padded_EW_matrix))
for (row in 1:nrow(total_slope)) {
for (col in 1:ncol(total_slope)) {
if (!is.na(padded_NS_matrix[row, col]) && !is.na(padded_EW_matrix[row, col])) {
total_slope[row, col] <- sqrt(padded_NS_matrix[row, col]^2 + padded_EW_matrix[row, col]^2)
}
}
}
# Assuming volcano is your matrix
# Initialize matrices for slopes
NS_matrix <- matrix(NA, nrow = nrow(volcano) - 1, ncol = ncol(volcano))
EW_matrix <- matrix(NA, nrow = nrow(volcano), ncol = ncol(volcano) - 1)
# Calculate N-S slopes (assuming Slope function is correct)
for (col in 1:ncol(volcano)) {
elevation <- volcano[, col]
slopes <- Slope(elevation)
NS_matrix[1:length(slopes), col] <- slopes
}
# Calculate E-W slopes (assuming Slope function is correct)
for (row in 1:nrow(volcano)) {
elevation <- volcano[row, ]
slopes <- Slope(elevation)
EW_matrix[row, 1:length(slopes)] <- slopes
}
# Pad NS_matrix and EW_matrix
padded_NS_matrix <- cbind(NS_matrix, rep(NA, nrow(NS_matrix))) # Add a column of NAs
padded_EW_matrix <- rbind(EW_matrix, rep(NA, ncol(EW_matrix))) # Add a row of NAs
# Check dimensions
print(dim(padded_NS_matrix))  # Should be (nrow(volcano) - 1, ncol(volcano))
print(dim(padded_EW_matrix))  # Should be (nrow(volcano), ncol(volcano) - 1)
# Combine slopes by averaging
total_slope <- matrix(NA, nrow = nrow(padded_EW_matrix), ncol = ncol(padded_EW_matrix))
# Populate the combined matrix
for (row in 1:nrow(total_slope)) {
for (col in 1:ncol(total_slope)) {
if (!is.na(padded_NS_matrix[row, col]) && !is.na(padded_EW_matrix[row, col])) {
total_slope[row, col] <- sqrt(padded_NS_matrix[row, col]^2 + padded_EW_matrix[row, col]^2)
}
}
}
# Initialize matrices for slopes
NS_matrix <- matrix(NA, nrow = nrow(volcano) - 1, ncol = ncol(volcano))
EW_matrix <- matrix(NA, nrow = nrow(volcano), ncol = ncol(volcano) - 1)
# Calculate N-S slopes
for (col in 1:ncol(volcano)) {
elevation <- volcano[, col]
slopes <- Slope(elevation)
NS_matrix[1:length(slopes), col] <- slopes
}
# Calculate E-W slopes
for (row in 1:nrow(volcano)) {
elevation <- volcano[row, ]
slopes <- Slope(elevation)
EW_matrix[row, 1:length(slopes)] <- slopes
}
# Adjust dimensions to match
# Create padded matrices
padded_NS_matrix <- cbind(NS_matrix, rep(NA, nrow(NS_matrix))) # Add a column of NAs to match EW_matrix
padded_EW_matrix <- rbind(EW_matrix, rep(NA, ncol(EW_matrix))) # Add a row of NAs to match NS_matrix
# Check dimensions
print(dim(padded_NS_matrix))  # Should be (nrow(volcano) - 1, ncol(volcano) + 1)
print(dim(padded_EW_matrix))  # Should be (nrow(volcano) + 1, ncol(volcano) - 1)
# Create a matrix for combined slopes
total_slope <- matrix(NA, nrow = nrow(padded_EW_matrix), ncol = ncol(padded_EW_matrix))
# Populate the combined matrix
for (row in 1:nrow(total_slope)) {
for (col in 1:ncol(total_slope)) {
# Check if indices are within bounds
if (row <= nrow(padded_NS_matrix) && col <= ncol(padded_NS_matrix)) {
if (!is.na(padded_NS_matrix[row, col]) && !is.na(padded_EW_matrix[row, col])) {
total_slope[row, col] <- sqrt(padded_NS_matrix[row, col]^2 + padded_EW_matrix[row, col]^2)
}
}
}
}
# Plot the total slope map
filled.contour(x = 1:ncol(total_slope), y = 1:nrow(total_slope), z = t(total_slope),
color.palette = terrain.colors,
xlab = "Column Position",
ylab = "Row Position",
main = "Total Slope Map of the Volcano")
length(Temp100$F100)
length(Temp100$Fer100.fer100.)
Temp100 <- data.frame(Celcius = Cel100, Fahrenheit = Fer100)
plot(x = Temp100$F100., y = Temp100$Fer100.fer100. , xlab = "Celcius", ylab= "Fahrenheit")
Temp100 <- data.frame(Celcius = Cel100, Fahrenheit = Fer100)
plot(x = Temp100$F100., y = Temp100$Fer100.fer100. , xlab = "Celcius", ylab= "Fahrenheit")
plot(x = Temp100$F100., y = Temp100$Fer100.fer100. , xlab = "Celcius", ylab= "Fahrenheit")
length(Temp100$F100)
length(Temp100$Fer100.fer100.)
Temp100_clean <- na.omit(Temp100)
plot(x = Temp100$F100., y = Temp100$Fer100.fer100. , xlab = "Celcius", ylab= "Fahrenheit")
plot(x = Temp100_clean$F100., y = Temp100$Fer100.fer100. , xlab = "Celcius", ylab= "Fahrenheit")
View(Temp100)
(x = Temp100_clean$F100., y = Temp100$Fer100.fer100. , xlab = "Celcius", ylab= "Fahrenheit")
plot(x = Temp100_clean$F100., y = Temp100$Fer100.fer100. , xlab = "Celcius", ylab= "Fahrenheit")
plot(Temp100)
plot(x = Temp100$F100., y = Temp100$Fer100.fer100. , xlab = "Celcius", ylab= "Fahrenheit")
plot(Temp100$F100)
plot(Temp100$Fer100.fer100.)
plot(Temp100$F100)
Temp100 <- data.frame(Celcius = Cel100, Fahrenheit = Fer100)
