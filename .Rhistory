for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
# Loop over the sites
for (site in c("LBcrn")) {  # Replace with your actual site names
site_results <- list()
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "std",
method = "correlation",
selection = -10:9,
var_names = var_name
)
# Store results
site_results[[climate_var]] <- list(
response = response,
coefficients = response$coef
)
# Plot response and explicitly print
print(plot(response, main = paste("Site:", site, "-", var_name)))
}
# Add site results to the main list
results[[site]] <- site_results
}
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "correlation",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "correlation",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
knitr::opts_chunk$set(echo = TRUE)
brap_data <- brap_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
brap_data <- read_csv("BRAPALL.csv")
childs_data <- read_csv("ChildsAll.csv")
brap_data <- brap_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
childs_data <- childs_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- var
mean_value$Visit <- visit
# Bind to the results
results <- bind_rows(results, mean_value)
}
}
# View the final results
print(results)
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mean_value_by_visit <- brap_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- var
mean_value$Visit <- visit
# Bind to the results
results <- bind_rows(results, mean_value)
}
}
# View the final results
print(results)
# Initialize an empty data frame to store the results
Childsresults <- data.frame()
# Choosevariable
variable_of_interest <- "HDR"
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit for the "Diameter" variable
mean_value <- childs_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- variable_of_interest
mean_value$Visit <- visit
# Bind to the results
Childsresults <- bind_rows(Childsresults, mean_value)
}
# Pivot the data so that each visit is a separate column
Childsresults_wide <- Childsresults %>%
pivot_wider(names_from = Visit, values_from = mean_value)
# View the final results in a table format using kable
Childsresults_wide %>%
kable("html", caption = "Mean HDR Values by Visit for Childs") %>%
kable_styling(full_width = FALSE)
DendroMerge <- read_csv("DendroMergeforR.csv")
DendroMerge <- DendroMerge[,-8]
DendroMerge <- DendroMerge %>%
mutate(ID2 = recode(ID2,
"C" = "Childs",
"L" = "Lower Beasley",
"S" = "Sheep",
"U" = "Upper Beasley",
"W" = "West Clear Creek",
))
DendroMerge <- DendroMerge %>%
rename(#`Site ID` = `ID2`)
ggplot(DendroMerge, aes(x = PithHand, y = `Diameter (CM)`, color= `Site ID`)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = "Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
View(DendroMerge)
DendroMerge <- read_csv("DendroMergeforR.csv")
DendroMerge <- DendroMerge[,-8]
DendroMerge <- DendroMerge %>%
mutate(ID2 = recode(ID2,
"C" = "Childs",
"L" = "Lower Beasley",
"S" = "Sheep",
"U" = "Upper Beasley",
"W" = "West Clear Creek",
))
ggplot(DendroMerge, aes(x = PithHand, y = `Diameter (CM)`, color= `Site ID`)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = "Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
DendroMerge <- DendroMerge %>%
rename(`Site ID` = `ID2`)
ggplot(DendroMerge, aes(x = PithHand, y = `Diameter (CM)`, color= `Site ID`)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = "Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
library(ggplot2)
library(dplyr)
# Get unique site IDs
site_ids <- unique(DendroMerge$`Site ID`)
# Loop through each site ID and generate a plot
for (site in site_ids) {
# Filter data for the current site
site_data <- DendroMerge %>% filter(`Site ID` == site)
# Create the plot
p <- ggplot(site_data, aes(x = PithHand, y = `Diameter (CM)`, color = `Site ID`)) +
labs(x = "Pith Year", y = "Diameter (cm)", title = paste("Diameter vs Pith Date - Site:", site)) +
geom_point(shape = 18, size = 3) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
scale_y_continuous(limits = c(0, 100)) +
scale_x_continuous(limits = c(1985, 2020)) +
theme_minimal()
# Save or print the plot
print(p) # To view in the R console
ggsave(filename = paste0("plot_site_", site, ".png"), plot = p, width = 8, height = 6) # To save as a file
}
library(dplyr)
# Create an empty list to store model summaries
lm_results <- list()
# Loop through each site
for (site in site_ids) {
# Filter data for the current site
site_data <- DendroMerge %>% filter(`Site ID` == site)
# Fit the linear model
lm_model <- lm(`Diameter (CM)` ~ PithHand, data = site_data)
# Extract summary details
model_summary <- summary(lm_model)
# Store results in the list
lm_results[[site]] <- list(
Coefficients = coef(model_summary),      # Coefficients (Intercept and Slope)
R_squared = model_summary$r.squared,    # R-squared value
Adj_R_squared = model_summary$adj.r.squared, # Adjusted R-squared value
P_value = coef(model_summary)[2, 4]     # P-value for the slope
)
}
library(dplyr)
# Create an empty list to store model summaries
lm_results <- list()
# Get all unique site IDs
site_ids <- unique(DendroMerge$`Site ID`)
# Loop through each site
for (site in site_ids) {
# Filter data for the current site and remove NA values in key columns
site_data <- DendroMerge %>%
filter(`Site ID` == site) %>%
filter(!is.na(PithHand) & !is.na(`Diameter (CM)`))  # Remove rows with NA in PithHand or Diameter
# Check if there's enough data after filtering
if (nrow(site_data) > 1) {
# Fit the linear model
lm_model <- lm(`Diameter (CM)` ~ PithHand, data = site_data)
# Extract summary details
model_summary <- summary(lm_model)
# Store results in the list
lm_results[[site]] <- list(
Coefficients = coef(model_summary),      # Coefficients (Intercept and Slope)
R_squared = model_summary$r.squared,    # R-squared value
Adj_R_squared = model_summary$adj.r.squared, # Adjusted R-squared value
P_value = coef(model_summary)[2, 4]     # P-value for the slope
)
} else {
# If there is not enough data, store a message
lm_results[[site]] <- "Not enough data for linear model"
}
}
# Print results for a specific site (e.g., "Childs")
lm_results[["Childs"]]
# Print results for a specific site (e.g., "Childs")
lm_results[["Sheep"]]
# Print results for a specific site (e.g., "Childs")
lm_results[["UB"]]
# Print results for a specific site (e.g., "Childs")
lm_results[["Upper Beasley"]]
# Print results for a specific site (e.g., "Childs")
lm_results[["Lower Beasley"]]
