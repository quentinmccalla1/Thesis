geom_vline(xintercept = as.Date("2013-06-05"), color = "red", linetype = "dashed", size = 1)+
geom_vline(xintercept = as.Date("2010-06-15"), color = "red", linetype = "dashed", size = 1)+
geom_hline( yintercept = 52700, color= "blue", linetype = "dashed", size =1)+
annotate("text", x = as.Date("1990-04-01"), y = 52700,
label = "Restructuring Flow", color = "black", vjust = -1, size = 3)+
geom_hline(yintercept = 10500, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 10500, label ="Rejuvenating  flow"
, color ="black", vjust =-1, size = 3)
# Calculate mean annual values
annual_means <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(mean_value = mean(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
annual_means <- setNames(annual_means, c("Year", "Mean"))
# Extract year and month
CampVerdeGuage$Year <- format(CampVerdeGuage$Date, "%Y")
CampVerdeGuage$Month <- format(CampVerdeGuage$Date, "%m")
# Filter for months between November and March
winter_data <- CampVerdeGuage %>%
filter(Month %in% c("11", "12", "01", "02", "03"))
mean_winter_flow <- winter_data %>%
group_by(Year) %>%
summarise(mean_winter_flow = mean(Discharge, na.rm = TRUE))
SummerFlows<- CampVerdeGuage %>%
filter(Month %in% c("06", "07", "08", "09"))
SummerFlows <- SummerFlows %>%
group_by(Year) %>%
summarise(SummerFlows = mean(Discharge, na.rm = TRUE))
meanmin <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(min = min(Discharge, na.rm = TRUE))  # Replace 'Discharge' with your parameter name
maxflow <- CampVerdeGuage %>%
group_by(year = year(Date)) %>%  # Corrected here
summarise(max = max(Discharge, na.rm = TRUE))
monthly_means <- CampVerdeGuage %>%
mutate(Year = year(Date), Month = month(Date)) %>%
group_by(Year, Month) %>%
summarise(Monthly_Mean = mean(Discharge, na.rm = TRUE), .groups = "drop")
monthly_means <- monthly_means %>%
pivot_wider(names_from = Month, values_from = Monthly_Mean, names_prefix = "Month_") %>%
arrange(Year)
# Rename the columns to use month names
month_names <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Assign the month names to the columns (excluding "Year" column)
colnames(monthly_means)[2:13] <- month_names
PDSI <- read_csv("PDSI-AZ-1994to2023.csv")
PDSImean <- PDSI %>%
group_by(Year, Month) %>%
summarise(mean_value = mean(`Value`, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = Month, values_from = mean_value, names_prefix = "Month_") %>%
arrange(Year)
# Rename columns to month names
month_names <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Assign the month names to the columns (excluding the "Year" column)
colnames(PDSImean)[2:13] <- month_names
remove(PDSI)
YearlyTemp <- read.csv("AverageMonthlyTemp-YavapaiCounty_1993-2024.csv")
MeanTemp <- YearlyTemp %>%
group_by(Year, Month) %>%
summarise(mean_value = mean(`Value`, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = Month, values_from = mean_value, names_prefix = "Month_") %>%
arrange(Year)
# Rename columns to month names
month_names <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Assign the month names to the columns (excluding the "Year" column)
colnames(MeanTemp)[2:13] <- month_names
# View the resulting data
print(MeanTemp)
remove(YearlyTemp)
Precip <- read.csv("YavapaiPrecip.csv")
Precip <- Precip %>%
group_by(Year, Month) %>%
summarise(mean_value = mean(`Value`, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = Month, values_from = mean_value, names_prefix = "Month_") %>%
arrange(Year)
# Rename columns to month names
month_names <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Assign the month names to the columns (excluding the "Year" column)
colnames(Precip)[2:13] <- month_names
# View the resulting data
print(Precip)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
# Loop over the sites
for (site in c("LBcrn","UBcrn","Childscrn","Allcrn","AllCorcrn","Sheepcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "std",
method = "correlation",
selection = 1:12,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Align datasets and prepare for analysis
common_years <- Reduce(intersect, list(Allcrn$Year, monthly_means$Year))
# Clean and prepare the `Allcrn` dataset
Allcrn <- Allcrn %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)          # Remove duplicates
# Clean and prepare the `monthly_means` dataset
monthly_means <- monthly_means %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)          # Remove duplicates
# Clean and prepare the Mean Temp dataset
MeanTemp <- MeanTemp %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)          # Remove duplicates
# Clean and prepare the Precip dataset
Precip <- Precip %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)          # Remove duplicates
# Clean and prepare the PDSI dataset
PDSImean <- PDSImean %>%
as.data.frame() %>%                       # Ensure it is a data frame
mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
filter(Year %in% common_years) %>%        # Filter by common years
distinct(Year, .keep_all = TRUE)          # Remove duplicates
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
# Loop over the sites
for (site in c("LBcrn","UBcrn","Childscrn","Allcrn","AllCorcrn","Sheepcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "std",
method = "correlation",
selection = 1:12,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
print(results)
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#"LBcrn","UBcrn","Childscrn",
# Loop over the sites,"Sheepcrn"
for (site in c("Allcrn","AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "std",
method = "correlation",
selection = 1:12,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
print(results)
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#"LBcrn","UBcrn","Childscrn",
# Loop over the sites,"Sheepcrn"
for (site in c("Allcrn","AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = 1:12,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
print(results)
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("Allcrn","AllCorcrn","Sheepcrn","LBcrn","UBcrn","Childscrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = 1:12,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
print(results)
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("Allcrn","AllCorcrn","Sheepcrn","LBcrn","UBcrn","Childscrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = 1:12,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
