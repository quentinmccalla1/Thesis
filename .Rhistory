View(BAIvar)
BAImean <- apply(CrossBAI,1,mean,na.rm=TRUE)
print(BAImean)
plot(BAImean)
BAIvar <- var(BAImean)
plot(BAIvar)
print(BAIvar)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dataRetrieval")
library(dataRetrieval)
library(ggplot2)
library(dplyr)
library(lubridate)
CampVerdeGuage <- readNWISdv(    #Daily
"09506000",                  #Below camp verde guage
"00060",                      #Discharge
startDate = "1991-01-01",      #From first complete year
endDate = "",                 #Till now
statCd = "00003"
)
CampVerdeGuage <- CampVerdeGuage %>%     #Rename column to discharge
rename(Discharge = X_00060_00003)
ggplot(data = CampVerdeGuage, mapping = aes(x = Date, y = Discharge)) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
geom_line()+
geom_hline(yintercept = 24800, color = "blue", linetype = "dashed", size = 1)+
annotate("text" , x = as.Date("1990-04-01"), y = 24800, label ="20% AEP"
, color ="black", vjust =-1, size = 5)+
annotate("text" , x = as.Date("2006-01-01"), y = 24800, label ="5 year flood"
, color ="black", vjust =-1, size = 5)+
geom_hline(yintercept  = 42500, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 42500, label ="10% AEP"
, color ="black", vjust =-1, size = 5)+
annotate("text" , x = as.Date("2006-01-01"), y = 42500, label ="10 year flood"
, color ="black", vjust =-1, size = 5)+
geom_hline(yintercept = 75100, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 75100, label ="4% AEP"
, color ="black", vjust =-1, size = 5)+
annotate("text" , x = as.Date("2006-01-01"), y = 75100, label ="25 year flood"
, color ="black", vjust =-1, size = 5)+
geom_hline(yintercept = 108000, color = "blue", linetype = "dashed", size = 1)+
annotate("text" ,x = as.Date("1990-04-01"), y = 108000, label ="2% AEP"
, color ="black", vjust =-1, size = 5)+
annotate("text" , x = as.Date("2006-01-01"), y = 108000, label ="50 year flood"
, color ="black", vjust =-1, size = 5)+
annotate("text" , x = as.Date("2006-01-01"), y = 75100, label ="50 year flood"
, color ="black", vjust =-1, size = 5)+
geom_point(aes(x=as.Date("1993-02-20") , y= 101000 ),shape= 18, size= 5, color = "black")+
geom_point(aes(x=as.Date("1995-03-6") , y= 75500 ),shape= 18, size= 5, color = "black")+
geom_point(aes(x=as.Date("2005-02-12") , y= 62000 ),shape= 18, size= 5, color = "black")+
theme_minimal() +
theme(text = element_text(size = 20))  # Increase all text size
library(dplR)
library(ggplot2)
library(kableExtra)
DendroMerge <- read.csv("DendroMergeforR.csv")
SalGOO <- DendroMerge %>%filter(Species == "Salgoo")
View(DendroMerge)
SalGOO <- DendroMerge %>%filter(Species == "Salgoo")
SalGOO <- DendroMerge %>%filter(Species == "Salgoo")
head(DendroMerge)
library(dplR)
library(ggplot2)
library(kableExtra)
library(dplyr)
SalGOO <- DendroMerge %>%filter(Species == "Salgoo")
SalGOO <- DendroMerge %>%filter(Species == "Salgoo")
Popfre <- DendroMerge %>%filter(Species == "Popfre")
Correlated <- DendroMerge %>% filter(Correlated == "Yes")
OLD <- DendroMerge%>% filter(Correlated == "OLD")
DendroMerge <- DendroMerge %>%
mutate(ID2 = recode(ID2,
"C" = "Childs",
"L" = "Lower Beasley",
"S" = "Sheep",
"U" = "Upper Beasley",
"W" = "West Clear Creek",
))
DendroMerge <- DendroMerge %>%
rename(`Site ID` = `ID2`)
ggplot(DendroMerge, aes(x = PithHand, y = DendroMerge$Diameter..CM.)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = " ALL Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1985,2020)
)+ theme_minimal()
#All plot
ggplot(DendroMerge, aes(x = PithHand, y = DendroMerge$Diameter..CM.)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = " ALL Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,100)
) +
scale_x_continuous(
limits = c(1900,2020)
)+ theme_minimal()
# Get unique site IDs
site_ids <- unique(Popfre$`Site ID`)
# Loop through each site ID and generate a plot
for (site in site_ids) {
# Filter data for the current site
site_data <- Popfre %>% filter(`Site ID` == site)
# Create the plot
p <- ggplot(site_data, aes(x = PithHand, y = Diameter..CM., color = factor(`Site ID`))) +
geom_point(shape = 18, size = 3) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
scale_y_continuous(limits = c(0, 100)) +
scale_x_continuous(limits = c(1985, 2020)) +
labs(x = "Pith Year", y = "Diameter (cm)", title = paste("Diameter vs Pith Date - Site:", site)) +
theme_minimal()
# Print the plot
print(p)
}
for (site in site_ids) {
# Filter data for the current site
site_data <- Popfre %>% filter(`Site ID` == site)
# Create the plot
p <- ggplot(site_data, aes(x = PithHand, y = Diameter..CM., color = factor(`Site ID`))) +
geom_point(shape = 18, size = 3) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
scale_y_continuous(limits = c(0, 100)) +
scale_x_continuous(limits = c(1985, 2020)) +
labs(x = "Pith Year", y = "Diameter (cm)", title = paste("Diameter vs Pith Date - Site:", site)) +
theme_minimal()
# Print the plot
print(p)
}
ggplot(DendroMerge, aes(x = PithHand, y = DendroMerge$Diameter..CM.)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = " ALL Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = FALSE, size = 1.5)+
scale_y_continuous(
limits = c(0,150)
) +
scale_x_continuous(
limits = c(1900,2020)
)+ theme_minimal()
site_ids <- unique(Popfre$`Site ID`)
# Loop through each site ID and generate a plot
for (site in site_ids) {
# Filter data for the current site
site_data <- Popfre %>% filter(`Site ID` == site)
# Create the plot
p <- ggplot(site_data, aes(x = PithHand, y = Diameter..CM., color = factor(`Site ID`))) +
geom_point(shape = 18, size = 3) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
scale_y_continuous(limits = c(0, 100)) +
scale_x_continuous(limits = c(1985, 2020)) +
labs(x = "Pith Year", y = "Diameter (cm)", title = paste("Diameter vs Pith Date - Site:", site)) +
theme_minimal()
# Print the plot
print(p)
}
# Print the plot
print(p)
# Loop through each site ID and generate a plot
for (site in site_ids) {
# Filter data for the current site
site_data <- Popfre %>% filter(`Site ID` == site)
# Create the plot
p <- ggplot(site_data, aes(x = PithHand, y = Diameter..CM., color = factor(`Site ID`))) +
geom_point(shape = 18, size = 3) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
scale_y_continuous(limits = c(0, 100)) +
scale_x_continuous(limits = c(1985, 2020)) +
labs(x = "Pith Year", y = "Diameter (cm)", title = paste("Diameter vs Pith Date - Site:", site)) +
theme_minimal()
# Print the plot
print(p)
}
ggplot(OLD, aes(x = PithHand, y = Diameter..CM.)) +
geom_point(shape = 18, size = 3) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
scale_y_continuous(limits = c(0, 150)) +
scale_x_continuous(limits = c(1900, 2020)) +
labs(x = "Pith Year", y = "Diameter (cm)", title = " Correlated Diameter vs Pith Date") +
theme_minimal()
View(OLD)
ggplot(DendroMerge, aes(x = PithHand, y = DendroMerge$Diameter..CM.)) +
labs( x= "Pith Year", y = "Diameter (cm)", title = " ALL Diameter vs Pith Date") +
geom_point(shape=18, size= 3)+
geom_smooth( method = "lm", se = TRUE, size = 1.5)+
scale_y_continuous(
limits = c(0,150)
) +
scale_x_continuous(
limits = c(1900,2020)
)+ theme_minimal()
ggplot(OLD, aes(x = PithHand, y = Diameter..CM.)) +
geom_point(shape = 18, size = 3) +
scale_y_continuous(limits = c(0, 150)) +
scale_x_continuous(limits = c(1900, 2020)) +
labs(x = "Pith Year", y = "Diameter (cm)", title = " Old Growth Series Diameter vs Pith Date") +
theme_minimal()
ggplot(OLD, aes(x = PithHand, y = Diameter..CM.)) +
geom_point(shape = 18, size = 3) +
scale_y_continuous(limits = c(0, 150)) +
scale_x_continuous(limits = c(1900, 2020)) +
labs(x = "Min Age", y = "Diameter (cm)", title = " Old Growth Series Diameter vs Pith Date") +
theme_minimal()
library(dataRetrieval)
library(ggplot2)
library(dplyr)
library(lubridate)
CampVerdeGuage <- readNWISpeak(    #Daily
"09506000",                  #Below camp verde guage
"00060",                      #Discharge
startDate = "1991-01-01",      #From first complete year
endDate = "2006-01-01",                 #Till now
statCd = "00003"
)
CampVerdeGuage <- readNWISpeak(    #Daily
"09506000",                  #Below camp verde guage
"00060",                      #Discharge
startDate = "1988-01-01",      #From first complete year
endDate = "2024-01-01",                 #Till now
)
CampVerdeGuage <- readNWISpeak(    #Daily
"09506000",                  #Below camp verde guage
"00060",                      #Discharge
startDate = "1988-01-01",      #From first complete year
endDate = "2024-01-01",                 #Till now
)
CampVerdeGauge <- readNWISdv(
siteNumbers = "09506000",        # Camp Verde gauge
parameterCd = "00060",           # Discharge
startDate = "1988-01-01",
endDate = "2024-01-01"
)
CampVerdeGuage <- CampVerdeGuage %>%     #Rename column to discharge
rename(Discharge = X_00060_00003)
View(CampVerdeGauge)
CampVerdeGauge <- renameNWISColumns(CampVerdeGauge)
# 3. Add year column and filter for max Flow per year
AnnualPeaks <- CampVerdeGauge %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
filter(Flow == max(Flow, na.rm = TRUE)) %>%
ungroup()
View(AnnualPeaks)
write.csv(AnnualPeaks, "~/Desktop/CampVerde_AnnualPeakDischarge.csv", row.names = FALSE)
write.csv(AnnualPeaks, "C:/Users/qm43/Documents/GitHub/Thesis1/CampVerde_AnnualPeakDischarge.csv", row.names = FALSE)
CampVerdeGuage <- CampVerdeGuage %>%     #Rename column to discharge
rename(Discharge = X_00060_00003)
CampVerdeGuage <- CampVerdeGuage %>%     #Rename column to discharge
rename(Discharge = X_00060_00003)
CampVerdeGauge <- readNWISdv(
siteNumbers = "09506000",        # Camp Verde gauge
parameterCd = "00060",           # Discharge
startDate = "1987-01-01",
endDate = "2024-01-01"
)
CampVerdeGauge <- renameNWISColumns(CampVerdeGauge)
# 3. Add year column and filter for max Flow per year
AnnualPeaks <- CampVerdeGauge %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
filter(Flow == max(Flow, na.rm = TRUE)) %>%
ungroup()
write.csv(AnnualPeaks, "C:/Users/qm43/Documents/GitHub/Thesis1/CampVerde_AnnualPeakDischarge.csv", row.names = FALSE)
View(AnnualPeaks)
CampVerdeGauge <- readNWISdv(
siteNumbers = "09506000",        # Camp Verde gauge
parameterCd = "00060",           # Discharge
startDate = "1987-01-01",
endDate = "2024-01-01"
)
CampVerdeGauge <- renameNWISColumns(CampVerdeGauge)
AnnualPeaks <- CampVerdeGauge %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
filter(Flow == max(Flow, na.rm = TRUE)) %>%
ungroup()
install.packages("tidyverse",repos = "https://cloud.r-project.org")
install.packages("gridExtra")
brap_data <- read_csv("BRAPALL.csv")
library(tidyverse)
brap_data <- read_csv("BRAPALL.csv")
childs_data <- read_csv("ChildsAll.csv")
brap_data <- brap_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
childs_data <- childs_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs
mydata %>%
group_by(Visit) %>%
summarise(
Height_mean = mean(Height, na.rm = TRUE),
Height_se = sd(Height, na.rm = TRUE) / sqrt(n()),
Diameter_mean = mean(Diameter, na.rm = TRUE),
Diameter_se = sd(Diameter, na.rm = TRUE) / sqrt(n()),
HDR_mean = mean(HDR, na.rm = TRUE),
HDR_se = sd(HDR, na.rm = TRUE) / sqrt(n())
)
brap_data %>%
group_by(Visit) %>%
summarise(
Height_mean = mean(Height, na.rm = TRUE),
Height_se = sd(Height, na.rm = TRUE) / sqrt(n()),
Diameter_mean = mean(Diameter, na.rm = TRUE),
Diameter_se = sd(Diameter, na.rm = TRUE) / sqrt(n()),
HDR_mean = mean(HDR, na.rm = TRUE),
HDR_se = sd(HDR, na.rm = TRUE) / sqrt(n())
)
childs_data %>%
group_by(Visit) %>%
summarise(
Height_mean = mean(Height, na.rm = TRUE),
Height_se = sd(Height, na.rm = TRUE) / sqrt(n()),
Diameter_mean = mean(Diameter, na.rm = TRUE),
Diameter_se = sd(Diameter, na.rm = TRUE) / sqrt(n()),
HDR_mean = mean(HDR, na.rm = TRUE),
HDR_se = sd(HDR, na.rm = TRUE) / sqrt(n())
)
brap_data %>%
group_by(Visit) %>%
summarise(
Height_mean = mean(Height, na.rm = TRUE),
Height_se = sd(Height, na.rm = TRUE) / sqrt(n()),
Diameter_mean = mean(Diameter, na.rm = TRUE),
Diameter_se = sd(Diameter, na.rm = TRUE) / sqrt(n()),
HDR_mean = mean(HDR, na.rm = TRUE),
HDR_se = sd(HDR, na.rm = TRUE) / sqrt(n())
)
childs_data %>%
group_by(Visit) %>%
summarise(
Height_mean = mean(Height, na.rm = TRUE),
Height_se = sd(Height, na.rm = TRUE) / sqrt(n()),
Diameter_mean = mean(Diameter, na.rm = TRUE),
Diameter_se = sd(Diameter, na.rm = TRUE) / sqrt(n()),
HDR_mean = mean(HDR, na.rm = TRUE),
HDR_se = sd(HDR, na.rm = TRUE) / sqrt(n())
)
install.packages("tidyverse",repos = "https://cloud.r-project.org")
install.packages("gridExtra")
install.packages("grid")
install.packages("knitr")
install.packages("kableExtra")
library(grid)
library(kableExtra)
library(tidyverse)
library(knitr)
brap_data <- read_csv("BRAPALL.csv")
childs_data <- read_csv("ChildsAll.csv")
brap_data <- read_csv("BRAPALL.csv")
childs_data <- read_csv("ChildsAll.csv")
brap_data <- brap_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
childs_data <- childs_data %>%
mutate(across(starts_with("HDR"), ~ as.numeric(.)))
View(childs_data)
custom_order <- c("102023", "62024", "122024", "52025")  # Replace with your actual visit names or IDs
brap_data %>%
group_by(Visit) %>%
summarise(
Height_mean = mean(Height, na.rm = TRUE),
Height_se = sd(Height, na.rm = TRUE) / sqrt(n()),
Diameter_mean = mean(Diameter, na.rm = TRUE),
Diameter_se = sd(Diameter, na.rm = TRUE) / sqrt(n()),
HDR_mean = mean(HDR, na.rm = TRUE),
HDR_se = sd(HDR, na.rm = TRUE) / sqrt(n())
)
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
View(mean_value_by_visit)
mean_value_by_visit <- brap_data %>%
mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
View(mean_value_by_visit)
View(brap_data)
Childs_custom_order <- c("102023", "62024", "122024", "52025")  # Replace with your actual visit names or IDs
BRAP_custom_order <- c("102023", "62024", "102024", "52025")
mean_value_by_visit <- childs_data %>%
mutate(Visit = factor(Visit, levels = Childs_custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
View(mean_value_by_visit)
mean_value_by_visit <- brap_data %>%
mutate(Visit = factor(Visit, levels = BRAP_custom_order)) %>%  # Set custom order
group_by(Visit) %>%  # Group by Visit
summarise(
mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
.groups = "drop"  # Ungroup the data after summarization
) %>%
arrange(Visit)  # Arrange based on custom order
View(mean_value_by_visit)
# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
kable_styling(full_width = FALSE, position = "center",
bootstrap_options = c("striped", "bordered"))
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
results <- data.frame()  # Empty data frame to store the results
for (var in variables) {
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit
mean_value <- brap_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- var
mean_value$Visit <- visit
# Bind to the results
results <- bind_rows(results, mean_value)
}
}
# View the final results
print(results)
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(childs_data$Visit)  # Get all unique Visit values
Childsresults <- data.frame()  # Empty data frame to store the results
for (var in variables) {
for (visit in visits) {  # Loop through each visit
# Calculate the mean for each plot and visit
mean_value <- childs_data %>%
filter(Visit == visit) %>%  # Filter for the current visit
group_by(Plot) %>%  # Group by Plot
summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
# Add the variable name and visit to the result
mean_value$Variable <- var
mean_value$Visit <- visit
# Bind to the results
Childsresults <- bind_rows(Childsresults, mean_value)
}
}
# View the final results
print(Childsresults)
variable_of_interest <- "Height"
# Calculate the mean height for each plot and visit
mean_height <- childs_data %>%
group_by(Plot, Visit) %>%  # Group by Plot and Visit
summarise(mean_height = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean height, remove NA
# Create a bar plot with more space between bars
ggplot(mean_height, aes(x = factor(Plot), y = mean_height, fill = Visit)) +
geom_bar(stat = "identity", position = position_dodge(width = .8)) +  # Increase spacing between bars
labs(title = "Mean Height by Plot and Visit",
x = "Plot",
y = "Mean Height") +
theme_minimal() +
scale_fill_manual(values = c("skyblue", "lightgreen", "orange", "pink")) +  # Customize colors
scale_x_discrete(expand = expansion(add = c(2,2))) +  # Add more space around bars on x-axis
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
brap_data$Visit <- as.factor(brap_data$Visit)
childs_data$Visit <- as.factor(childs_data$Visit)
ggplot(mean_height, aes(x = factor(Plot), y = mean_height, fill = Visit)) +
geom_bar(stat = "identity", position = position_dodge(width = .8)) +  # Increase spacing between bars
labs(title = "Mean Height by Plot and Visit",
x = "Plot",
y = "Mean Height") +
theme_minimal() +
scale_fill_manual(values = c("skyblue", "lightgreen", "orange", "pink")) +  # Customize colors
scale_x_discrete(expand = expansion(add = c(2,2))) +  # Add more space around bars on x-axis
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
variables <- c("Diameter", "Height", "HDR")
# Initialize an empty list to store results
anova_results <- list()
tukey_results <- list()
# Loop through each variable
for (var in variables) {
# Run ANOVA
anova_model <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
anova_results[[var]] <- summary(anova_model)
# Check for significance in the ANOVA model
p_value <- summary(anova_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_value) && p_value < 0.05) {
# If significant, run Tukey's HSD
tukey_test <- TukeyHSD(anova_model)
tukey_results[[var]] <- tukey_test
} else {
tukey_results[[var]] <- NULL
}
}
# View Tukey's HSD results
for (var in variables) {
if (!is.null(tukey_results[[var]])) {
cat("\nTukey's HSD for", var, ":\n")
print(tukey_results[[var]])
} else {
cat("\nNo significant results for", var, "in ANOVA.\n")
}
}
```
