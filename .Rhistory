Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
#boot = "exact",
method = "response",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
geom_line(data = Cross_bai_crn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange")) +  # Custom colors
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
Sheepcrn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childscrn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UBcrn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LBcrn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
Allcrn$Year <- seq(1988, by = 1, length.out = nrow(Allcrn))
Crosscrn$Year <- seq(1994, by = 1, length.out = nrow(Crosscrn))
plot.crn(Sheepcrn, add.spline = TRUE, nyears = 5)
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets for clarity
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
# Convert BAI data to a format suitable for `chron` function
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
# Access individual chronologies for both BAI and ring-width data
Childs_bai_crn <- bai_chron_list[["Childs"]]
Sheep_bai_crn <- bai_chron_list[["Sheep"]]
UB_bai_crn <- bai_chron_list[["UB"]]
LB_bai_crn <- bai_chron_list[["LB"]]
All_bai_crn <- bai_chron_list[["ALL"]]
AllCor_bai_crn <- bai_chron_list[["ALLCor"]]
Cross_bai_crn <- bai_chron_list[["Crossdated"]]
Childscrn <- rwl_chron_list[["Childs"]]
Sheepcrn <- rwl_chron_list[["Sheep"]]
UBcrn <- rwl_chron_list[["UB"]]
LBcrn <- rwl_chron_list[["LB"]]
Allcrn <- rwl_chron_list[["ALL"]]
AllCorcrn <- rwl_chron_list[["ALLCor"]]
Crosscrn <- rwl_chron_list[["Crossdated"]]
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets for clarity
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
# Convert BAI data to a format suitable for `chron` function
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
# Access individual chronologies for both BAI and ring-width data
Childs_bai_crn <- bai_chron_list[["Childs"]]
Sheep_bai_crn <- bai_chron_list[["Sheep"]]
UB_bai_crn <- bai_chron_list[["UB"]]
LB_bai_crn <- bai_chron_list[["LB"]]
All_bai_crn <- bai_chron_list[["ALL"]]
AllCor_bai_crn <- bai_chron_list[["ALLCor"]]
Cross_bai_crn <- bai_chron_list[["Crossdated"]]
Childscrn <- rwl_chron_list[["Childs"]]
Sheepcrn <- rwl_chron_list[["Sheep"]]
UBcrn <- rwl_chron_list[["UB"]]
LBcrn <- rwl_chron_list[["LB"]]
Allcrn <- rwl_chron_list[["ALL"]]
AllCorcrn <- rwl_chron_list[["ALLCor"]]
Crosscrn <- rwl_chron_list[["Crossdated"]]
Sheepcrn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childscrn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UBcrn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LBcrn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
Allcrn$Year <- seq(1988, by = 1, length.out = nrow(Allcrn))
Crosscrn$Year <- seq(1994, by = 1, length.out = nrow(Crosscrn))
# Combine all datasets into one
Sheepcrn$Dataset <- "Sheep Bridge"
Childscrn$Dataset <- "Childs"
UBcrn$Dataset <- "Upper Beasley"
LBcrn$Dataset <- "Lower Beasley"
Allcrn$Dataset <- "All"
Crosscrn$Dataset <- "Correlated"
# Combine datasets
combined_data <- rbind(Sheepcrn, Childscrn, UBcrn, LBcrn, Allcrn, Crosscrn)
# Create the ggplot with legend
ggplot(combined_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(data = Crosscrn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
geom_line(size = .5) +  # Line thickness
labs(x = "Year", y = "RWI", title = "Multiple Line Graphs") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange"))+
geom_hline(yintercept = 1, linetype= "dashed", color = "black")+
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
Sheep_bai_crn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childs_bai_crn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UB_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LB_bai_crn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
All_bai_crn$Year <- seq(1988, by = 1 , length.out = nrow(Allcrn))
Cross_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(Crosscrn))
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
geom_line(data = Cross_bai_crn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange")) +  # Custom colors
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset))
plot(combinedBAI_data)
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
geom_line(data = Cross_bai_crn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange")) +  # Custom colors
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
Childs_bai_crn <- bai_chron_list[["Childs"]]
Sheep_bai_crn <- bai_chron_list[["Sheep"]]
UB_bai_crn <- bai_chron_list[["UB"]]
LB_bai_crn <- bai_chron_list[["LB"]]
All_bai_crn <- bai_chron_list[["ALL"]]
AllCor_bai_crn <- bai_chron_list[["ALLCor"]]
Cross_bai_crn <- bai_chron_list[["Crossdated"]]
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
geom_line(data = Cross_bai_crn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange")) +  # Custom colors
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
Sheep_bai_crn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childs_bai_crn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UB_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LB_bai_crn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
All_bai_crn$Year <- seq(1988, by = 1 , length.out = nrow(Allcrn))
Cross_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(Crosscrn))
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"
# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)
ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
geom_line(data = Cross_bai_crn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
scale_color_manual(values = c("Sheep Bridge" = "lightgreen",
"Childs" = "red",
"Upper Beasley" = "blue",
"Lower Beasley" = "orange")) +  # Custom colors
theme_minimal() +
theme(legend.title = element_blank())  # Optionally remove legend title
# Define a list of climate variables and their corresponding names
climate_data <- list(
MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
Precip = list(data = Precip, var_name = "Precip"),
MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
PDSI = list(data = PDSImean, var_name = "PDSI")
)
# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
site_results <- list()
# List to store the significant months and correlations for each site
site_summary <- data.frame(
Site_ID = character(),
Climate_Variable = character(),
Significant_Months = integer(),
Correlation_Values = numeric(),
stringsAsFactors = FALSE
)
# Loop over climate variables
for (climate_var in names(climate_data)) {
climate <- climate_data[[climate_var]]$data
var_name <- climate_data[[climate_var]]$var_name
# Perform dcc analysis
response <- dcc(
chrono = get(site),  # Use the site variable dynamically
climate = climate,
boot = "exact",
method = "response",
selection = -10:9,
var_names = var_name
)
# Extract coefficients and significance information
coef_values <- response[["coef"]][["coef"]]  # Correlation values
significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
# Find the months where significance is TRUE
significant_months <- which(significant_logical == TRUE)
# If there are significant months, store them
if (length(significant_months) > 0) {
for (month in significant_months) {
# Extract the correlation value for the significant month
correlation_value <- coef_values[month]
if (!is.na(correlation_value)) {
site_summary <- site_summary %>%
add_row(
Site_ID = site,  # Add Site ID here
Climate_Variable = var_name,
Significant_Months = month,
Correlation_Values = correlation_value
)
# Print significant months and correlation values
print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month,
"- Correlation Value:", correlation_value))
}
}
} else {
print(paste("No significant months for site:", site, "-", var_name))
}
}
# Add site summary to the results
results[[site]] <- site_summary
}
# Print the results for each site
kable(results)
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl",
"LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)
# Assign names to the datasets for clarity
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)
# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
# Convert BAI data to a format suitable for `chron` function
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))
# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)
# Access individual chronologies for both BAI and ring-width data
Childs_bai_crn <- bai_chron_list[["Childs"]]
Sheep_bai_crn <- bai_chron_list[["Sheep"]]
UB_bai_crn <- bai_chron_list[["UB"]]
LB_bai_crn <- bai_chron_list[["LB"]]
All_bai_crn <- bai_chron_list[["ALL"]]
AllCor_bai_crn <- bai_chron_list[["ALLCor"]]
Cross_bai_crn <- bai_chron_list[["Crossdated"]]
Childscrn <- rwl_chron_list[["Childs"]]
Sheepcrn <- rwl_chron_list[["Sheep"]]
UBcrn <- rwl_chron_list[["UB"]]
LBcrn <- rwl_chron_list[["LB"]]
Allcrn <- rwl_chron_list[["ALL"]]
AllCorcrn <- rwl_chron_list[["ALLCor"]]
Crosscrn <- rwl_chron_list[["Crossdated"]]
plot.crn(Sheepcrn, add.spline = TRUE, nyears = 5)
plot.crn(UBcrn, add.spline = TRUE, nyears = 5)
plot.crn(LBcrn, add.spline = TRUE, nyears = 5)
plot.crn(Childscrn, add.spline = TRUE, nyears = 5)
plot.crn(AllCorcrn, add.spline = TRUE, nyears = 5)
plot.crn(Allcrn, add.spline = TRUE, nyears = 5)
plot.crn(Crosscrn, add.spline = TRUE, nyears = 5)
plot(AllCor_bai_crn)
plot(AllCor_bai_crn)
plot(AllCor_bai_crn, add.spline = TRUE, nyears = 5)
ggplot(AllCor_bai_crn, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5) +  # Default line size for dataset lines
ggplot(AllCor_bai_crn, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5)   # Default line size for dataset lines
View(AllCor_bai_crn)
View(Crosscrn)
ggplot(Cross_bai_crn, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5)   # Default line size for dataset lines
View(Crosscrn)
Sheep_bai_crn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childs_bai_crn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UB_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LB_bai_crn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
All_bai_crn$Year <- seq(1988, by = 1 , length.out = nrow(Allcrn))
Cross_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(Crosscrn))
ggplot(Cross_bai_crn, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
geom_line(size = 0.5)   # Default line size for dataset lines
ggplot(Cross_bai_crn, aes(x = Year, y = std, color = Dataset)) +
geom_line(size = 0.5)   # Default line size for dataset lines
ggplot(Cross_bai_crn, aes(x = Year, y = std)) +
geom_line(size = 0.5)   # Default line size for dataset lines
View(Childs_bai_crn)
# Access individual chronologies for both BAI and ring-width data
Childs_bai_crn <- bai_chron_list[["Childs"]]
View(Childs_bai_crn)
# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)
bai_chron_list <- lapply(bai_list, function(bai) {
# Convert BAI data to a format suitable for `chron` function
bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
chron(bai_detrended)
})
View(Cross_bai_crn)
View(bai_chron_list)
