---
title: "Dendro"
output: html_document
date: "2024-09-06"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


Library
```{r}
install.packages("dplR")
install.packages("treeclim")
library(dplR)
library(tidyverse)
library(kableExtra)
```

```{r}

install.packages("lmodel2")
install.packages("np")
install.packages("RcppArmadillo")

# Install the package from a local file
install.packages("C:/Users/qm43/Documents/GitHub/Thesis1/treeclim_2.0.6.0.tar.gz", repos = NULL, type = "source")


# Load the library
library(treeclim)

```




```{r message=FALSE, warning=FALSE}
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl", 
           "LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl")

# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)

# Assign names to the datasets for clarity
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")

# Step 2: Calculate BAI using the raw data
bai_list <- lapply(rwl_list, bai.in)

# Step 3: Turn BAI datasets into chronologies
bai_chron_list <- lapply(bai_list, function(bai) {
  # Convert BAI data to a format suitable for `chron` function
  bai_detrended <- detrend(rwl = bai, method = "AgeDepSpline")
  chron(bai_detrended)
})

# Step 4: Detrend original ring-width data for comparison
detrended_list <- lapply(rwl_list, function(rwl) detrend(rwl = rwl, method = "AgeDepSpline"))

# Step 5: Create ring-width chronologies
rwl_chron_list <- lapply(detrended_list, chron)

# Access individual chronologies for both BAI and ring-width data
Childs_bai_crn <- bai_chron_list[["Childs"]]
Sheep_bai_crn <- bai_chron_list[["Sheep"]]
UB_bai_crn <- bai_chron_list[["UB"]]
LB_bai_crn <- bai_chron_list[["LB"]]
All_bai_crn <- bai_chron_list[["ALL"]]
AllCor_bai_crn <- bai_chron_list[["ALLCor"]]
Cross_bai_crn <- bai_chron_list[["Crossdated"]]

AllcorBAI <-bai.in(AllCorcrn)
write.csv(AllcorBAI, "CrossdatedBAI.csv")


Childscrn <- rwl_chron_list[["Childs"]]
Sheepcrn <- rwl_chron_list[["Sheep"]]
UBcrn <- rwl_chron_list[["UB"]]
LBcrn <- rwl_chron_list[["LB"]]
Allcrn <- rwl_chron_list[["ALL"]]
AllCorcrn <- rwl_chron_list[["ALLCor"]]
Crosscrn <- rwl_chron_list[["Crossdated"]]
```

BAI
```{r}
# List of raw ring-width files
files <- c("ChildsCol1.rwl", "SheepCol1.rwl", "UBCol1.rwl", 
           "LBCol1.rwl", "All.rwl", "AllCorrelated.rwl", "All.3+.rwl")
# Assign names to the datasets
names(rwl_list) <- c("Childs", "Sheep", "UB", "LB", "ALL", "ALLCor", "Crossdated")
# Step 1: Read in raw ring-width files
rwl_list <- lapply(files, read.tucson)


```


RWI Plots
```{r}
plot.crn(Sheepcrn, add.spline = TRUE, nyears = 5)
plot.crn(UBcrn, add.spline = TRUE, nyears = 5)
plot.crn(LBcrn, add.spline = TRUE, nyears = 5)

plot.crn(Childscrn, add.spline = TRUE, nyears = 5)

plot.crn(AllCorcrn, add.spline = TRUE, nyears = 5)
plot.crn(Allcrn, add.spline = TRUE, nyears = 5)

plot.crn(Crosscrn, add.spline = TRUE, nyears = 5)

plot(AllCor_bai_crn, add.spline = TRUE, nyears = 5)


```

add year
```{r}
Sheepcrn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childscrn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UBcrn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LBcrn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
Allcrn$Year <- seq(1988, by = 1, length.out = nrow(Allcrn))
Crosscrn$Year <- seq(1994, by = 1, length.out = nrow(Crosscrn))

```

RWI ALL plot
```{r}

# Combine all datasets into one
Sheepcrn$Dataset <- "Sheep Bridge"
Childscrn$Dataset <- "Childs"
UBcrn$Dataset <- "Upper Beasley"
LBcrn$Dataset <- "Lower Beasley"
Allcrn$Dataset <- "All"
Crosscrn$Dataset <- "Correlated"

# Combine datasets
combined_data <- rbind(Sheepcrn, Childscrn, UBcrn, LBcrn, Allcrn, Crosscrn)

# Create the ggplot with legend
ggplot(combined_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
    geom_line(data = Crosscrn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
  geom_line(size = .5) +  # Line thickness
  labs(x = "Year", y = "RWI", title = "Multiple Line Graphs") +
  scale_color_manual(values = c("Sheep Bridge" = "lightgreen", 
                                 "Childs" = "red", 
                                 "Upper Beasley" = "blue", 
                                 "Lower Beasley" = "orange"))+
    geom_hline(yintercept = 1, linetype= "dashed", color = "black")+

  theme_minimal() +
  theme(legend.title = element_blank())  # Optionally remove legend title

```



```{r}
Sheep_bai_crn$Year <- seq(1988, by = 1, length.out = nrow(Sheepcrn))
Childs_bai_crn$Year <- seq(1993, by = 1, length.out = nrow(Childscrn))
UB_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(UBcrn))
LB_bai_crn$Year <- seq(1994, by= 1, length.out = nrow(LBcrn))
All_bai_crn$Year <- seq(1988, by = 1 , length.out = nrow(Allcrn))
Cross_bai_crn$Year <- seq(1994, by= 1, length.out= nrow(Crosscrn))
```



```{r}
# Plot with ggplot2
# Combine all datasets into one
Sheep_bai_crn$Dataset <- "Sheep Bridge"
Childs_bai_crn$Dataset <- "Childs"
UB_bai_crn$Dataset <- "Upper Beasley"
LB_bai_crn$Dataset <- "Lower Beasley"
All_bai_crn$Dataset <- "All"
Cross_bai_crn$Dataset <- "Correlated"

# Combine datasets
combinedBAI_data <- rbind(Sheep_bai_crn, Childs_bai_crn, UB_bai_crn, LB_bai_crn, All_bai_crn, Cross_bai_crn)

ggplot(combinedBAI_data, aes(x = Year, y = std, color = Dataset, linetype = Dataset)) +
  geom_line(size = 0.5) +  # Default line size for dataset lines
  geom_line(data = Cross_bai_crn, aes(x = Year, y = std), color = "black", size = 1) +  # Thicker black line
  labs(x = "Year", y = "BAI (mm/yr2)", title = "Basal Area Increment for all sites") +
  scale_color_manual(values = c("Sheep Bridge" = "lightgreen", 
                                "Childs" = "red", 
                                "Upper Beasley" = "blue", 
                                "Lower Beasley" = "orange")) +  # Custom colors
  theme_minimal() +
  theme(legend.title = element_blank())  # Optionally remove legend title

```





Remove autocorrelation


Correlate to Verde Flows

```{r}

# Rename 'date' column in Crosscrn to 'Date' if necessary
colnames(annual_means)[colnames(annual_means) == "year"] <- "Year"
colnames(meanmin)[colnames(meanmin) == "year"] <- "Year"
colnames(PDSImean)[colnames(PDSImean) == "year"] <- "Year"
colnames(MeanTemp)[colnames(MeanTemp) == "year"] <- "Year"
colnames(Crosscrn)[colnames(Crosscrn) == "year"] <- "Year"
colnames(Precip)[colnames(Precip) == "year"] <- "Year"
colnames(maxflow)[colnames(maxflow) == "year"] <- "Year"


 
annual_means$year <- as.numeric(as.character(annual_means$Year))
mean_winter_flow$Year <- as.numeric(as.character(mean_winter_flow$Year))
meanmin$Year <- as.numeric(as.character(meanmin$Year))
PDSImean$Year <-as.numeric(as.character(PDSImean$Year))
MeanTemp$Year <- as.numeric(as.character(MeanTemp$Year))
Crosscrn$Year <- as.numeric(Crosscrn$Year)
Precip$Year <- as.numeric(Precip$Year) 
maxflow$Year <- as.numeric(maxflow$Year) 


# Corrected syntax
# Standardize 'Year' column and remove duplicate 'annual_means'
AllMerged <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE), 
                    list(annual_means, mean_winter_flow, meanmin, PDSImean, MeanTemp, Crosscrn,Precip))

AllMerged <- AllMerged[,-3]
AllMerged <- AllMerged[,-9]



colnames(AllMerged) <- c("Year", "MeanYear","MeanWinter", "MeanMin","PDSI","Ferenheit","RWI","Sample Depth","TotalPrecip")
AllMerged <- subset(AllMerged, Year >= 1994 & Year <= 2023)


  
  
```




Response Function Analysis
Comparing tree ring growth to...
Streamflow (Downloaded)(Filtered by year)
Temperature (Downloaded)
VPD?
RH?
PDSI (downloaded)

https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/time-series/AZ-025/tavg/1/0/1993-2023?base_prd=true&begbaseyear=1901&endbaseyear=2000




Clean datasets for climate analysis
```{r}
# Align datasets and prepare for analysis
common_years <- Reduce(intersect, list(Allcrn$Year, monthly_means$Year))

# Clean and prepare the `Allcrn` dataset
Allcrn <- Allcrn %>%
  as.data.frame() %>%                       # Ensure it is a data frame
  mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
  filter(Year %in% common_years) %>%        # Filter by common years
  distinct(Year, .keep_all = TRUE)          # Remove duplicates

# Clean and prepare the `monthly_means` dataset
monthly_means <- monthly_means %>%
  as.data.frame() %>%                       # Ensure it is a data frame
  mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
  filter(Year %in% common_years) %>%        # Filter by common years
  distinct(Year, .keep_all = TRUE)          # Remove duplicates

# Clean and prepare the Mean Temp dataset
MeanTemp <- MeanTemp %>%
  as.data.frame() %>%                       # Ensure it is a data frame
  mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
  filter(Year %in% common_years) %>%        # Filter by common years
  distinct(Year, .keep_all = TRUE)          # Remove duplicates

# Clean and prepare the Precip dataset
Precip <- Precip %>%
  as.data.frame() %>%                       # Ensure it is a data frame
  mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
  filter(Year %in% common_years) %>%        # Filter by common years
  distinct(Year, .keep_all = TRUE)          # Remove duplicates

# Clean and prepare the PDSI dataset
PDSImean <- PDSImean %>%
  as.data.frame() %>%                       # Ensure it is a data frame
  mutate(across(-Year, as.numeric)) %>%     # Convert all columns except 'Year' to numeric
  filter(Year %in% common_years) %>%        # Filter by common years
  distinct(Year, .keep_all = TRUE)          # Remove duplicates



```


Correlations 
```{r}
#Mean flows, Exact Bootstrap
Response <- dcc(
  chrono = Allcrn,  #not the chronology
  climate =  monthly_means,
  boot = "std",
  method = "correlation",
   selection = 1:12,
  var_names = "Mean Flow")
plot(Response)

#Mean Flows STD bootstrap, April is usually significant
Response <- dcc(
  chrono = AllCorcrn,
  climate =  monthly_means,
    method = "correlation",
  boot = "std",
 selection = 1:12,
  var_names = "MeanFlow")
plot(Response)

Response$coef

#Mean Precip STD bootstrap
PrecipResponse <- dcc(
  chrono = AllCorcrn,
  climate =  Precip,
    method = "correlation",
  boot = "std",
  selection = 1:12,
  var_names = "Precip")
plot(PrecipResponse)

#Temp
ResponseTemp <- dcc(
  chrono = AllCorcrn,
  climate =  MeanTemp,
    method = "correlation",
  boot = "std",
  selection = 1:12,
  var_names = "MeanTemp")
plot(ResponseTemp)

#PDSI
CorrPDSI <- dcc(
  chrono = AllCorcrn,
  climate =  PDSImean,
    method = "correlation",
  boot = "std",
  selection = 1:12,
  var_names = "PDSI")
plot(CorrPDSI)

```



Loop that runs each site(s) against my climate variable for correlation
```{r}
# Define a list of climate variables and their corresponding names
climate_data <- list(
  MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
  Precip = list(data = Precip, var_name = "Precip"),
  MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
  PDSI = list(data = PDSImean, var_name = "PDSI")
)

# List to store results for each site
results <- list()

# Loop over the sites
for (site in c("LBcrn")) {  # Replace with your actual site names
  site_results <- list()
  
  # Loop over climate variables
  for (climate_var in names(climate_data)) {
    climate <- climate_data[[climate_var]]$data
    var_name <- climate_data[[climate_var]]$var_name
    
    # Perform dcc analysis
    response <- dcc(
      chrono = get(site),  # Use the site variable dynamically
      climate = climate,
      boot = "std",
      method = "correlation",
      selection = 1:12,
      var_names = var_name
    )
    
    # Store results
    site_results[[climate_var]] <- list(
      response = response,
      coefficients = response$coef
    )
    
    # Plot response and explicitly print
    print(plot(response, main = paste("Site:", site, "-", var_name)))
  }
  
  # Add site results to the main list
  results[[site]] <- site_results
}
```


Loop that creates a single plot for each site from the climate variable loop correlation
```{r fig.height=10, fig.width=10, fig.show='hold'}
library(gridExtra)

# Define a list of climate variables and their corresponding names
climate_data <- list(
  MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
  Precip = list(data = Precip, var_name = "Precip"),
  MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
  PDSI = list(data = PDSImean, var_name = "PDSI")
)

# Store plots for each site
plot_list <- list()

for (site in c( "Sheepcrn")) {  # Replace with your actual site names
  for (climate_var in names(climate_data)) {
    climate <- climate_data[[climate_var]]$data
    var_name <- climate_data[[climate_var]]$var_name
    
    # Perform dcc analysis
    response <- dcc(
      chrono = get(site),
      climate = climate,
      boot = "exact",
      method = "correlation",
      selection = 1:12,
      var_names = var_name
    )
    
    # Generate plot and store in list
    p <- plot(response, main = paste("Site:", site, "-", var_name))
    plot_list[[paste(site, climate_var, sep = "_")]] <- p
  }
}

# Combine plots (adjust ncol to set the number of columns)
grid.arrange(
  grobs = plot_list,
  ncol = 2,                  # Number of columns
  padding = unit(100, "lines") # Space between plots
)

```




Response plots
```{r fig.height=10, fig.width=10}
library(gridExtra)

# Define a list of climate variables and their corresponding names
climate_data <- list(
  MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
  Precip = list(data = Precip, var_name = "Precip"),
  MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
  PDSI = list(data = PDSImean, var_name = "PDSI")
)

# Store plots for each site
plot_list <- list()

for (site in c( "LBcrn")) {  # Replace with your actual site names
  for (climate_var in names(climate_data)) {
    climate <- climate_data[[climate_var]]$data
    var_name <- climate_data[[climate_var]]$var_name
    
    # Perform dcc analysis
    response <- dcc(
      chrono = get(site),
      climate = climate,
      boot = "exact",
      method = "response",
      selection = 1:12,
      var_names = var_name
    )
    
    # Generate plot and store in list
    p <- plot(response, main = paste("Site:", site, "-", var_name))
    plot_list[[paste(site, climate_var, sep = "_")]] <- p
  }
}

# Combine plots (adjust ncol to set the number of columns)
reponseplot <- grid.arrange(
  grobs = plot_list,
  ncol = 2,                  # Number of columns
  padding = unit(100, "lines") # Space between plots
)


```


Response table with all significant plots
```{r}

# Define a list of climate variables and their corresponding names
climate_data <- list(
  MeanFlow = list(data = monthly_means, var_name = "Mean Flow"),
  Precip = list(data = Precip, var_name = "Precip"),
  MeanTemp = list(data = MeanTemp, var_name = "MeanTemp"),
  PDSI = list(data = PDSImean, var_name = "PDSI")
)

# List to store results for each site
results <- list()
#,
# Loop over the sites,
for (site in c("AllCorcrn")) {  # Replace with your actual site names
  site_results <- list()
  
 # List to store the significant months and correlations for each site
  site_summary <- data.frame(
    Site_ID = character(),
    Climate_Variable = character(),
    Significant_Months = integer(),
    Correlation_Values = numeric(),
    stringsAsFactors = FALSE
  )
  
  # Loop over climate variables
  for (climate_var in names(climate_data)) {
    climate <- climate_data[[climate_var]]$data
    var_name <- climate_data[[climate_var]]$var_name
    
    # Perform dcc analysis
    response <- dcc(
      chrono = get(site),  # Use the site variable dynamically
      climate = climate,
      boot = "exact",
      method = "response",
      selection = -10:9,
      var_names = var_name
    )
    
    # Extract coefficients and significance information
    coef_values <- response[["coef"]][["coef"]]  # Correlation values
    significant_logical <- response[["coef"]][["significant"]]  # Logical vector for significance
    
    # Find the months where significance is TRUE
    significant_months <- which(significant_logical == TRUE)
    
    # If there are significant months, store them
    if (length(significant_months) > 0) {
      for (month in significant_months) {
        # Extract the correlation value for the significant month
        correlation_value <- coef_values[month]
        
        if (!is.na(correlation_value)) {
          site_summary <- site_summary %>%
            add_row(
              Site_ID = site,  # Add Site ID here
              Climate_Variable = var_name,
              Significant_Months = month,
              Correlation_Values = correlation_value
            )
          
          # Print significant months and correlation values
          print(paste("Site:", site, "- Climate Variable:", var_name, "- Month:", month, 
                      "- Correlation Value:", correlation_value))
        }
      }
    } else {
      print(paste("No significant months for site:", site, "-", var_name))
    }
  }
  
  # Add site summary to the results
  results[[site]] <- site_summary
}

# Print the results for each site
kable(results)
```




Table with significant months
```{r}
kable(results)
```








```{r}
ResponseSeas <- seascorr(
  chrono = AllCorcrn,
  climate =  list(MeanTemp, monthly_means),
  #ci = .1,
  var_names = c("MeanFlow", "Temp"))
plot(ResponseSeas)
summary(ResponseSeas)
```





