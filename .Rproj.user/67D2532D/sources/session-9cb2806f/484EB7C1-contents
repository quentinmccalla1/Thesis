---
title: "Seedling revamp"
output: html_document
date: "2024-12-09"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```



```{r Library, message=FALSE, warning=FALSE}

install.packages("tidyverse",repos = "https://cloud.r-project.org")
install.packages("gridExtra")
install.packages("grid")
install.packages("knitr")
install.packages("kableExtra")


library(grid)
library(kableExtra)
library(tidyverse)
library(knitr)

```

```{r}
brap_data <- read_csv("BRAPALL.csv")
childs_data <- read_csv("ChildsAll.csv")


```


```{r}
brap_data <- brap_data %>%
  mutate(across(starts_with("HDR"), ~ as.numeric(.)))

childs_data <- childs_data %>%
  mutate(across(starts_with("HDR"), ~ as.numeric(.)))
```


```{r}
custom_order <- c("102023", "62024", "122024")  # Replace with your actual visit names or IDs


mean_value_by_visit <- childs_data %>%
  mutate(Visit = factor(Visit, levels = custom_order)) %>%  # Set custom order
  group_by(Visit) %>%  # Group by Visit
  summarise(
    mean_Height = mean(Height, na.rm = TRUE),      # Calculate mean Height
    mean_Diameter = mean(Diameter, na.rm = TRUE),  # Calculate mean Diameter
    mean_hdr = mean(HDR, na.rm = TRUE),            # Calculate mean HDR
    .groups = "drop"  # Ungroup the data after summarization
  ) %>%
  arrange(Visit)  # Arrange based on custom order

# Display the table
kable(mean_value_by_visit, caption = "Childs Means by Visit") %>%
  kable_styling(full_width = FALSE, position = "center", 
                bootstrap_options = c("striped", "bordered"))


```


BRAP plot level means all visits
```{r}
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
results <- data.frame()  # Empty data frame to store the results

for (var in variables) {
  for (visit in visits) {  # Loop through each visit
    # Calculate the mean for each plot and visit
    mean_value <- brap_data %>%
      filter(Visit == visit) %>%  # Filter for the current visit
      group_by(Plot) %>%  # Group by Plot
      summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
    
    # Add the variable name and visit to the result
    mean_value$Variable <- var
    mean_value$Visit <- visit
    
    # Bind to the results
    results <- bind_rows(results, mean_value)
  }
}

# View the final results
print(results)

```


Childs plot level means all visits
```{r}
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
Childsresults <- data.frame()  # Empty data frame to store the results

for (var in variables) {
  for (visit in visits) {  # Loop through each visit
    # Calculate the mean for each plot and visit
    mean_value <- brap_data %>%
      filter(Visit == visit) %>%  # Filter for the current visit
      group_by(Plot) %>%  # Group by Plot
      summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
    
    # Add the variable name and visit to the result
    mean_value$Variable <- var
    mean_value$Visit <- visit
    
    # Bind to the results
    Childsresults <- bind_rows(Childsresults, mean_value)
  }
}

# View the final results
print(Childsresults)

```


BRAP Specific variable plot
```{r}
# Initialize an empty data frame to store the results
Childsresults <- data.frame()

# Choosevariable
variable_of_interest <- "HDR"

for (visit in visits) {  # Loop through each visit
  # Calculate the mean for each plot and visit for the "Diameter" variable
  mean_value <- childs_data %>%
    filter(Visit == visit) %>%  # Filter for the current visit
    group_by(Plot) %>%  # Group by Plot
    summarise(mean_value = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
  
  # Add the variable name and visit to the result
  mean_value$Variable <- variable_of_interest
  mean_value$Visit <- visit
  
  # Bind to the results
  Childsresults <- bind_rows(Childsresults, mean_value)
}

# Pivot the data so that each visit is a separate column
Childsresults_wide <- Childsresults %>%
  pivot_wider(names_from = Visit, values_from = mean_value)

# View the final results in a table format using kable
Childsresults_wide %>%
  kable("html", caption = "Mean HDR Values by Visit for Childs") %>%
  kable_styling(full_width = FALSE)

```

Childs plot specific means
```{r}
# Initialize an empty data frame to store the results
Childsresults <- data.frame()

# Choose the variable of interest
variable_of_interest <- "Height"

# Define the visits explicitly, ensuring that '122024' is included
visits <- c("62024", "102023", "102024", "122024")  # List all the visits you want to include

for (visit in visits) {  # Loop through each visit
  # Calculate the mean for each plot and visit for the chosen variable
  mean_value <- childs_data %>%
    filter(Visit == visit) %>%  # Filter for the current visit
    group_by(Plot) %>%  # Group by Plot
    summarise(mean_value = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
  
  # Add the variable name and visit to the result
  mean_value$Variable <- variable_of_interest
  mean_value$Visit <- visit
  
  # Bind to the results
  Childsresults <- bind_rows(Childsresults, mean_value)
}

# Pivot the data so that each visit is a separate column
Childsresults_wide <- Childsresults %>%
  pivot_wider(names_from = Visit, values_from = mean_value)

# View the final results in a table format using kable
Childsresults_wide %>%
  kable("html", caption = "Mean Height Values by Visit for Childs") %>%
  kable_styling(full_width = FALSE)

```


Plot graphs
```{r}

# Choose the variable of interest (Height in this case)
variable_of_interest <- "Height"

# Calculate the mean height for each plot and visit
mean_height <- childs_data %>%
  group_by(Plot, Visit) %>%  # Group by Plot and Visit
  summarise(mean_height = mean(.data[[variable_of_interest]], na.rm = TRUE), .groups = "drop")  # Calculate mean height, remove NA

# Create a bar plot with more space between bars
ggplot(mean_height, aes(x = factor(Plot), y = mean_height, fill = Visit)) +
  geom_bar(stat = "identity", position = position_dodge(width = .8)) +  # Increase spacing between bars
  labs(title = "Mean Height by Plot and Visit",
       x = "Plot",
       y = "Mean Height") +
  theme_minimal() +
  scale_fill_manual(values = c("skyblue", "lightgreen", "orange", "pink")) +  # Customize colors
  scale_x_discrete(expand = expansion(add = c(2,2))) +  # Add more space around bars on x-axis
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability

```




Factor Visit
```{r}
brap_data$Visit <- as.factor(brap_data$Visit)
childs_data$Visit <- as.factor(childs_data$Visit)

```
Brap ANovA

```{r}
# List of variables to analyze
variables <- c("Diameter", "Height", "HDR") 
# Initialize an empty list to store results
anova_results <- list()
tukey_results <- list()
# Loop through each variable
for (var in variables) {
  # Run ANOVA
  anova_model <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
  anova_results[[var]] <- summary(anova_model)
  
  # Check for significance in the ANOVA model
  p_value <- summary(anova_model)[[1]][["Pr(>F)"]][1]
  if (!is.na(p_value) && p_value < 0.05) {
    # If significant, run Tukey's HSD
    tukey_test <- TukeyHSD(anova_model)
    tukey_results[[var]] <- tukey_test
  } else {
    tukey_results[[var]] <- NULL
  }
}
# View Tukey's HSD results
for (var in variables) {
  if (!is.null(tukey_results[[var]])) {
    cat("\nTukey's HSD for", var, ":\n")
    print(tukey_results[[var]])
  } else {
    cat("\nNo significant results for", var, "in ANOVA.\n")
  }
}

```

BRAP Anova Table
```{r}
# Initialize an empty list to store formatted Tukey results
formatted_results <- list()

# Loop through each variable's Tukey results
for (var in variables) {
  if (!is.null(tukey_results[[var]])) {
    # Extract Tukey results for Visit comparisons
    tukey_data <- as.data.frame(tukey_results[[var]]$Visit)
    tukey_data$Comparison <- rownames(tukey_data)
    rownames(tukey_data) <- NULL
    tukey_data$Variable <- var
    # Reorder columns
    tukey_data <- tukey_data %>%
      select(Variable, Comparison, diff, lwr, upr, `p adj`) %>%
      rename(Mean_Diff = diff, Lower_CI = lwr, Upper_CI = upr, P_Value = `p adj`)
    # Append to formatted results
    formatted_results[[var]] <- tukey_data
  }
}

# Combine all results into one data frame
final_results <- bind_rows(formatted_results)
# Display as a styled table
final_results %>%
  kable("html", caption = "Tukey's HSD Results for BRAP") %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(which(final_results$P_Value < 0.05), background = "lightgreen")

```


Childs ANOVA

```{r}
# List of variables to analyze
Childsvariables <- c("Diameter", "Height", "HDR") 

# Initialize empty lists to store results
Childsanova_results <- list()
Childstukey_results <- list()

# Loop through each variable
for (var in Childsvariables) {
  # Run ANOVA
  Childsanova_model <- aov(as.formula(paste(var, "~ Visit")), data = childs_data)
  Childsanova_results[[var]] <- summary(Childsanova_model)
  
  # Check for significance in the ANOVA model
  p_value <- summary(Childsanova_model)[[1]][["Pr(>F)"]][1]
  if (!is.na(p_value) && p_value < 0.05) {
    # If significant, run Tukey's HSD
    tukey_test <- TukeyHSD(Childsanova_model)
    Childstukey_results[[var]] <- tukey_test
  } else {
    Childstukey_results[[var]] <- NULL
  }
}

# View Tukey's HSD results
for (var in Childsvariables) {
  if (!is.null(Childstukey_results[[var]])) {
    cat("\nTukey's HSD for", var, ":\n")
    print(Childstukey_results[[var]])
  } else {
    cat("\nNo significant results for", var, "in ANOVA.\n")
  }
}


```

Childs Anova Table
```{r}
# Initialize an empty list to store formatted Tukey results for Childs site
Childsformatted_results <- list()

# Loop through each variable's Tukey results
for (var in Childsvariables) {  # Use Childsvariables to ensure proper referencing
  if (!is.null(Childstukey_results[[var]])) {  # Access Childstukey_results for Tukey data
    # Extract Tukey results for Visit comparisons
    tukey_data <- as.data.frame(Childstukey_results[[var]]$Visit)
    tukey_data$Comparison <- rownames(tukey_data)
    rownames(tukey_data) <- NULL
    tukey_data$Variable <- var
    
    # Reorder columns and rename for clarity
    tukey_data <- tukey_data %>%
      select(Variable, Comparison, diff, lwr, upr, `p adj`) %>%
      rename(Mean_Diff = diff, Lower_CI = lwr, Upper_CI = upr, P_Value = `p adj`)
    
    # Append to formatted results
    Childsformatted_results[[var]] <- tukey_data
  }
}

# Combine all formatted results into one data frame
Childsfinal_results <- bind_rows(Childsformatted_results)

# Display the results as a styled table
Childsfinal_results %>%
  kable("html", caption = "Tukey's HSD Results for Childs Site Variables") %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(which(Childsfinal_results$P_Value < 0.05), background = "lightgreen")


```







VARIABLE CORR


```{r}
ChildsVars <- read_csv("ChildsWellSurvey.csv")
BRAPVars <- read_csv("BRAPWellSurvey.csv")

```

BRAP Vars
```{r}
# Target variable (change this to your actual target variable name)
target_var <- BRAPVars$`% Change from original survey`
column_names <- setdiff(names(BRAPVars), "target_var")
# Initialize an empty data frame to store results
cor_results <- data.frame(Variable = character(), Correlation = numeric(), P_Value = numeric(), stringsAsFactors = FALSE)

# Loop through the list of variables to test correlation with the target
for (var_name in column_names) {
  current_var <- BRAPVars[[var_name]]
  if (is.numeric(current_var) && sum(complete.cases(current_var, target_var)) > 2) {
    # Perform Spearman correlation test
    cor_test <- tryCatch(
      cor.test(target_var, current_var, method = "spearman", use = "complete.obs"),
      error = function(e) NULL
    )
        if (!is.null(cor_test)) {
      cor_results <- rbind(cor_results, 
                           data.frame(Variable = var_name, 
                                      Correlation = cor_test$estimate, 
                                      P_Value = cor_test$p.value))
    }
  }
}
correlation_results <- data.frame(cor_results)
rownames(correlation_results) <- NULL
correlation_results <- correlation_results[-4,]

print(correlation_results)

correlation_results %>%
  kable("html", caption = "Variables vs % Change in density from original survey") %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(which(correlation_results$P_Value < 0.05), background = "lightgreen")%>%
 save_kable("my_table.html")

```




Childs Vars
```{r}
# Target variable (change this to your actual target variable name)
target_var <- ChildsVars$`%Change Density`
column_names <- setdiff(names(ChildsVars), "target_var")
# Initialize an empty data frame to store results
cor_results <- data.frame(Variable = character(), Correlation = numeric(), P_Value = numeric(), stringsAsFactors = FALSE)

# Loop through the list of variables to test correlation with the target
for (var_name in column_names) {
  current_var <- ChildsVars[[var_name]]
  if (is.numeric(current_var) && sum(complete.cases(current_var, target_var)) > 2) {
    # Perform Spearman correlation test
    cor_test <- tryCatch(
      cor.test(target_var, current_var, method = "spearman", use = "complete.obs"),
      error = function(e) NULL
    )
        if (!is.null(cor_test)) {
      cor_results <- rbind(cor_results, 
                           data.frame(Variable = var_name, 
                                      Correlation = cor_test$estimate, 
                                      P_Value = cor_test$p.value))
    }
  }
}
correlation_results <- data.frame(cor_results)
rownames(correlation_results) <- NULL
#correlation_results <- correlation_results[-4,]

correlation_results %>%
  kable("html", caption = "Variables vs %Change in original density") %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(which(correlation_results$P_Value < 0.05), background = "lightgreen")%>%
 save_kable("my_table.html")

```





