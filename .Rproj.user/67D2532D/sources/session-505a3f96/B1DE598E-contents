---
title: "FinalProject"
author: "Nick"
date: '`r Sys.Date()`'
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r}
install.packages("tidyr")
install.packages("tidyverse")
install.packages("gridExtra")
install.packages("grid")
library(grid)
library(kableExtra)
library(tidyr)
library(tidyverse)
library(knitr)

Sys.which("make")

version
```


```{r}
brap_data <- read.csv("BRAPALL.csv")

# Reshape to long format
long_data <- brap_data %>%
  pivot_longer(cols = starts_with("Diameter") | starts_with("Height") | starts_with("HDR"),
               names_to = c("Variable", "Date"),
               names_sep = "(?<=[A-Za-z])(?=\\d)",  # Separate based on letter and number
               values_to = "Value")


```

```{r}
long_data <- long_data %>%
  mutate(Date = dmy(paste("01", Date))) %>%  # Convert Date to Date format
  arrange(Date)  # Sort by Date

# Calculate mean for each Variable and Date
mean_values <- mean_values %>%
  group_by(Variable) %>%  # Group by Variable to calculate % change separately for each
  mutate(Percentage_Change = (Mean_Value - lag(Mean_Value)) / lag(Mean_Value) * 100) %>%
  ungroup()  # Remove the grouping

print(mean_values)

mean_values %>%
  kable("html", caption = "Changes in seedling growth") %>%
  kable_styling(full_width = FALSE)

```


```{r}
ggplot(long_data, aes(x = Value, fill = Variable)) +
  geom_histogram(bins = 20, alpha = 0.7, position = "identity") +
  facet_wrap(~ Variable, scales = "free") +
  labs(
    title = "Histograms of Diameter, Height, and HDR",
    x = "Value",
    y = "Count"
  ) +
  theme_minimal()


```


```{r}
# Two-way ANOVA on the reshaped data
anova_result <- aov(Value ~ Variable * Date, data = long_data)
summary(anova_result)
TukeyHSD(anova_result)
tukey_result <- TukeyHSD(anova_result)

```




ANOVA and Tukey Table

```{r}
# Run ANOVA model
anova_model <- aov(Value ~ Variable * Date, data = long_data)
tukey_results <- TukeyHSD(anova_model)

# Function to extract Tukey's results into a data frame
extract_tukey_results <- function(tukey_result, comparison_name) {
  # Check if the comparison name exists in the Tukey results
  if (comparison_name %in% names(tukey_result)) {
    # Convert the matrix to a data frame
    tukey_df <- as.data.frame(tukey_result[[comparison_name]])
    
    # Add the Comparison names as a column
    tukey_df$Comparison <- rownames(tukey_df)
    
    # Reorder columns to match the desired format
    tukey_df <- tukey_df[, c("Comparison", "diff", "lwr", "upr", "p adj")]
    
    return(tukey_df)
  } else {
    # If comparison_name does not exist, return an empty data frame
    return(data.frame(Comparison = NA, Estimate = NA, Lower_CI = NA, Upper_CI = NA, P_Value = NA))
  }
}

# Extract results for each comparison (Variable, Date, Variable:Date)
tukey_results_variable_df <- extract_tukey_results(tukey_results, "Variable")
tukey_results_date_df <- extract_tukey_results(tukey_results, "Date")
tukey_results_interaction_df <- extract_tukey_results(tukey_results, "Variable:Date")

# Combine all the results into one table
tukey_Date <- data.frame(Comparison_Type = "Date", tukey_results_date_df)
tukeyVariable <- data.frame(Comparison_Type = "Variable", tukey_results_variable_df)
Variabledate <- data.frame(Comparison_Type = "Variable:Date", tukey_results_interaction_df)

VariableDateSig <- Variabledate[c(3,6,11,14,18,21,24,29,33),]

PValues <- rbind(VariableDateSig,tukey_Date)
row.names(PValues) <- NULL
Pvalues <- PValues[,-c(4,5)]

Pvalues %>%
  kable("html", caption = "Highlighted Rows Based on P-Value") %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(which(Pvalues$p.adj < 0.05), background = "lightgreen")
```


Survey data

```{r}
WellSurvey <- read_csv("WellSurvey.csv")

```


```{r}
# Target variable (change this to your actual target variable name)
target_var <- WellSurvey$`% Change from original survey`
column_names <- setdiff(names(WellSurvey), "target_var")


# Initialize an empty data frame to store results
cor_results <- data.frame(Variable = character(), Correlation = numeric(), P_Value = numeric(), stringsAsFactors = FALSE)

# Loop through the list of variables to test correlation with the target
for (var_name in column_names) {
  current_var <- WellSurvey[[var_name]]
  
  # Check if the variable is numeric and has enough finite observations
  if (is.numeric(current_var) && sum(complete.cases(current_var, target_var)) > 2) {
    # Perform Spearman correlation test
    cor_test <- tryCatch(
      cor.test(target_var, current_var, method = "spearman", use = "complete.obs"),
      error = function(e) NULL
    )
        if (!is.null(cor_test)) {
      cor_results <- rbind(cor_results, 
                           data.frame(Variable = var_name, 
                                      Correlation = cor_test$estimate, 
                                      P_Value = cor_test$p.value))
    }
  }
}

# Print correlation results
print(cor_results)

correlation_results <- data.frame(cor_results)
rownames(correlation_results) <- NULL
correlation_results <- correlation_results[-4,]

correlation_results %>%
  kable("html", caption = "Highlighted Rows Based on P-Value") %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(which(correlation_results$P_Value < 0.05), background = "lightgreen")

```

```{r}
library(gridExtra)
library(grid)

png("correlation_results.png", width = 800, height = 600) # Set dimensions
grid.table(correlation_results)  # Render the table
dev.off() 


png("cor.png", width = 800, height = 600) # Set dimensions
grid.table(Pvalues)  # Render the table
dev.off() 

png("BRAPgrowth.png", width = 800, height = 600) # Set dimensions
grid.table(mean_values)  # Render the table
dev.off() 
```


```{r}
LM <- glm(data = WellSurvey, WellSurvey$`% Change from original survey` ~ WellSurvey$`Distance to river (m)`)
summary(LM)

```



