---
title: "Seedling revamp"
output: html_document
date: "2024-12-09"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```



```{r Library, message=FALSE, warning=FALSE}

install.packages("tidyverse",repos = "https://cloud.r-project.org")
install.packages("gridExtra")
install.packages("grid")
library(grid)
library(kableExtra)
library(tidyverse)
library(knitr)


```

```{r}
brap_data <- read_csv("BRAPALL.csv")

brap_data <- brap_data %>%
  mutate(across(starts_with("HDR"), ~ as.numeric(.)))
```


```{r}
brap_data %>%
  filter(Plot == 8, Visit == 102023) %>%  # Filter for Plot 1 and Visit 102023
  group_by(Plot) %>%  # Group by the Variable (e.g., Diameter, Height, HDR)
  summarise(mean_value = mean(Diameter, na.rm = TRUE))  # Calculate mean for each Variable


```


```{r}
# Loop through each variable (Diameter, Height, HDR)
variables <- c("Diameter", "Height", "HDR")
results <- data.frame()  # Empty data frame to store the results

for (var in variables) {
  # Calculate the mean for each plot and visit
  mean_value <- brap_data %>%
    filter(Visit == 102024) %>%  # Filter for the specific Visit (102023)
    group_by(Plot) %>%  # Group by Plot
    summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
  
  # Add the variable name to the result
  mean_value$Variable <- var
  
  # Bind to the results
  results <- bind_rows(results, mean_value)
}

# View the final results
print(results)

```


```{r}
variables <- c("Diameter", "Height", "HDR")  # List of variables
visits <- unique(brap_data$Visit)  # Get all unique Visit values
results <- data.frame()  # Empty data frame to store the results

for (var in variables) {
  for (visit in visits) {  # Loop through each visit
    # Calculate the mean for each plot and visit
    mean_value <- brap_data %>%
      filter(Visit == visit) %>%  # Filter for the current visit
      group_by(Plot) %>%  # Group by Plot
      summarise(mean_value = mean(.data[[var]], na.rm = TRUE), .groups = "drop")  # Calculate mean, remove NA
    
    # Add the variable name and visit to the result
    mean_value$Variable <- var
    mean_value$Visit <- visit
    
    # Bind to the results
    results <- bind_rows(results, mean_value)
  }
}

# View the final results
print(results)

```

Anova Height
```{r}
brap_data$Visit <- as.factor(brap_data$Visit)
brap_data$Plot <- as.factor(brap_data$Plot)


# Run separate ANOVA models for each variable
variables <- c("Height", "Diameter", "HDR")
results <- list()  # Create an empty list to store results

for (var in variables) {
  anova_result <- aov(as.formula(paste(var, "~ Visit")), data = brap_data)
  results[[var]] <- summary(anova_result)  # Store the summary for each variable
}

# Check the results for each variable
results

tukey_results <- TukeyHSD(anova_model)
tukey_results$Visit

```

HDR Visit
```{r}
# Run the ANOVA model for HDR with Visit as a factor
anova_hdr <- aov(HDR ~ Visit, data = brap_data)

# Check the summary of the ANOVA model
summary(anova_hdr)

# If the ANOVA is significant, run Tukey's post-hoc test
tukey_hdr <- TukeyHSD(anova_hdr)

# View the Tukey results for Visit
tukey_hdr$Visit

```




























```{r}
# Run ANOVA model
brap_data$Visit <- as.factor(brap_data$Visit)
anova_model <- aov(Height ~ Visit, data = brap_data)
tukey_results <- TukeyHSD(anova_model)

# Function to extract Tukey's results into a data frame
extract_tukey_results <- function(tukey_result, comparison_name) {
  if (comparison_name %in% names(tukey_result)) {
    tukey_df <- as.data.frame(tukey_result[[comparison_name]])
    if (nrow(tukey_df) > 0) {
      tukey_df$Comparison <- rownames(tukey_df)
      rownames(tukey_df) <- NULL
      colnames(tukey_df) <- c("Estimate", "Lower_CI", "Upper_CI", "P_Value", "Comparison")
      return(tukey_df[, c("Comparison", "Estimate", "Lower_CI", "Upper_CI", "P_Value")])
    }
  }
  return(data.frame(Comparison = NA, Estimate = NA, Lower_CI = NA, Upper_CI = NA, P_Value = NA))
}
# Extract Tukey results for the interaction term
tukey_results_interaction_df <- extract_tukey_results(tukey_results, "Variable:Date")
selected_rows <- c(3, 6, 11, 14, 18, 21, 24, 29, 33)
selected_data <- data.frame()
# Loop through the selected rows and add them to the data frame
for (row in selected_rows) {
  if (row <= nrow(tukey_results_interaction_df)) {
    selected_data <- rbind(selected_data, tukey_results_interaction_df[row, ])
  }
}

# Generate the kable table
selected_data %>%
  kable("html", caption = "Selected Rows from Tukey Test") %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(which(selected_data$P_Value < 0.05), background = "lightgreen")


```



```{r}
# Target variable (change this to your actual target variable name)
target_var <- WellSurvey$`% Change from original survey`
column_names <- setdiff(names(WellSurvey), "target_var")
# Initialize an empty data frame to store results
cor_results <- data.frame(Variable = character(), Correlation = numeric(), P_Value = numeric(), stringsAsFactors = FALSE)

# Loop through the list of variables to test correlation with the target
for (var_name in column_names) {
  current_var <- WellSurvey[[var_name]]
  if (is.numeric(current_var) && sum(complete.cases(current_var, target_var)) > 2) {
    # Perform Spearman correlation test
    cor_test <- tryCatch(
      cor.test(target_var, current_var, method = "spearman", use = "complete.obs"),
      error = function(e) NULL
    )
        if (!is.null(cor_test)) {
      cor_results <- rbind(cor_results, 
                           data.frame(Variable = var_name, 
                                      Correlation = cor_test$estimate, 
                                      P_Value = cor_test$p.value))
    }
  }
}


correlation_results <- data.frame(cor_results)
rownames(correlation_results) <- NULL
correlation_results <- correlation_results[-4,]

correlation_results %>%
  kable("html", caption = "Highlighted Rows Based on P-Value") %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(which(correlation_results$P_Value < 0.05), background = "lightgreen")

```
